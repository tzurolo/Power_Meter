
USBtoSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  000022dc  00002370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012c  0080014a  0080014a  000023ba  2**0
                  ALLOC
  3 .debug_aranges 00000848  00000000  00000000  000023ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001563  00000000  00000000  00002c02  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000b6b7  00000000  00000000  00004165  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000304d  00000000  00000000  0000f81c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000899b  00000000  00000000  00012869  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000cd0  00000000  00000000  0001b204  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000499d  00000000  00000000  0001bed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004dea  00000000  00000000  00020871  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008d8  00000000  00000000  0002565b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    USBTerminal_sendCharsToHostCS(&cursorToBuf);
}

void Console_print (
    const char* text)
{
       0:	00 c1       	rjmp	.+512    	; 0x202 <__ctors_end>
    TIMSK3 |= (1 << OCIE3A);// enable timer compare match interrupt
}

void SystemTime_registerForTickNotification (
    SystemTime_TickNotification notificationFcn)
{
       2:	00 00       	nop
}

bool INA219_setCalibration (
    const uint16_t fullScaleDrop,
    INA219_WriteCompletionHandler completionHandler)
{
       4:	1a c1       	rjmp	.+564    	; 0x23a <__bad_interrupt>
        // Not found!
        middle = tableSize;
    }

    return middle;
}
       6:	00 00       	nop
    }
}

void CharString_appendNewline (
    CharString_t* destStr)
{
       8:	18 c1       	rjmp	.+560    	; 0x23a <__bad_interrupt>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       a:	00 00       	nop
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       c:	16 c1       	rjmp	.+556    	; 0x23a <__bad_interrupt>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       e:	00 00       	nop
	}
	else
	{
		return 0;
	}
}
      10:	14 c1       	rjmp	.+552    	; 0x23a <__bad_interrupt>
      12:	00 00       	nop
      14:	12 c1       	rjmp	.+548    	; 0x23a <__bad_interrupt>
      16:	00 00       	nop
      18:	10 c1       	rjmp	.+544    	; 0x23a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0e c1       	rjmp	.+540    	; 0x23a <__bad_interrupt>
      1e:	00 00       	nop
      20:	0c c1       	rjmp	.+536    	; 0x23a <__bad_interrupt>
      22:	00 00       	nop
      24:	0a c1       	rjmp	.+532    	; 0x23a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <__vector_10>
      2c:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__vector_11>
      30:	04 c1       	rjmp	.+520    	; 0x23a <__bad_interrupt>
      32:	00 00       	nop
      34:	02 c1       	rjmp	.+516    	; 0x23a <__bad_interrupt>
      36:	00 00       	nop
      38:	00 c1       	rjmp	.+512    	; 0x23a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	fe c0       	rjmp	.+508    	; 0x23a <__bad_interrupt>
      3e:	00 00       	nop
      40:	fc c0       	rjmp	.+504    	; 0x23a <__bad_interrupt>
      42:	00 00       	nop
      44:	79 c4       	rjmp	.+2290   	; 0x938 <__vector_17>
      46:	00 00       	nop
      48:	f8 c0       	rjmp	.+496    	; 0x23a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f6 c0       	rjmp	.+492    	; 0x23a <__bad_interrupt>
      4e:	00 00       	nop
      50:	f4 c0       	rjmp	.+488    	; 0x23a <__bad_interrupt>
      52:	00 00       	nop
      54:	f2 c0       	rjmp	.+484    	; 0x23a <__bad_interrupt>
      56:	00 00       	nop
      58:	f0 c0       	rjmp	.+480    	; 0x23a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ee c0       	rjmp	.+476    	; 0x23a <__bad_interrupt>
      5e:	00 00       	nop
      60:	ec c0       	rjmp	.+472    	; 0x23a <__bad_interrupt>
      62:	00 00       	nop
      64:	ea c0       	rjmp	.+468    	; 0x23a <__bad_interrupt>
      66:	00 00       	nop
      68:	e8 c0       	rjmp	.+464    	; 0x23a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e6 c0       	rjmp	.+460    	; 0x23a <__bad_interrupt>
      6e:	00 00       	nop
      70:	e4 c0       	rjmp	.+456    	; 0x23a <__bad_interrupt>
      72:	00 00       	nop
      74:	e2 c0       	rjmp	.+452    	; 0x23a <__bad_interrupt>
      76:	00 00       	nop
      78:	e0 c0       	rjmp	.+448    	; 0x23a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	de c0       	rjmp	.+444    	; 0x23a <__bad_interrupt>
      7e:	00 00       	nop
      80:	be c3       	rjmp	.+1916   	; 0x7fe <__vector_32>
      82:	00 00       	nop
      84:	da c0       	rjmp	.+436    	; 0x23a <__bad_interrupt>
      86:	00 00       	nop
      88:	d8 c0       	rjmp	.+432    	; 0x23a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d6 c0       	rjmp	.+428    	; 0x23a <__bad_interrupt>
      8e:	00 00       	nop
      90:	d4 c0       	rjmp	.+424    	; 0x23a <__bad_interrupt>
      92:	00 00       	nop
      94:	d2 c0       	rjmp	.+420    	; 0x23a <__bad_interrupt>
      96:	00 00       	nop
      98:	d0 c0       	rjmp	.+416    	; 0x23a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ce c0       	rjmp	.+412    	; 0x23a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	cc c0       	rjmp	.+408    	; 0x23a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ca c0       	rjmp	.+404    	; 0x23a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c8 c0       	rjmp	.+400    	; 0x23a <__bad_interrupt>
      aa:	00 00       	nop

000000ac <DeviceDescriptor>:
      ac:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
      bc:	dc 01                                               ..

000000be <ConfigurationDescriptor>:
      be:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      ce:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      de:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      ee:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000fc <LanguageString>:
      fc:	04 03 09 04                                         ....

00000100 <ManufacturerString>:
     100:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     110:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000011a <ProductString>:
     11a:	2e 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     ..L.U.F.A. .U.S.
     12a:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
     13a:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

0000014a <crlfP>:
     14a:	0d 0a 00                                            ...

0000014d <__c.4745>:
     14d:	75 6e 72 65 63 6f 67 6e 69 7a 65 64 20 63 6f 6d     unrecognized com
     15d:	6d 61 6e 64 00                                      mand.

00000162 <__c.4741>:
     162:	65 65 77 72 69 74 65 00                             eewrite.

0000016a <__c.4739>:
     16a:	3a 00                                               :.

0000016c <__c.4733>:
     16c:	65 65 72 65 61 64 00                                eeread.

00000173 <__c.4731>:
     173:	72 65 70 6f 72 74 73 00                             reports.

0000017b <__c.4728>:
     17b:	72 65 70 6f 72 74 00                                report.

00000182 <__c.4726>:
     182:	73 61 6d 70 6c 65 73 00                             samples.

0000018a <__c.4723>:
     18a:	73 61 6d 70 6c 65 00                                sample.

00000191 <__c.4721>:
     191:	73 74 6f 70 00                                      stop.

00000196 <__c.4719>:
     196:	73 74 61 72 74 00                                   start.

0000019c <__c.4717>:
     19c:	72 65 73 65 74 00                                   reset.

000001a2 <__c.1776>:
     1a2:	2c 20 00                                            , .

000001a5 <__c.1774>:
     1a5:	2c 20 00                                            , .

000001a8 <__c.1765>:
     1a8:	77 61 69 74 69 6e 67 20 66 6f 72 20 66 69 72 73     waiting for firs
     1b8:	74 20 74 69 63 6b 00                                t tick.

000001bf <__c.1762>:
     1bf:	73 65 74 74 69 6e 67 20 72 65 67 69 73 74 65 72     setting register
     1cf:	20 70 74 72 00                                       ptr.

000001d4 <__c.1760>:
     1d4:	53 74 61 72 74 69 6e 67 00                          Starting.

000001dd <__c.1757>:
     1dd:	43 6f 6e 66 69 67 20 63 6f 6d 70 6c 65 74 65 00     Config complete.

000001ed <__c.1753>:
     1ed:	43 6f 6e 66 69 67 75 72 69 6e 67 00                 Configuring.

000001f9 <__c.1721>:
     1f9:	63 6f 6e 66 69 67 3a 20 00                          config: .

00000202 <__ctors_end>:
     202:	11 24       	eor	r1, r1
     204:	1f be       	out	0x3f, r1	; 63
     206:	cf ef       	ldi	r28, 0xFF	; 255
     208:	da e0       	ldi	r29, 0x0A	; 10
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	cd bf       	out	0x3d, r28	; 61

0000020e <__do_copy_data>:
     20e:	11 e0       	ldi	r17, 0x01	; 1
     210:	a0 e0       	ldi	r26, 0x00	; 0
     212:	b1 e0       	ldi	r27, 0x01	; 1
     214:	ec ed       	ldi	r30, 0xDC	; 220
     216:	f2 e2       	ldi	r31, 0x22	; 34
     218:	02 c0       	rjmp	.+4      	; 0x21e <.do_copy_data_start>

0000021a <.do_copy_data_loop>:
     21a:	05 90       	lpm	r0, Z+
     21c:	0d 92       	st	X+, r0

0000021e <.do_copy_data_start>:
     21e:	aa 34       	cpi	r26, 0x4A	; 74
     220:	b1 07       	cpc	r27, r17
     222:	d9 f7       	brne	.-10     	; 0x21a <.do_copy_data_loop>

00000224 <__do_clear_bss>:
     224:	12 e0       	ldi	r17, 0x02	; 2
     226:	aa e4       	ldi	r26, 0x4A	; 74
     228:	b1 e0       	ldi	r27, 0x01	; 1
     22a:	01 c0       	rjmp	.+2      	; 0x22e <.do_clear_bss_start>

0000022c <.do_clear_bss_loop>:
     22c:	1d 92       	st	X+, r1

0000022e <.do_clear_bss_start>:
     22e:	a6 37       	cpi	r26, 0x76	; 118
     230:	b1 07       	cpc	r27, r17
     232:	e1 f7       	brne	.-8      	; 0x22c <.do_clear_bss_loop>
     234:	13 d0       	rcall	.+38     	; 0x25c <main>
     236:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <_exit>

0000023a <__bad_interrupt>:
     23a:	e2 ce       	rjmp	.-572    	; 0x0 <__vectors>

0000023c <Initialize>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void Initialize (void)
{
    // enable watchdog timer
    wdt_enable(WDTO_500MS);
     23c:	2d e0       	ldi	r18, 0x0D	; 13
     23e:	88 e1       	ldi	r24, 0x18	; 24
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	f8 94       	cli
     246:	a8 95       	wdr
     248:	80 93 60 00 	sts	0x0060, r24
     24c:	0f be       	out	0x3f, r0	; 63
     24e:	20 93 60 00 	sts	0x0060, r18

    /* Disable clock division */
//	clock_prescale_set(clock_div_1);

    Console_Initialize();
     252:	ed d0       	rcall	.+474    	; 0x42e <Console_Initialize>
    SystemTime_Initialize();
     254:	3b d2       	rcall	.+1142   	; 0x6cc <SystemTime_Initialize>
    I2CAsync_Initialize();
     256:	1c d6       	rcall	.+3128   	; 0xe90 <I2CAsync_Initialize>
    PowerMeter_Initialize();
     258:	46 d3       	rcall	.+1676   	; 0x8e6 <PowerMeter_Initialize>
    USBTerminal_Initialize();
}
     25a:	49 c0       	rjmp	.+146    	; 0x2ee <USBTerminal_Initialize>

0000025c <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
    Initialize();
     25c:	ef df       	rcall	.-34     	; 0x23c <Initialize>
    sei();
     25e:	78 94       	sei

    for (;;) {
        // run all the tasks
        SystemTime_task();
     260:	c6 d2       	rcall	.+1420   	; 0x7ee <SystemTime_task>
        PowerMeter_task();
     262:	b2 d3       	rcall	.+1892   	; 0x9c8 <PowerMeter_task>
        I2CAsync_task();
     264:	75 d6       	rcall	.+3306   	; 0xf50 <I2CAsync_task>
        USBTerminal_task();
     266:	8e d0       	rcall	.+284    	; 0x384 <USBTerminal_task>
        Console_task();
     268:	fa d0       	rcall	.+500    	; 0x45e <Console_task>
     26a:	fa cf       	rjmp	.-12     	; 0x260 <main+0x4>

0000026c <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     26c:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     26e:	92 30       	cpi	r25, 0x02	; 2
     270:	49 f0       	breq	.+18     	; 0x284 <CALLBACK_USB_GetDescriptor+0x18>
     272:	93 30       	cpi	r25, 0x03	; 3
     274:	61 f0       	breq	.+24     	; 0x28e <CALLBACK_USB_GetDescriptor+0x22>
     276:	91 30       	cpi	r25, 0x01	; 1
     278:	f9 f4       	brne	.+62     	; 0x2b8 <CALLBACK_USB_GetDescriptor+0x4c>
     27a:	ec ea       	ldi	r30, 0xAC	; 172
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	22 e1       	ldi	r18, 0x12	; 18
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	1e c0       	rjmp	.+60     	; 0x2c0 <CALLBACK_USB_GetDescriptor+0x54>
     284:	ee eb       	ldi	r30, 0xBE	; 190
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	2e e3       	ldi	r18, 0x3E	; 62
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	19 c0       	rjmp	.+50     	; 0x2c0 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     28e:	81 30       	cpi	r24, 0x01	; 1
     290:	49 f0       	breq	.+18     	; 0x2a4 <CALLBACK_USB_GetDescriptor+0x38>
     292:	81 30       	cpi	r24, 0x01	; 1
     294:	18 f0       	brcs	.+6      	; 0x29c <CALLBACK_USB_GetDescriptor+0x30>
     296:	82 30       	cpi	r24, 0x02	; 2
     298:	79 f4       	brne	.+30     	; 0x2b8 <CALLBACK_USB_GetDescriptor+0x4c>
     29a:	08 c0       	rjmp	.+16     	; 0x2ac <CALLBACK_USB_GetDescriptor+0x40>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     29c:	ec ef       	ldi	r30, 0xFC	; 252
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	84 91       	lpm	r24, Z+
     2a2:	07 c0       	rjmp	.+14     	; 0x2b2 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     2a4:	e0 e0       	ldi	r30, 0x00	; 0
     2a6:	f1 e0       	ldi	r31, 0x01	; 1
     2a8:	84 91       	lpm	r24, Z+
     2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     2ac:	ea e1       	ldi	r30, 0x1A	; 26
     2ae:	f1 e0       	ldi	r31, 0x01	; 1
     2b0:	84 91       	lpm	r24, Z+
     2b2:	28 2f       	mov	r18, r24
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <CALLBACK_USB_GetDescriptor+0x54>
     2b8:	e0 e0       	ldi	r30, 0x00	; 0
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	20 e0       	ldi	r18, 0x00	; 0
     2be:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     2c0:	ed 93       	st	X+, r30
     2c2:	fc 93       	st	X, r31
	return Size;
}
     2c4:	c9 01       	movw	r24, r18
     2c6:	08 95       	ret

000002c8 <USBTerminal_isConnected>:
}

bool USBTerminal_isConnected (void)
{
	return USBConnected;
}
     2c8:	80 91 00 02 	lds	r24, 0x0200
     2cc:	08 95       	ret

000002ce <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	USBConnected = true;
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	80 93 00 02 	sts	0x0200, r24
}
     2d4:	08 95       	ret

000002d6 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	USBConnected = false;
     2d6:	10 92 00 02 	sts	0x0200, r1
}
     2da:	08 95       	ret

000002dc <EVENT_CDC_Device_LineEncodingChanged>:
	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
	UCSR1A = (1 << U2X1);
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
#endif
}
     2dc:	08 95       	ret

000002de <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
    CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     2de:	84 e1       	ldi	r24, 0x14	; 20
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <CDC_Device_ProcessControlRequest>

000002e6 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
    bool ConfigSuccess = true;

    ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     2e6:	84 e1       	ldi	r24, 0x14	; 20
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <CDC_Device_ConfigureEndpoints>

000002ee <USBTerminal_Initialize>:
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void USBTerminal_Initialize (void)
{
    ByteQueue_clear(&FromUSB_Buffer);
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	10 d7       	rcall	.+3616   	; 0x1114 <ByteQueue_clear>
    ByteQueue_clear(&ToUSB_Buffer);
     2f4:	8a e0       	ldi	r24, 0x0A	; 10
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	0d d7       	rcall	.+3610   	; 0x1114 <ByteQueue_clear>

    USB_Init();
     2fa:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <USB_Init>

000002fe <USBTerminal_sendCharsToHostP>:
    }
}

void USBTerminal_sendCharsToHostP (
    PGM_P text)
{
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	ec 01       	movw	r28, r24
    // if the ring buffer fills up we simply drop the rest of the text
    PGM_P cp = text;
	char ch = 0;
	do {
		ch = pgm_read_byte(cp);
     304:	fe 01       	movw	r30, r28
     306:	44 91       	lpm	r20, Z+
		++cp;
     308:	21 96       	adiw	r28, 0x01	; 1
		if ((ch != 0) && !ByteQueue_is_full(&ToUSB_Buffer)) {
     30a:	44 23       	and	r20, r20
     30c:	99 f0       	breq	.+38     	; 0x334 <USBTerminal_sendCharsToHostP+0x36>
// returns true if the queue is currently full
inline bool ByteQueue_is_full (
   const ByteQueue *q)
   {
    char SREGSave;
    SREGSave = SREG;
     30e:	8f b7       	in	r24, 0x3f	; 63
    cli();
     310:	f8 94       	cli

    const bool full = q->length == q->capacity;

    SREG = SREGSave;
     312:	8f bf       	out	0x3f, r24	; 63
     314:	20 91 0e 01 	lds	r18, 0x010E
     318:	30 91 0f 01 	lds	r19, 0x010F
     31c:	80 91 10 01 	lds	r24, 0x0110
     320:	90 91 11 01 	lds	r25, 0x0111
     324:	28 17       	cp	r18, r24
     326:	39 07       	cpc	r19, r25
     328:	69 f3       	breq	.-38     	; 0x304 <USBTerminal_sendCharsToHostP+0x6>
			ByteQueue_push(ch, &ToUSB_Buffer);
     32a:	84 2f       	mov	r24, r20
     32c:	6a e0       	ldi	r22, 0x0A	; 10
     32e:	71 e0       	ldi	r23, 0x01	; 1
     330:	fc d6       	rcall	.+3576   	; 0x112a <ByteQueue_push>
     332:	e8 cf       	rjmp	.-48     	; 0x304 <USBTerminal_sendCharsToHostP+0x6>
		}
    } while (ch != 0);
}
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	08 95       	ret

0000033a <USBTerminal_sendLineToHostP>:
}

void USBTerminal_sendLineToHostP (
    PGM_P text)
{
	USBTerminal_sendCharsToHostP(text);
     33a:	e1 df       	rcall	.-62     	; 0x2fe <USBTerminal_sendCharsToHostP>
	USBTerminal_sendCharsToHostP(crlfP);
     33c:	8a e4       	ldi	r24, 0x4A	; 74
     33e:	91 e0       	ldi	r25, 0x01	; 1
}
     340:	de cf       	rjmp	.-68     	; 0x2fe <USBTerminal_sendCharsToHostP>

00000342 <USBTerminal_sendCharsToHost>:
			},
	};

void USBTerminal_sendCharsToHost (
    const char* text)
{
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	ec 01       	movw	r28, r24
     348:	05 c0       	rjmp	.+10     	; 0x354 <USBTerminal_sendCharsToHost+0x12>
    // if the ring buffer fills up we simply drop the rest of the text
    const char* cp = text;
    while ((*cp != 0) && !ByteQueue_is_full(&ToUSB_Buffer)) {
        ByteQueue_push(*cp++, &ToUSB_Buffer);
     34a:	21 96       	adiw	r28, 0x01	; 1
     34c:	84 2f       	mov	r24, r20
     34e:	6a e0       	ldi	r22, 0x0A	; 10
     350:	71 e0       	ldi	r23, 0x01	; 1
     352:	eb d6       	rcall	.+3542   	; 0x112a <ByteQueue_push>
void USBTerminal_sendCharsToHost (
    const char* text)
{
    // if the ring buffer fills up we simply drop the rest of the text
    const char* cp = text;
    while ((*cp != 0) && !ByteQueue_is_full(&ToUSB_Buffer)) {
     354:	48 81       	ld	r20, Y
     356:	44 23       	and	r20, r20
     358:	71 f0       	breq	.+28     	; 0x376 <USBTerminal_sendCharsToHost+0x34>
// returns true if the queue is currently full
inline bool ByteQueue_is_full (
   const ByteQueue *q)
   {
    char SREGSave;
    SREGSave = SREG;
     35a:	8f b7       	in	r24, 0x3f	; 63
    cli();
     35c:	f8 94       	cli

    const bool full = q->length == q->capacity;

    SREG = SREGSave;
     35e:	8f bf       	out	0x3f, r24	; 63
     360:	20 91 0e 01 	lds	r18, 0x010E
     364:	30 91 0f 01 	lds	r19, 0x010F
     368:	80 91 10 01 	lds	r24, 0x0110
     36c:	90 91 11 01 	lds	r25, 0x0111
     370:	28 17       	cp	r18, r24
     372:	39 07       	cpc	r19, r25
     374:	51 f7       	brne	.-44     	; 0x34a <USBTerminal_sendCharsToHost+0x8>
        ByteQueue_push(*cp++, &ToUSB_Buffer);
    }
}
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	08 95       	ret

0000037c <USBTerminal_sendLineToHost>:
}

void USBTerminal_sendLineToHost (
    const char* text)
{
	USBTerminal_sendCharsToHost(text);
     37c:	e2 df       	rcall	.-60     	; 0x342 <USBTerminal_sendCharsToHost>
	USBTerminal_sendCharsToHostP(crlfP);
     37e:	8a e4       	ldi	r24, 0x4A	; 74
     380:	91 e0       	ldi	r25, 0x01	; 1
}
     382:	bd cf       	rjmp	.-134    	; 0x2fe <USBTerminal_sendCharsToHostP>

00000384 <USBTerminal_task>:
	USBTerminal_sendCharsToHostP(text);
	USBTerminal_sendCharsToHostP(crlfP);
}

void USBTerminal_task (void)
{
     384:	1f 93       	push	r17
// returns true if the queue is currently full
inline bool ByteQueue_is_full (
   const ByteQueue *q)
   {
    char SREGSave;
    SREGSave = SREG;
     386:	8f b7       	in	r24, 0x3f	; 63
    cli();
     388:	f8 94       	cli

    const bool full = q->length == q->capacity;

    SREG = SREGSave;
     38a:	8f bf       	out	0x3f, r24	; 63

    /* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
    if (!(ByteQueue_is_full(&FromUSB_Buffer))) {
     38c:	20 91 04 01 	lds	r18, 0x0104
     390:	30 91 05 01 	lds	r19, 0x0105
     394:	80 91 06 01 	lds	r24, 0x0106
     398:	90 91 07 01 	lds	r25, 0x0107
     39c:	28 17       	cp	r18, r24
     39e:	39 07       	cpc	r19, r25
     3a0:	49 f0       	breq	.+18     	; 0x3b4 <USBTerminal_task+0x30>
	int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     3a2:	84 e1       	ldi	r24, 0x14	; 20
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <CDC_Device_ReceiveByte>

	/* Read bytes from the USB OUT endpoint into the USART transmit buffer */
	if (!(ReceivedByte < 0)) {
     3aa:	97 fd       	sbrc	r25, 7
     3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <USBTerminal_task+0x30>
	    ByteQueue_push(ReceivedByte, &FromUSB_Buffer);
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	71 e0       	ldi	r23, 0x01	; 1
     3b2:	bb d6       	rcall	.+3446   	; 0x112a <ByteQueue_push>
// returns the current length of the queue
inline uint16_t ByteQueue_length (
    const ByteQueue *q)
    {
    char SREGSave;
    SREGSave = SREG;
     3b4:	8f b7       	in	r24, 0x3f	; 63
    cli();
     3b6:	f8 94       	cli

    const uint16_t len = q->length;
     3b8:	20 91 0e 01 	lds	r18, 0x010E
     3bc:	30 91 0f 01 	lds	r19, 0x010F

    SREG = SREGSave;
     3c0:	8f bf       	out	0x3f, r24	; 63
        }
    }

    /* Check if there is any data in the ToUSB buffer */
    uint16_t BufferCount = ByteQueue_length(&ToUSB_Buffer);
    if (BufferCount > 0) {
     3c2:	21 15       	cp	r18, r1
     3c4:	31 05       	cpc	r19, r1
     3c6:	59 f1       	breq	.+86     	; 0x41e <USBTerminal_task+0x9a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3c8:	80 91 15 01 	lds	r24, 0x0115
     3cc:	8f 70       	andi	r24, 0x0F	; 15
     3ce:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     3d2:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(VirtualSerial_CDC_Interface.Config.DataINEndpoint.Address);

        /* Check if a packet is already enqueued to the host - if so, we shouldn't try to send more data
	    * until it completes as there is a chance nothing is listening and a lengthy timeout could occur */
        if (Endpoint_IsINReady())
     3d6:	80 ff       	sbrs	r24, 0
     3d8:	22 c0       	rjmp	.+68     	; 0x41e <USBTerminal_task+0x9a>
        {
            /* Never send more than one bank size less one byte to the host at a time, so that we don't block
	        * while a Zero Length Packet (ZLP) to terminate the transfer is sent if the host isn't listening */
            uint8_t BytesToSend = MIN(BufferCount, (CDC_TXRX_EPSIZE - 1));
     3da:	c9 01       	movw	r24, r18
     3dc:	20 31       	cpi	r18, 0x10	; 16
     3de:	31 05       	cpc	r19, r1
     3e0:	10 f0       	brcs	.+4      	; 0x3e6 <USBTerminal_task+0x62>
     3e2:	8f e0       	ldi	r24, 0x0F	; 15
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	18 2f       	mov	r17, r24
     3e8:	18 c0       	rjmp	.+48     	; 0x41a <USBTerminal_task+0x96>
// assumes the queue is not empty
inline ByteQueueElement ByteQueue_head (
   const ByteQueue *q)
{
    char SREGSave;
    SREGSave = SREG;
     3ea:	8f b7       	in	r24, 0x3f	; 63
    cli();
     3ec:	f8 94       	cli

    const ByteQueueElement h = q->bytes[q->head];

    SREG = SREGSave;
     3ee:	8f bf       	out	0x3f, r24	; 63

            /* Read bytes from the USART receive buffer into the USB IN endpoint */
            while (BytesToSend--) {
                /* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
                if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
     3f0:	e0 91 12 01 	lds	r30, 0x0112
     3f4:	f0 91 13 01 	lds	r31, 0x0113
     3f8:	80 91 0a 01 	lds	r24, 0x010A
     3fc:	90 91 0b 01 	lds	r25, 0x010B
     400:	e8 0f       	add	r30, r24
     402:	f9 1f       	adc	r31, r25
     404:	84 e1       	ldi	r24, 0x14	; 20
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	60 81       	ld	r22, Z
     40a:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <CDC_Device_SendByte>
     40e:	11 50       	subi	r17, 0x01	; 1
     410:	88 23       	and	r24, r24
     412:	29 f4       	brne	.+10     	; 0x41e <USBTerminal_task+0x9a>
                        ByteQueue_head(&ToUSB_Buffer)) != ENDPOINT_READYWAIT_NoError) {
                    break;
                }

                /* Dequeue the already sent byte from the buffer now we have confirmed that no transmission error occurred */
                ByteQueue_pop(&ToUSB_Buffer);
     414:	8a e0       	ldi	r24, 0x0A	; 10
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	c7 d6       	rcall	.+3470   	; 0x11a8 <ByteQueue_pop>
            /* Never send more than one bank size less one byte to the host at a time, so that we don't block
	        * while a Zero Length Packet (ZLP) to terminate the transfer is sent if the host isn't listening */
            uint8_t BytesToSend = MIN(BufferCount, (CDC_TXRX_EPSIZE - 1));

            /* Read bytes from the USART receive buffer into the USB IN endpoint */
            while (BytesToSend--) {
     41a:	11 23       	and	r17, r17
     41c:	31 f7       	brne	.-52     	; 0x3ea <USBTerminal_task+0x66>
                ByteQueue_pop(&ToUSB_Buffer);
            }
        }
    }

    CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     41e:	84 e1       	ldi	r24, 0x14	; 20
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <CDC_Device_USBTask>
    USB_USBTask();
     426:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <USB_USBTask>
}
     42a:	1f 91       	pop	r17
     42c:	08 95       	ret

0000042e <Console_Initialize>:
static SystemTime_t nextStatusPrintTime;
static uint8_t currentPrintLine = 5;

void Console_Initialize (void)
{
}
     42e:	08 95       	ret

00000430 <Console_printCS>:
    }
}

void Console_printCS (
    const CharString_t *text)
{
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	ec 01       	movw	r28, r24
    if (USBTerminal_isConnected ()) {
     436:	48 df       	rcall	.-368    	; 0x2c8 <USBTerminal_isConnected>
     438:	88 23       	and	r24, r24
     43a:	19 f0       	breq	.+6      	; 0x442 <Console_printCS+0x12>
            const char* text);
        void USBTerminal_sendLineToHostP (
            PGM_P text);
        inline void USBTerminal_sendLineToHostCS (
            const CharString_t *text)
            { USBTerminal_sendLineToHost(CharString_cstr(text)); }
     43c:	8a 81       	ldd	r24, Y+2	; 0x02
     43e:	9b 81       	ldd	r25, Y+3	; 0x03
     440:	9d df       	rcall	.-198    	; 0x37c <USBTerminal_sendLineToHost>

        // restore cursor to command buffer end
        sendCursorTo(1, CharString_length(&commandBuffer)+1);
#endif
    }
}
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <Console_printP>:
    }
}

void Console_printP (
    PGM_P text)
{
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	ec 01       	movw	r28, r24
    if (USBTerminal_isConnected ()) {
     44e:	3c df       	rcall	.-392    	; 0x2c8 <USBTerminal_isConnected>
     450:	88 23       	and	r24, r24
     452:	11 f0       	breq	.+4      	; 0x458 <Console_printP+0x10>
#endif

	// print text on the current line
	sendCursorTo(currentPrintLine, 1);
#endif
        USBTerminal_sendLineToHostP(text);
     454:	ce 01       	movw	r24, r28
     456:	71 df       	rcall	.-286    	; 0x33a <USBTerminal_sendLineToHostP>

        // restore cursor to command buffer end
        sendCursorTo(1, CharString_length(&commandBuffer)+1);
#endif
    }
}
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <Console_task>:
void Console_Initialize (void)
{
}

void Console_task (void)
{
     45e:	df 93       	push	r29
     460:	cf 93       	push	r28
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	cd 57       	subi	r28, 0x7D	; 125
     468:	d0 40       	sbci	r29, 0x00	; 0
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
// returns the current length of the queue
inline uint16_t ByteQueue_length (
    const ByteQueue *q)
    {
    char SREGSave;
    SREGSave = SREG;
     474:	8f b7       	in	r24, 0x3f	; 63
    cli();
     476:	f8 94       	cli

    const uint16_t len = q->length;

    SREG = SREGSave;
     478:	8f bf       	out	0x3f, r24	; 63
    const uint16_t bufferCount = ByteQueue_length(&FromUSB_Buffer);
    if (bufferCount > 0) {
     47a:	80 91 04 01 	lds	r24, 0x0104
     47e:	90 91 05 01 	lds	r25, 0x0105
     482:	89 2b       	or	r24, r25
     484:	81 f1       	breq	.+96     	; 0x4e6 <Console_task+0x88>
        const uint8_t cmdByte = ByteQueue_pop(&FromUSB_Buffer);
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	8e d6       	rcall	.+3356   	; 0x11a8 <ByteQueue_pop>
        switch (cmdByte) {
     48c:	8d 30       	cpi	r24, 0x0D	; 13
     48e:	19 f0       	breq	.+6      	; 0x496 <Console_task+0x38>
     490:	8f 37       	cpi	r24, 0x7F	; 127
     492:	d9 f4       	brne	.+54     	; 0x4ca <Console_task+0x6c>
     494:	13 c0       	rjmp	.+38     	; 0x4bc <Console_task+0x5e>
                // command complete. execute it
#if SINGLE_SCREEN
                USBTerminal_sendCharsToHost(ESC_CURSOR_POS(2, 1));
                USBTerminal_sendCharsToHostCS(&commandBuffer);
#else
                USBTerminal_sendCharsToHost(ESC_ERASE_LINE);
     496:	8f e2       	ldi	r24, 0x2F	; 47
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	53 df       	rcall	.-346    	; 0x342 <USBTerminal_sendCharsToHost>
                USBTerminal_sendCharsToHost("\r\n");
     49c:	83 e3       	ldi	r24, 0x33	; 51
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	50 df       	rcall	.-352    	; 0x342 <USBTerminal_sendCharsToHost>
#endif
                CommandProcessor_processCommand(CharString_cstr(&commandBuffer));
     4a2:	80 91 44 01 	lds	r24, 0x0144
     4a6:	90 91 45 01 	lds	r25, 0x0145
     4aa:	46 d0       	rcall	.+140    	; 0x538 <CommandProcessor_processCommand>
}

inline void CharString_clear (
    CharString_t* str)
{
    str->length = 0;
     4ac:	10 92 43 01 	sts	0x0143, r1
    str->body[0] = 0;
     4b0:	e0 91 44 01 	lds	r30, 0x0144
     4b4:	f0 91 45 01 	lds	r31, 0x0145
     4b8:	10 82       	st	Z, r1
     4ba:	0a c0       	rjmp	.+20     	; 0x4d0 <Console_task+0x72>
                CharString_clear(&commandBuffer);
                }
                break;
            case 0x7f : {
                CharString_truncate(CharString_length(&commandBuffer) - 1,
     4bc:	80 91 43 01 	lds	r24, 0x0143
     4c0:	81 50       	subi	r24, 0x01	; 1
     4c2:	62 e4       	ldi	r22, 0x42	; 66
     4c4:	71 e0       	ldi	r23, 0x01	; 1
     4c6:	cf d7       	rcall	.+3998   	; 0x1466 <CharString_truncate>
     4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <Console_task+0x72>
                    &commandBuffer);
                }
                break;
            default : {
                // command not complete yet. append to command buffer
                CharString_appendC(cmdByte, &commandBuffer);
     4ca:	62 e4       	ldi	r22, 0x42	; 66
     4cc:	71 e0       	ldi	r23, 0x01	; 1
     4ce:	b4 d7       	rcall	.+3944   	; 0x1438 <CharString_appendC>
        }
		// echo current command
#if SINGLE_SCREEN
        USBTerminal_sendCharsToHost(ESC_CURSOR_POS(1, 1));
#else
        USBTerminal_sendCharsToHost("\r");
     4d0:	86 e3       	ldi	r24, 0x36	; 54
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	36 df       	rcall	.-404    	; 0x342 <USBTerminal_sendCharsToHost>
            const char* text);
        void USBTerminal_sendCharsToHostP (
            PGM_P text);
        inline void USBTerminal_sendCharsToHostCS (
            const CharString_t *text)
            { USBTerminal_sendCharsToHost(CharString_cstr(text)); }
     4d6:	80 91 44 01 	lds	r24, 0x0144
     4da:	90 91 45 01 	lds	r25, 0x0145
     4de:	31 df       	rcall	.-414    	; 0x342 <USBTerminal_sendCharsToHost>
#endif
        USBTerminal_sendCharsToHostCS(&commandBuffer);

        USBTerminal_sendCharsToHost(ESC_ERASE_LINE);
     4e0:	8f e2       	ldi	r24, 0x2F	; 47
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	2e df       	rcall	.-420    	; 0x342 <USBTerminal_sendCharsToHost>

    }

    // display status
    if (USBTerminal_isConnected () &&
     4e6:	f0 de       	rcall	.-544    	; 0x2c8 <USBTerminal_isConnected>
     4e8:	88 23       	and	r24, r24
     4ea:	e1 f0       	breq	.+56     	; 0x524 <Console_task+0xc6>
     4ec:	8a e2       	ldi	r24, 0x2A	; 42
     4ee:	92 e0       	ldi	r25, 0x02	; 2
     4f0:	58 d1       	rcall	.+688    	; 0x7a2 <SystemTime_timeHasArrived>
     4f2:	88 23       	and	r24, r24
     4f4:	b9 f0       	breq	.+46     	; 0x524 <Console_task+0xc6>
        SystemTime_timeHasArrived(&nextStatusPrintTime)) {
#if SINGLE_SCREEN
        USBTerminal_sendCharsToHost(ESC_CURSOR_POS(3, 1));
#endif
        CharString_define(120, statusMsg)
     4f6:	fe 01       	movw	r30, r28
     4f8:	35 96       	adiw	r30, 0x05	; 5
     4fa:	89 e7       	ldi	r24, 0x79	; 121
     4fc:	df 01       	movw	r26, r30
     4fe:	1d 92       	st	X+, r1
     500:	8a 95       	dec	r24
     502:	e9 f7       	brne	.-6      	; 0x4fe <Console_task+0xa0>
     504:	88 e7       	ldi	r24, 0x78	; 120
     506:	89 83       	std	Y+1, r24	; 0x01
     508:	1a 82       	std	Y+2, r1	; 0x02
     50a:	fc 83       	std	Y+4, r31	; 0x04
     50c:	eb 83       	std	Y+3, r30	; 0x03
        CharString_append("status...", &statusMsg);
     50e:	88 e3       	ldi	r24, 0x38	; 56
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	be 01       	movw	r22, r28
     514:	6f 5f       	subi	r22, 0xFF	; 255
     516:	7f 4f       	sbci	r23, 0xFF	; 255
     518:	d7 d7       	rcall	.+4014   	; 0x14c8 <CharString_append>
        //USBTerminal_sendLineToHostCS(&statusMsg);

	// schedule next display
	SystemTime_futureTime(1, &nextStatusPrintTime);
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	6a e2       	ldi	r22, 0x2A	; 42
     520:	72 e0       	ldi	r23, 0x02	; 2
     522:	10 d1       	rcall	.+544    	; 0x744 <SystemTime_futureTime>
	}
}
     524:	c3 58       	subi	r28, 0x83	; 131
     526:	df 4f       	sbci	r29, 0xFF	; 255
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	f8 94       	cli
     52c:	de bf       	out	0x3e, r29	; 62
     52e:	0f be       	out	0x3f, r0	; 63
     530:	cd bf       	out	0x3d, r28	; 61
     532:	cf 91       	pop	r28
     534:	df 91       	pop	r29
     536:	08 95       	ret

00000538 <CommandProcessor_processCommand>:
    CharString_appendP(PSTR("V"), str);
}

void CommandProcessor_processCommand (
    const char* command)
{
     538:	ff 92       	push	r15
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	df 93       	push	r29
     540:	cf 93       	push	r28
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	c3 57       	subi	r28, 0x73	; 115
     548:	d0 40       	sbci	r29, 0x00	; 0
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	de bf       	out	0x3e, r29	; 62
     550:	0f be       	out	0x3f, r0	; 63
     552:	cd bf       	out	0x3d, r28	; 61
     554:	bc 01       	movw	r22, r24
    sprintf(msgbuf, "time: '%s'", timestamp);
    Console_print(msgbuf);
#endif

    char cmdTokenBuf[CMD_TOKEN_BUFFER_LEN];
    strncpy(cmdTokenBuf, command, CMD_TOKEN_BUFFER_LEN-1);
     556:	8e 01       	movw	r16, r28
     558:	0c 5d       	subi	r16, 0xDC	; 220
     55a:	1f 4f       	sbci	r17, 0xFF	; 255
     55c:	c8 01       	movw	r24, r16
     55e:	4f e4       	ldi	r20, 0x4F	; 79
     560:	50 e0       	ldi	r21, 0x00	; 0
     562:	0e 94 2e 11 	call	0x225c	; 0x225c <strncpy>
    cmdTokenBuf[CMD_TOKEN_BUFFER_LEN-1] = 0;
     566:	fe 01       	movw	r30, r28
     568:	ed 58       	subi	r30, 0x8D	; 141
     56a:	ff 4f       	sbci	r31, 0xFF	; 255
     56c:	10 82       	st	Z, r1
    const char* cmdToken = strtok(cmdTokenBuf, tokenDelimiters);
     56e:	c8 01       	movw	r24, r16
     570:	66 e4       	ldi	r22, 0x46	; 70
     572:	71 e0       	ldi	r23, 0x01	; 1
     574:	0e 94 2b 11 	call	0x2256	; 0x2256 <strtok>
     578:	8c 01       	movw	r16, r24
    if (cmdToken != NULL) {
     57a:	00 97       	sbiw	r24, 0x00	; 0
     57c:	09 f4       	brne	.+2      	; 0x580 <CommandProcessor_processCommand+0x48>
     57e:	99 c0       	rjmp	.+306    	; 0x6b2 <CommandProcessor_processCommand+0x17a>
        if (strcasecmp_P(cmdToken, PSTR("reset")) == 0) {
     580:	6c e9       	ldi	r22, 0x9C	; 156
     582:	71 e0       	ldi	r23, 0x01	; 1
     584:	0e 94 00 11 	call	0x2200	; 0x2200 <strcasecmp_P>
     588:	89 2b       	or	r24, r25
     58a:	11 f4       	brne	.+4      	; 0x590 <CommandProcessor_processCommand+0x58>
            PowerMeter_reset();
     58c:	9b d1       	rcall	.+822    	; 0x8c4 <PowerMeter_reset>
     58e:	91 c0       	rjmp	.+290    	; 0x6b2 <CommandProcessor_processCommand+0x17a>
        } else if (strcasecmp_P(cmdToken, PSTR("start")) == 0) {
     590:	c8 01       	movw	r24, r16
     592:	66 e9       	ldi	r22, 0x96	; 150
     594:	71 e0       	ldi	r23, 0x01	; 1
     596:	0e 94 00 11 	call	0x2200	; 0x2200 <strcasecmp_P>
     59a:	89 2b       	or	r24, r25
     59c:	11 f4       	brne	.+4      	; 0x5a2 <CommandProcessor_processCommand+0x6a>
            PowerMeter_start();
     59e:	8b d1       	rcall	.+790    	; 0x8b6 <PowerMeter_start>
     5a0:	88 c0       	rjmp	.+272    	; 0x6b2 <CommandProcessor_processCommand+0x17a>
        } else if (strcasecmp_P(cmdToken, PSTR("stop")) == 0) {
     5a2:	c8 01       	movw	r24, r16
     5a4:	61 e9       	ldi	r22, 0x91	; 145
     5a6:	71 e0       	ldi	r23, 0x01	; 1
     5a8:	0e 94 00 11 	call	0x2200	; 0x2200 <strcasecmp_P>
     5ac:	89 2b       	or	r24, r25
     5ae:	11 f4       	brne	.+4      	; 0x5b4 <CommandProcessor_processCommand+0x7c>
            PowerMeter_stop();
     5b0:	86 d1       	rcall	.+780    	; 0x8be <PowerMeter_stop>
     5b2:	7f c0       	rjmp	.+254    	; 0x6b2 <CommandProcessor_processCommand+0x17a>
        } else if (strcasecmp_P(cmdToken, PSTR("sample")) == 0) {
     5b4:	c8 01       	movw	r24, r16
     5b6:	6a e8       	ldi	r22, 0x8A	; 138
     5b8:	71 e0       	ldi	r23, 0x01	; 1
     5ba:	0e 94 00 11 	call	0x2200	; 0x2200 <strcasecmp_P>
     5be:	89 2b       	or	r24, r25
     5c0:	61 f4       	brne	.+24     	; 0x5da <CommandProcessor_processCommand+0xa2>
            cmdToken = strtok(NULL, tokenDelimiters);
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	66 e4       	ldi	r22, 0x46	; 70
     5c8:	71 e0       	ldi	r23, 0x01	; 1
     5ca:	0e 94 2b 11 	call	0x2256	; 0x2256 <strtok>
            if (cmdToken != NULL) {
     5ce:	89 2b       	or	r24, r25
     5d0:	09 f4       	brne	.+2      	; 0x5d4 <CommandProcessor_processCommand+0x9c>
     5d2:	6f c0       	rjmp	.+222    	; 0x6b2 <CommandProcessor_processCommand+0x17a>
                const unsigned int samplesPerSec = atoi(cmdToken);
                Console_printP(PSTR("samples"));
     5d4:	82 e8       	ldi	r24, 0x82	; 130
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	6b c0       	rjmp	.+214    	; 0x6b0 <CommandProcessor_processCommand+0x178>
            }
        } else if (strcasecmp_P(cmdToken, PSTR("report")) == 0) {
     5da:	c8 01       	movw	r24, r16
     5dc:	6b e7       	ldi	r22, 0x7B	; 123
     5de:	71 e0       	ldi	r23, 0x01	; 1
     5e0:	0e 94 00 11 	call	0x2200	; 0x2200 <strcasecmp_P>
     5e4:	89 2b       	or	r24, r25
     5e6:	61 f4       	brne	.+24     	; 0x600 <CommandProcessor_processCommand+0xc8>
            cmdToken = strtok(NULL, tokenDelimiters);
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	66 e4       	ldi	r22, 0x46	; 70
     5ee:	71 e0       	ldi	r23, 0x01	; 1
     5f0:	0e 94 2b 11 	call	0x2256	; 0x2256 <strtok>
            if (cmdToken != NULL) {
     5f4:	89 2b       	or	r24, r25
     5f6:	09 f4       	brne	.+2      	; 0x5fa <CommandProcessor_processCommand+0xc2>
     5f8:	5c c0       	rjmp	.+184    	; 0x6b2 <CommandProcessor_processCommand+0x17a>
                const unsigned int reportsPerSec = atoi(cmdToken);
                Console_printP(PSTR("reports"));
     5fa:	83 e7       	ldi	r24, 0x73	; 115
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	58 c0       	rjmp	.+176    	; 0x6b0 <CommandProcessor_processCommand+0x178>
            }
	} else if (strcasecmp_P(cmdToken, PSTR("eeread")) == 0) {
     600:	c8 01       	movw	r24, r16
     602:	6c e6       	ldi	r22, 0x6C	; 108
     604:	71 e0       	ldi	r23, 0x01	; 1
     606:	0e 94 00 11 	call	0x2200	; 0x2200 <strcasecmp_P>
     60a:	89 2b       	or	r24, r25
     60c:	79 f5       	brne	.+94     	; 0x66c <CommandProcessor_processCommand+0x134>
            cmdToken = strtok(NULL, tokenDelimiters);
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	66 e4       	ldi	r22, 0x46	; 70
     614:	71 e0       	ldi	r23, 0x01	; 1
     616:	0e 94 2b 11 	call	0x2256	; 0x2256 <strtok>
            if (cmdToken != NULL) {
     61a:	00 97       	sbiw	r24, 0x00	; 0
     61c:	09 f4       	brne	.+2      	; 0x620 <CommandProcessor_processCommand+0xe8>
     61e:	49 c0       	rjmp	.+146    	; 0x6b2 <CommandProcessor_processCommand+0x17a>
                const unsigned int uiAddress = atoi(cmdToken);
     620:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <atoi>
     624:	8c 01       	movw	r16, r24
                const uint8_t eeromData = EEPROM_read(uiAddress);
     626:	82 d7       	rcall	.+3844   	; 0x152c <EEPROM_read>
     628:	f8 2e       	mov	r15, r24
                CharString_define(30, eeromStr);
     62a:	fe 01       	movw	r30, r28
     62c:	35 96       	adiw	r30, 0x05	; 5
     62e:	8f e1       	ldi	r24, 0x1F	; 31
     630:	df 01       	movw	r26, r30
     632:	1d 92       	st	X+, r1
     634:	8a 95       	dec	r24
     636:	e9 f7       	brne	.-6      	; 0x632 <CommandProcessor_processCommand+0xfa>
     638:	8e e1       	ldi	r24, 0x1E	; 30
     63a:	89 83       	std	Y+1, r24	; 0x01
     63c:	1a 82       	std	Y+2, r1	; 0x02
     63e:	fc 83       	std	Y+4, r31	; 0x04
     640:	eb 83       	std	Y+3, r30	; 0x03
                StringUtils_appendDecimal(uiAddress, 1, 0, &eeromStr);
     642:	c8 01       	movw	r24, r16
     644:	61 e0       	ldi	r22, 0x01	; 1
     646:	40 e0       	ldi	r20, 0x00	; 0
     648:	8e 01       	movw	r16, r28
     64a:	0f 5f       	subi	r16, 0xFF	; 255
     64c:	1f 4f       	sbci	r17, 0xFF	; 255
     64e:	98 01       	movw	r18, r16
     650:	81 d6       	rcall	.+3330   	; 0x1354 <StringUtils_appendDecimal>
                CharString_appendP(PSTR(":"), &eeromStr);
     652:	8a e6       	ldi	r24, 0x6A	; 106
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	b8 01       	movw	r22, r16
     658:	13 d7       	rcall	.+3622   	; 0x1480 <CharString_appendP>
                StringUtils_appendDecimal(eeromData, 1, 0, &eeromStr);
     65a:	8f 2d       	mov	r24, r15
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	40 e0       	ldi	r20, 0x00	; 0
     662:	98 01       	movw	r18, r16
     664:	77 d6       	rcall	.+3310   	; 0x1354 <StringUtils_appendDecimal>
                Console_printCS(&eeromStr);
     666:	c8 01       	movw	r24, r16
     668:	e3 de       	rcall	.-570    	; 0x430 <Console_printCS>
     66a:	23 c0       	rjmp	.+70     	; 0x6b2 <CommandProcessor_processCommand+0x17a>
            }
        } else if (strcasecmp_P(cmdToken, PSTR("eewrite")) == 0) {
     66c:	c8 01       	movw	r24, r16
     66e:	62 e6       	ldi	r22, 0x62	; 98
     670:	71 e0       	ldi	r23, 0x01	; 1
     672:	0e 94 00 11 	call	0x2200	; 0x2200 <strcasecmp_P>
     676:	89 2b       	or	r24, r25
     678:	c9 f4       	brne	.+50     	; 0x6ac <CommandProcessor_processCommand+0x174>
            cmdToken = strtok(NULL, tokenDelimiters);
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	66 e4       	ldi	r22, 0x46	; 70
     680:	71 e0       	ldi	r23, 0x01	; 1
     682:	0e 94 2b 11 	call	0x2256	; 0x2256 <strtok>
            if (cmdToken != NULL) {
     686:	00 97       	sbiw	r24, 0x00	; 0
     688:	a1 f0       	breq	.+40     	; 0x6b2 <CommandProcessor_processCommand+0x17a>
                const unsigned int uiAddress = atoi(cmdToken);
     68a:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <atoi>
     68e:	8c 01       	movw	r16, r24
                cmdToken = strtok(NULL, tokenDelimiters);
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	66 e4       	ldi	r22, 0x46	; 70
     696:	71 e0       	ldi	r23, 0x01	; 1
     698:	0e 94 2b 11 	call	0x2256	; 0x2256 <strtok>
                if (cmdToken != NULL) {
     69c:	00 97       	sbiw	r24, 0x00	; 0
     69e:	49 f0       	breq	.+18     	; 0x6b2 <CommandProcessor_processCommand+0x17a>
                    const uint8_t value = atoi(cmdToken);
     6a0:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <atoi>
     6a4:	68 2f       	mov	r22, r24
                    EEPROM_write(uiAddress, value);
     6a6:	c8 01       	movw	r24, r16
     6a8:	39 d7       	rcall	.+3698   	; 0x151c <EEPROM_write>
     6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <CommandProcessor_processCommand+0x17a>
                }
            }
        } else {
            Console_printP(PSTR("unrecognized command"));
     6ac:	8d e4       	ldi	r24, 0x4D	; 77
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	cb de       	rcall	.-618    	; 0x448 <Console_printP>
        }
    }
}
     6b2:	cd 58       	subi	r28, 0x8D	; 141
     6b4:	df 4f       	sbci	r29, 0xFF	; 255
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	cd bf       	out	0x3d, r28	; 61
     6c0:	cf 91       	pop	r28
     6c2:	df 91       	pop	r29
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	ff 90       	pop	r15
     6ca:	08 95       	ret

000006cc <SystemTime_Initialize>:
void SystemTime_Initialize (void)
{
    // set LED pin to be an output
    //LED_DIR |= (1 << LED_PIN); 

    tickCounter = 0;
     6cc:	10 92 2f 02 	sts	0x022F, r1
     6d0:	10 92 2e 02 	sts	0x022E, r1
    secondsSinceReset = 0;
     6d4:	10 92 30 02 	sts	0x0230, r1
     6d8:	10 92 31 02 	sts	0x0231, r1
     6dc:	10 92 32 02 	sts	0x0232, r1
     6e0:	10 92 33 02 	sts	0x0233, r1
    notificationFunction = 0;
     6e4:	10 92 36 02 	sts	0x0236, r1
     6e8:	10 92 35 02 	sts	0x0235, r1

    // set up timer3 to fire interrupt SYSTEMTIME_TICKS_PER_SECOND
    TCCR3B = (TCCR3B & 0xF8) | 3; // prescale by 64
     6ec:	e1 e9       	ldi	r30, 0x91	; 145
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	88 7f       	andi	r24, 0xF8	; 248
     6f4:	83 60       	ori	r24, 0x03	; 3
     6f6:	80 83       	st	Z, r24
    TCCR3B = (TCCR3B & 0xE7) | (1 << 3); // set CTC mode
     6f8:	80 81       	ld	r24, Z
     6fa:	87 7e       	andi	r24, 0xE7	; 231
     6fc:	88 60       	ori	r24, 0x08	; 8
     6fe:	80 83       	st	Z, r24
    OCR3A = (F_CPU / 64) / SYSTEMTIME_TICKS_PER_SECOND;
     700:	84 e3       	ldi	r24, 0x34	; 52
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	90 93 99 00 	sts	0x0099, r25
     708:	80 93 98 00 	sts	0x0098, r24
    TCNT3 = 0;  // start the time counter at 0
     70c:	10 92 95 00 	sts	0x0095, r1
     710:	10 92 94 00 	sts	0x0094, r1
    TIFR3 |= (1 << OCF3A);  // "clear" the timer compare flag
     714:	c1 9a       	sbi	0x18, 1	; 24
    TIMSK3 |= (1 << OCIE3A);// enable timer compare match interrupt
     716:	e1 e7       	ldi	r30, 0x71	; 113
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	80 81       	ld	r24, Z
     71c:	82 60       	ori	r24, 0x02	; 2
     71e:	80 83       	st	Z, r24
}
     720:	08 95       	ret

00000722 <SystemTime_getCurrentTime>:
    return tick;
}

void SystemTime_getCurrentTime (
    SystemTime_t *curTime)
{
     722:	fc 01       	movw	r30, r24
    // we disable interrupts during read of secondsSinceReset because
    // it is updated in an interrupt handler
    char SREGSave;
    SREGSave = SREG;
     724:	2f b7       	in	r18, 0x3f	; 63
    cli();
     726:	f8 94       	cli
    *curTime = secondsSinceReset;
     728:	80 91 30 02 	lds	r24, 0x0230
     72c:	90 91 31 02 	lds	r25, 0x0231
     730:	a0 91 32 02 	lds	r26, 0x0232
     734:	b0 91 33 02 	lds	r27, 0x0233
     738:	80 83       	st	Z, r24
     73a:	91 83       	std	Z+1, r25	; 0x01
     73c:	a2 83       	std	Z+2, r26	; 0x02
     73e:	b3 83       	std	Z+3, r27	; 0x03
    SREG = SREGSave;
     740:	2f bf       	out	0x3f, r18	; 63
}
     742:	08 95       	ret

00000744 <SystemTime_futureTime>:

void SystemTime_futureTime (
    const int secondsFromNow,
    SystemTime_t* futureTime)
{
     744:	cf 92       	push	r12
     746:	df 92       	push	r13
     748:	ef 92       	push	r14
     74a:	ff 92       	push	r15
     74c:	0f 93       	push	r16
     74e:	1f 93       	push	r17
     750:	df 93       	push	r29
     752:	cf 93       	push	r28
     754:	00 d0       	rcall	.+0      	; 0x756 <SystemTime_futureTime+0x12>
     756:	00 d0       	rcall	.+0      	; 0x758 <SystemTime_futureTime+0x14>
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
     75c:	7c 01       	movw	r14, r24
     75e:	6b 01       	movw	r12, r22
    SystemTime_t currentTime;
    SystemTime_getCurrentTime(&currentTime);
     760:	ce 01       	movw	r24, r28
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	de df       	rcall	.-68     	; 0x722 <SystemTime_getCurrentTime>
    *futureTime = currentTime + (SystemTime_t)secondsFromNow;
     766:	00 27       	eor	r16, r16
     768:	f7 fc       	sbrc	r15, 7
     76a:	00 95       	com	r16
     76c:	10 2f       	mov	r17, r16
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	9a 81       	ldd	r25, Y+2	; 0x02
     772:	ab 81       	ldd	r26, Y+3	; 0x03
     774:	bc 81       	ldd	r27, Y+4	; 0x04
     776:	e8 0e       	add	r14, r24
     778:	f9 1e       	adc	r15, r25
     77a:	0a 1f       	adc	r16, r26
     77c:	1b 1f       	adc	r17, r27
     77e:	f6 01       	movw	r30, r12
     780:	e0 82       	st	Z, r14
     782:	f1 82       	std	Z+1, r15	; 0x01
     784:	02 83       	std	Z+2, r16	; 0x02
     786:	13 83       	std	Z+3, r17	; 0x03
}
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	cf 91       	pop	r28
     792:	df 91       	pop	r29
     794:	1f 91       	pop	r17
     796:	0f 91       	pop	r16
     798:	ff 90       	pop	r15
     79a:	ef 90       	pop	r14
     79c:	df 90       	pop	r13
     79e:	cf 90       	pop	r12
     7a0:	08 95       	ret

000007a2 <SystemTime_timeHasArrived>:

bool SystemTime_timeHasArrived (
    const SystemTime_t* time)
{
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	df 93       	push	r29
     7a8:	cf 93       	push	r28
     7aa:	00 d0       	rcall	.+0      	; 0x7ac <SystemTime_timeHasArrived+0xa>
     7ac:	00 d0       	rcall	.+0      	; 0x7ae <SystemTime_timeHasArrived+0xc>
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
     7b2:	8c 01       	movw	r16, r24
    bool timeHasArrived = false;

    SystemTime_t currentTime;
    SystemTime_getCurrentTime(&currentTime);
     7b4:	ce 01       	movw	r24, r28
     7b6:	01 96       	adiw	r24, 0x01	; 1
     7b8:	b4 df       	rcall	.-152    	; 0x722 <SystemTime_getCurrentTime>
    if (currentTime >= (*time)) {
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	29 81       	ldd	r18, Y+1	; 0x01
     7be:	3a 81       	ldd	r19, Y+2	; 0x02
     7c0:	4b 81       	ldd	r20, Y+3	; 0x03
     7c2:	5c 81       	ldd	r21, Y+4	; 0x04
     7c4:	f8 01       	movw	r30, r16
     7c6:	80 81       	ld	r24, Z
     7c8:	91 81       	ldd	r25, Z+1	; 0x01
     7ca:	a2 81       	ldd	r26, Z+2	; 0x02
     7cc:	b3 81       	ldd	r27, Z+3	; 0x03
     7ce:	28 17       	cp	r18, r24
     7d0:	39 07       	cpc	r19, r25
     7d2:	4a 07       	cpc	r20, r26
     7d4:	5b 07       	cpc	r21, r27
     7d6:	08 f0       	brcs	.+2      	; 0x7da <SystemTime_timeHasArrived+0x38>
     7d8:	61 e0       	ldi	r22, 0x01	; 1
        timeHasArrived = true;
    }
    
    return timeHasArrived;
}
     7da:	86 2f       	mov	r24, r22
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	cf 91       	pop	r28
     7e6:	df 91       	pop	r29
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	08 95       	ret

000007ee <SystemTime_task>:
}

void SystemTime_task (void)
{
    // reset the watchdog timer
    if (shuttingDown) {
     7ee:	80 91 34 02 	lds	r24, 0x0234
     7f2:	88 23       	and	r24, r24
     7f4:	11 f0       	breq	.+4      	; 0x7fa <SystemTime_task+0xc>
        LED_OUTPORT |= (1 << LED_PIN);
     7f6:	76 9a       	sbi	0x0e, 6	; 14
     7f8:	08 95       	ret
    } else {
        wdt_reset();
     7fa:	a8 95       	wdr
     7fc:	08 95       	ret

000007fe <__vector_32>:
    const uint8_t seconds = (curTime % 60);
    StringUtils_appendDecimal(seconds, 2, 0, timeString);
}

ISR(TIMER3_COMPA_vect)
{
     7fe:	1f 92       	push	r1
     800:	0f 92       	push	r0
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	0f 92       	push	r0
     806:	11 24       	eor	r1, r1
     808:	2f 93       	push	r18
     80a:	3f 93       	push	r19
     80c:	4f 93       	push	r20
     80e:	5f 93       	push	r21
     810:	6f 93       	push	r22
     812:	7f 93       	push	r23
     814:	8f 93       	push	r24
     816:	9f 93       	push	r25
     818:	af 93       	push	r26
     81a:	bf 93       	push	r27
     81c:	ef 93       	push	r30
     81e:	ff 93       	push	r31
    ++tickCounter;
     820:	80 91 2e 02 	lds	r24, 0x022E
     824:	90 91 2f 02 	lds	r25, 0x022F
     828:	01 96       	adiw	r24, 0x01	; 1
     82a:	90 93 2f 02 	sts	0x022F, r25
     82e:	80 93 2e 02 	sts	0x022E, r24
    if (tickCounter >= SYSTEMTIME_TICKS_PER_SECOND) {
     832:	80 91 2e 02 	lds	r24, 0x022E
     836:	90 91 2f 02 	lds	r25, 0x022F
     83a:	80 5c       	subi	r24, 0xC0	; 192
     83c:	92 41       	sbci	r25, 0x12	; 18
     83e:	b8 f0       	brcs	.+46     	; 0x86e <__vector_32+0x70>
        tickCounter = 0;
     840:	10 92 2f 02 	sts	0x022F, r1
     844:	10 92 2e 02 	sts	0x022E, r1
        ++secondsSinceReset;
     848:	80 91 30 02 	lds	r24, 0x0230
     84c:	90 91 31 02 	lds	r25, 0x0231
     850:	a0 91 32 02 	lds	r26, 0x0232
     854:	b0 91 33 02 	lds	r27, 0x0233
     858:	01 96       	adiw	r24, 0x01	; 1
     85a:	a1 1d       	adc	r26, r1
     85c:	b1 1d       	adc	r27, r1
     85e:	80 93 30 02 	sts	0x0230, r24
     862:	90 93 31 02 	sts	0x0231, r25
     866:	a0 93 32 02 	sts	0x0232, r26
     86a:	b0 93 33 02 	sts	0x0233, r27
    }

    if (notificationFunction != NULL) {
     86e:	e0 91 35 02 	lds	r30, 0x0235
     872:	f0 91 36 02 	lds	r31, 0x0236
     876:	30 97       	sbiw	r30, 0x00	; 0
     878:	09 f0       	breq	.+2      	; 0x87c <__vector_32+0x7e>
        notificationFunction();
     87a:	09 95       	icall
    }

}
     87c:	ff 91       	pop	r31
     87e:	ef 91       	pop	r30
     880:	bf 91       	pop	r27
     882:	af 91       	pop	r26
     884:	9f 91       	pop	r25
     886:	8f 91       	pop	r24
     888:	7f 91       	pop	r23
     88a:	6f 91       	pop	r22
     88c:	5f 91       	pop	r21
     88e:	4f 91       	pop	r20
     890:	3f 91       	pop	r19
     892:	2f 91       	pop	r18
     894:	0f 90       	pop	r0
     896:	0f be       	out	0x3f, r0	; 63
     898:	0f 90       	pop	r0
     89a:	1f 90       	pop	r1
     89c:	18 95       	reti

0000089e <writeCompletionHandler>:

static void writeCompletionHandler (
    const bool success,
    const I2CStatusCode i2cStatus)
{
    INA219OperationComplete = true;
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	80 93 3b 02 	sts	0x023B, r24
}
     8a4:	08 95       	ret

000008a6 <readCompletionHandler>:
static void readCompletionHandler (
    const bool success,
    const I2CStatusCode i2cStatus,
    const int16_t registerValue)
{
    INA219OperationComplete = true;
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	80 93 3b 02 	sts	0x023B, r24
    latestCurrentReading = registerValue;
     8ac:	50 93 47 02 	sts	0x0247, r21
     8b0:	40 93 46 02 	sts	0x0246, r20
}
     8b4:	08 95       	ret

000008b6 <PowerMeter_start>:

void PowerMeter_start (void)
{
    enabled = true;
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	80 93 38 02 	sts	0x0238, r24
}
     8bc:	08 95       	ret

000008be <PowerMeter_stop>:

void PowerMeter_stop (void)
{
    enabled = false;
     8be:	10 92 38 02 	sts	0x0238, r1
}
     8c2:	08 95       	ret

000008c4 <PowerMeter_reset>:

void PowerMeter_reset (void)
{
    accumulatedCurrent = 0;
     8c4:	10 92 4c 02 	sts	0x024C, r1
     8c8:	10 92 4d 02 	sts	0x024D, r1
     8cc:	10 92 4e 02 	sts	0x024E, r1
     8d0:	10 92 4f 02 	sts	0x024F, r1
    accumulatedTime = 0;
     8d4:	10 92 48 02 	sts	0x0248, r1
     8d8:	10 92 49 02 	sts	0x0249, r1
     8dc:	10 92 4a 02 	sts	0x024A, r1
     8e0:	10 92 4b 02 	sts	0x024B, r1
}
     8e4:	08 95       	ret

000008e6 <PowerMeter_Initialize>:

void PowerMeter_Initialize (void)
{
    enabled = false;
     8e6:	10 92 38 02 	sts	0x0238, r1
    ticksPerReport = 100;   // start off with reporting 10 times per second
     8ea:	84 e6       	ldi	r24, 0x64	; 100
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	90 93 3f 02 	sts	0x023F, r25
     8f2:	80 93 3e 02 	sts	0x023E, r24
    accumulatedCurrent = 0;
     8f6:	10 92 4c 02 	sts	0x024C, r1
     8fa:	10 92 4d 02 	sts	0x024D, r1
     8fe:	10 92 4e 02 	sts	0x024E, r1
     902:	10 92 4f 02 	sts	0x024F, r1

    adcBias = 5;
     906:	85 e0       	ldi	r24, 0x05	; 5
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	90 93 51 02 	sts	0x0251, r25
     90e:	80 93 50 02 	sts	0x0250, r24

    // set up timer1 to fire interrupt every millisecond
    TCCR1B = (TCCR1B & 0xF8) | 3; // prescale by 64
     912:	e1 e8       	ldi	r30, 0x81	; 129
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	80 81       	ld	r24, Z
     918:	88 7f       	andi	r24, 0xF8	; 248
     91a:	83 60       	ori	r24, 0x03	; 3
     91c:	80 83       	st	Z, r24
    TCCR1B = (TCCR1B & 0xE7) | (1 << 3); // set CTC mode
     91e:	80 81       	ld	r24, Z
     920:	87 7e       	andi	r24, 0xE7	; 231
     922:	88 60       	ori	r24, 0x08	; 8
     924:	80 83       	st	Z, r24
    OCR1A = (F_CPU / 64) / 1000;
     926:	8a ef       	ldi	r24, 0xFA	; 250
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	90 93 89 00 	sts	0x0089, r25
     92e:	80 93 88 00 	sts	0x0088, r24

    pmState = pms_initial;
     932:	10 92 37 02 	sts	0x0237, r1
}
     936:	08 95       	ret

00000938 <__vector_17>:
            break;
    }
}

ISR(TIMER1_COMPA_vect)
{
     938:	1f 92       	push	r1
     93a:	0f 92       	push	r0
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	0f 92       	push	r0
     940:	11 24       	eor	r1, r1
     942:	2f 93       	push	r18
     944:	3f 93       	push	r19
     946:	4f 93       	push	r20
     948:	8f 93       	push	r24
     94a:	9f 93       	push	r25
     94c:	af 93       	push	r26
     94e:	bf 93       	push	r27
    tick1mS = true;
     950:	41 e0       	ldi	r20, 0x01	; 1
     952:	40 93 39 02 	sts	0x0239, r20
    ++numTicks;
     956:	80 91 3c 02 	lds	r24, 0x023C
     95a:	90 91 3d 02 	lds	r25, 0x023D
     95e:	01 96       	adiw	r24, 0x01	; 1
     960:	90 93 3d 02 	sts	0x023D, r25
     964:	80 93 3c 02 	sts	0x023C, r24
    if (numTicks >= ticksPerReport) {
     968:	20 91 3c 02 	lds	r18, 0x023C
     96c:	30 91 3d 02 	lds	r19, 0x023D
     970:	80 91 3e 02 	lds	r24, 0x023E
     974:	90 91 3f 02 	lds	r25, 0x023F
     978:	28 17       	cp	r18, r24
     97a:	39 07       	cpc	r19, r25
     97c:	30 f0       	brcs	.+12     	; 0x98a <__vector_17+0x52>
        reportIsDue = true;
     97e:	40 93 3a 02 	sts	0x023A, r20
        numTicks = 0;
     982:	10 92 3d 02 	sts	0x023D, r1
     986:	10 92 3c 02 	sts	0x023C, r1
    }
    ++accumulatedTime;
     98a:	80 91 48 02 	lds	r24, 0x0248
     98e:	90 91 49 02 	lds	r25, 0x0249
     992:	a0 91 4a 02 	lds	r26, 0x024A
     996:	b0 91 4b 02 	lds	r27, 0x024B
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	a1 1d       	adc	r26, r1
     99e:	b1 1d       	adc	r27, r1
     9a0:	80 93 48 02 	sts	0x0248, r24
     9a4:	90 93 49 02 	sts	0x0249, r25
     9a8:	a0 93 4a 02 	sts	0x024A, r26
     9ac:	b0 93 4b 02 	sts	0x024B, r27
}
     9b0:	bf 91       	pop	r27
     9b2:	af 91       	pop	r26
     9b4:	9f 91       	pop	r25
     9b6:	8f 91       	pop	r24
     9b8:	4f 91       	pop	r20
     9ba:	3f 91       	pop	r19
     9bc:	2f 91       	pop	r18
     9be:	0f 90       	pop	r0
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	0f 90       	pop	r0
     9c4:	1f 90       	pop	r1
     9c6:	18 95       	reti

000009c8 <PowerMeter_task>:

    pmState = pms_initial;
}

void PowerMeter_task (void)
{
     9c8:	8f 92       	push	r8
     9ca:	9f 92       	push	r9
     9cc:	af 92       	push	r10
     9ce:	bf 92       	push	r11
     9d0:	cf 92       	push	r12
     9d2:	df 92       	push	r13
     9d4:	ef 92       	push	r14
     9d6:	ff 92       	push	r15
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	df 93       	push	r29
     9de:	cf 93       	push	r28
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	ad 97       	sbiw	r28, 0x2d	; 45
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	de bf       	out	0x3e, r29	; 62
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	cd bf       	out	0x3d, r28	; 61
    switch (pmState) {
     9f0:	80 91 37 02 	lds	r24, 0x0237
     9f4:	82 30       	cpi	r24, 0x02	; 2
     9f6:	79 f1       	breq	.+94     	; 0xa56 <PowerMeter_task+0x8e>
     9f8:	83 30       	cpi	r24, 0x03	; 3
     9fa:	30 f4       	brcc	.+12     	; 0xa08 <PowerMeter_task+0x40>
     9fc:	88 23       	and	r24, r24
     9fe:	71 f0       	breq	.+28     	; 0xa1c <PowerMeter_task+0x54>
     a00:	81 30       	cpi	r24, 0x01	; 1
     a02:	09 f0       	breq	.+2      	; 0xa06 <PowerMeter_task+0x3e>
     a04:	39 c1       	rjmp	.+626    	; 0xc78 <__stack+0x179>
     a06:	1e c0       	rjmp	.+60     	; 0xa44 <PowerMeter_task+0x7c>
     a08:	84 30       	cpi	r24, 0x04	; 4
     a0a:	09 f4       	brne	.+2      	; 0xa0e <PowerMeter_task+0x46>
     a0c:	58 c0       	rjmp	.+176    	; 0xabe <PowerMeter_task+0xf6>
     a0e:	84 30       	cpi	r24, 0x04	; 4
     a10:	08 f4       	brcc	.+2      	; 0xa14 <PowerMeter_task+0x4c>
     a12:	5e c0       	rjmp	.+188    	; 0xad0 <PowerMeter_task+0x108>
     a14:	85 30       	cpi	r24, 0x05	; 5
     a16:	09 f0       	breq	.+2      	; 0xa1a <PowerMeter_task+0x52>
     a18:	2f c1       	rjmp	.+606    	; 0xc78 <__stack+0x179>
     a1a:	77 c0       	rjmp	.+238    	; 0xb0a <__stack+0xb>
        case pms_initial :
            if (INA219_setConfiguration(
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	61 e0       	ldi	r22, 0x01	; 1
     a20:	43 e0       	ldi	r20, 0x03	; 3
     a22:	23 e0       	ldi	r18, 0x03	; 3
     a24:	09 e0       	ldi	r16, 0x09	; 9
     a26:	35 e0       	ldi	r19, 0x05	; 5
     a28:	e3 2e       	mov	r14, r19
     a2a:	9f e4       	ldi	r25, 0x4F	; 79
     a2c:	c9 2e       	mov	r12, r25
     a2e:	94 e0       	ldi	r25, 0x04	; 4
     a30:	d9 2e       	mov	r13, r25
     a32:	83 d1       	rcall	.+774    	; 0xd3a <INA219_setConfiguration>
     a34:	88 23       	and	r24, r24
     a36:	09 f4       	brne	.+2      	; 0xa3a <PowerMeter_task+0x72>
     a38:	1f c1       	rjmp	.+574    	; 0xc78 <__stack+0x179>
                false, ibrng_32V, ipga_div8, iadc_12bit, iadc_2sample, im_shuntContinuous,
                writeCompletionHandler)) {
                Console_printP(PSTR("Configuring"));
     a3a:	8d ee       	ldi	r24, 0xED	; 237
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	04 dd       	rcall	.-1528   	; 0x448 <Console_printP>
                pmState = pms_waitingForConfigCompletion;
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	18 c1       	rjmp	.+560    	; 0xc74 <__stack+0x175>
            }
            break;
        case pms_waitingForConfigCompletion :
            if (INA219OperationComplete) {
     a44:	80 91 3b 02 	lds	r24, 0x023B
     a48:	88 23       	and	r24, r24
     a4a:	09 f4       	brne	.+2      	; 0xa4e <PowerMeter_task+0x86>
     a4c:	15 c1       	rjmp	.+554    	; 0xc78 <__stack+0x179>
                Console_printP(PSTR("Config complete"));
     a4e:	8d ed       	ldi	r24, 0xDD	; 221
     a50:	91 e0       	ldi	r25, 0x01	; 1
     a52:	fa dc       	rcall	.-1548   	; 0x448 <Console_printP>
     a54:	58 c0       	rjmp	.+176    	; 0xb06 <__stack+0x7>
                pmState = pms_stopped;
            }
            break;
        case pms_stopped :
            if (enabled) {
     a56:	80 91 38 02 	lds	r24, 0x0238
     a5a:	88 23       	and	r24, r24
     a5c:	09 f4       	brne	.+2      	; 0xa60 <PowerMeter_task+0x98>
     a5e:	0c c1       	rjmp	.+536    	; 0xc78 <__stack+0x179>
                tick1mS = false;
     a60:	10 92 39 02 	sts	0x0239, r1
                reportIsDue = false;
     a64:	10 92 3a 02 	sts	0x023A, r1
                numTicks = 0;
     a68:	10 92 3d 02 	sts	0x023D, r1
     a6c:	10 92 3c 02 	sts	0x023C, r1
                numSamples = 0;
     a70:	10 92 41 02 	sts	0x0241, r1
     a74:	10 92 40 02 	sts	0x0240, r1
                sampleSum = 0;
     a78:	10 92 42 02 	sts	0x0242, r1
     a7c:	10 92 43 02 	sts	0x0243, r1
     a80:	10 92 44 02 	sts	0x0244, r1
     a84:	10 92 45 02 	sts	0x0245, r1

                Console_printP(PSTR("Starting"));
     a88:	84 ed       	ldi	r24, 0xD4	; 212
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	dd dc       	rcall	.-1606   	; 0x448 <Console_printP>

                // start the timer
                TCNT1 = 0;  // start the time counter at 0
     a8e:	10 92 85 00 	sts	0x0085, r1
     a92:	10 92 84 00 	sts	0x0084, r1
                TIFR1 |= (1 << OCF1A);  // "clear" the timer compare flag
     a96:	b1 9a       	sbi	0x16, 1	; 22
                TIMSK1 |= (1 << OCIE1A);// enable timer compare match interrupt
     a98:	80 91 6f 00 	lds	r24, 0x006F
     a9c:	82 60       	ori	r24, 0x02	; 2
     a9e:	80 93 6f 00 	sts	0x006F, r24

                INA219OperationComplete = false;
     aa2:	10 92 3b 02 	sts	0x023B, r1
                if (INA219_setRegisterPtr(ira_shuntVoltage, writeCompletionHandler)) {
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	6f e4       	ldi	r22, 0x4F	; 79
     aaa:	74 e0       	ldi	r23, 0x04	; 4
     aac:	2b d1       	rcall	.+598    	; 0xd04 <INA219_setRegisterPtr>
     aae:	88 23       	and	r24, r24
     ab0:	09 f4       	brne	.+2      	; 0xab4 <PowerMeter_task+0xec>
     ab2:	e2 c0       	rjmp	.+452    	; 0xc78 <__stack+0x179>
                    Console_printP(PSTR("setting register ptr"));
     ab4:	8f eb       	ldi	r24, 0xBF	; 191
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	c7 dc       	rcall	.-1650   	; 0x448 <Console_printP>
                    pmState = pms_waitingForRegisterPtrSet;
     aba:	84 e0       	ldi	r24, 0x04	; 4
     abc:	db c0       	rjmp	.+438    	; 0xc74 <__stack+0x175>
                }
            }
            break;
        case pms_waitingForRegisterPtrSet :
            if (INA219OperationComplete) {
     abe:	80 91 3b 02 	lds	r24, 0x023B
     ac2:	88 23       	and	r24, r24
     ac4:	09 f4       	brne	.+2      	; 0xac8 <PowerMeter_task+0x100>
     ac6:	d8 c0       	rjmp	.+432    	; 0xc78 <__stack+0x179>
                Console_printP(PSTR("waiting for first tick"));
     ac8:	88 ea       	ldi	r24, 0xA8	; 168
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	bd dc       	rcall	.-1670   	; 0x448 <Console_printP>
     ace:	d1 c0       	rjmp	.+418    	; 0xc72 <__stack+0x173>
                pmState = pms_waitingForTick;
            }
            break;
        case pms_waitingForTick :
            if (enabled) {
     ad0:	80 91 38 02 	lds	r24, 0x0238
     ad4:	88 23       	and	r24, r24
     ad6:	89 f0       	breq	.+34     	; 0xafa <PowerMeter_task+0x132>
                if (tick1mS) {
     ad8:	80 91 39 02 	lds	r24, 0x0239
     adc:	88 23       	and	r24, r24
     ade:	09 f4       	brne	.+2      	; 0xae2 <PowerMeter_task+0x11a>
     ae0:	cb c0       	rjmp	.+406    	; 0xc78 <__stack+0x179>
                    // request current reading
                    INA219OperationComplete = false;
     ae2:	10 92 3b 02 	sts	0x023B, r1
                    if (INA219_readRegister(readCompletionHandler)) {
     ae6:	83 e5       	ldi	r24, 0x53	; 83
     ae8:	94 e0       	ldi	r25, 0x04	; 4
     aea:	f3 d0       	rcall	.+486    	; 0xcd2 <INA219_readRegister>
     aec:	88 23       	and	r24, r24
     aee:	09 f4       	brne	.+2      	; 0xaf2 <PowerMeter_task+0x12a>
     af0:	c3 c0       	rjmp	.+390    	; 0xc78 <__stack+0x179>
                        tick1mS = false;
     af2:	10 92 39 02 	sts	0x0239, r1
                        pmState = pms_waitingForCurrentReading;
     af6:	85 e0       	ldi	r24, 0x05	; 5
     af8:	bd c0       	rjmp	.+378    	; 0xc74 <__stack+0x175>
                    }
                }
            } else {
                // disabled - stop timer interrupts
                TIFR1 |= (1 << OCF1A);  // "clear" the timer compare flag
     afa:	b1 9a       	sbi	0x16, 1	; 22
                TIMSK1 &= ~(1 << OCIE1A);// disable timer compare match interrupt
     afc:	80 91 6f 00 	lds	r24, 0x006F
     b00:	8d 7f       	andi	r24, 0xFD	; 253
     b02:	80 93 6f 00 	sts	0x006F, r24
                pmState = pms_stopped;
     b06:	82 e0       	ldi	r24, 0x02	; 2
     b08:	b5 c0       	rjmp	.+362    	; 0xc74 <__stack+0x175>
            }
            break;
        case pms_waitingForCurrentReading :
            if (INA219OperationComplete) {
     b0a:	80 91 3b 02 	lds	r24, 0x023B
     b0e:	88 23       	and	r24, r24
     b10:	09 f4       	brne	.+2      	; 0xb14 <__stack+0x15>
     b12:	b2 c0       	rjmp	.+356    	; 0xc78 <__stack+0x179>
                ++numSamples;
     b14:	40 91 40 02 	lds	r20, 0x0240
     b18:	50 91 41 02 	lds	r21, 0x0241
     b1c:	4f 5f       	subi	r20, 0xFF	; 255
     b1e:	5f 4f       	sbci	r21, 0xFF	; 255
     b20:	50 93 41 02 	sts	0x0241, r21
     b24:	40 93 40 02 	sts	0x0240, r20
                sampleSum += (latestCurrentReading + adcBias);
     b28:	80 91 50 02 	lds	r24, 0x0250
     b2c:	90 91 51 02 	lds	r25, 0x0251
     b30:	20 91 46 02 	lds	r18, 0x0246
     b34:	30 91 47 02 	lds	r19, 0x0247
     b38:	82 0f       	add	r24, r18
     b3a:	93 1f       	adc	r25, r19
     b3c:	7c 01       	movw	r14, r24
     b3e:	00 27       	eor	r16, r16
     b40:	f7 fc       	sbrc	r15, 7
     b42:	00 95       	com	r16
     b44:	10 2f       	mov	r17, r16
     b46:	80 91 42 02 	lds	r24, 0x0242
     b4a:	90 91 43 02 	lds	r25, 0x0243
     b4e:	a0 91 44 02 	lds	r26, 0x0244
     b52:	b0 91 45 02 	lds	r27, 0x0245
     b56:	e8 0e       	add	r14, r24
     b58:	f9 1e       	adc	r15, r25
     b5a:	0a 1f       	adc	r16, r26
     b5c:	1b 1f       	adc	r17, r27
     b5e:	e0 92 42 02 	sts	0x0242, r14
     b62:	f0 92 43 02 	sts	0x0243, r15
     b66:	00 93 44 02 	sts	0x0244, r16
     b6a:	10 93 45 02 	sts	0x0245, r17

                if (reportIsDue) {
     b6e:	80 91 3a 02 	lds	r24, 0x023A
     b72:	88 23       	and	r24, r24
     b74:	09 f4       	brne	.+2      	; 0xb78 <__stack+0x79>
     b76:	7d c0       	rjmp	.+250    	; 0xc72 <__stack+0x173>
                    int32_t reportTime;
                    char SREGSave = SREG;
     b78:	8f b7       	in	r24, 0x3f	; 63
                    cli();
     b7a:	f8 94       	cli
                    reportIsDue = false;
     b7c:	10 92 3a 02 	sts	0x023A, r1
                    reportTime = accumulatedTime;
     b80:	80 90 48 02 	lds	r8, 0x0248
     b84:	90 90 49 02 	lds	r9, 0x0249
     b88:	a0 90 4a 02 	lds	r10, 0x024A
     b8c:	b0 90 4b 02 	lds	r11, 0x024B
                    SREG = SREGSave;
     b90:	8f bf       	out	0x3f, r24	; 63

                    const int32_t sampleAverageCurrent = sampleSum / numSamples;
     b92:	9a 01       	movw	r18, r20
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	50 e0       	ldi	r21, 0x00	; 0
     b98:	c8 01       	movw	r24, r16
     b9a:	b7 01       	movw	r22, r14
     b9c:	0e 94 c8 10 	call	0x2190	; 0x2190 <__divmodsi4>
     ba0:	69 01       	movw	r12, r18
     ba2:	7a 01       	movw	r14, r20
                    accumulatedCurrent += sampleAverageCurrent;
     ba4:	80 91 4c 02 	lds	r24, 0x024C
     ba8:	90 91 4d 02 	lds	r25, 0x024D
     bac:	a0 91 4e 02 	lds	r26, 0x024E
     bb0:	b0 91 4f 02 	lds	r27, 0x024F
     bb4:	8c 0d       	add	r24, r12
     bb6:	9d 1d       	adc	r25, r13
     bb8:	ae 1d       	adc	r26, r14
     bba:	bf 1d       	adc	r27, r15
     bbc:	80 93 4c 02 	sts	0x024C, r24
     bc0:	90 93 4d 02 	sts	0x024D, r25
     bc4:	a0 93 4e 02 	sts	0x024E, r26
     bc8:	b0 93 4f 02 	sts	0x024F, r27

                    // report sample and accumulated current
                    CharString_define(40, report);
     bcc:	fe 01       	movw	r30, r28
     bce:	35 96       	adiw	r30, 0x05	; 5
     bd0:	89 e2       	ldi	r24, 0x29	; 41
     bd2:	df 01       	movw	r26, r30
     bd4:	1d 92       	st	X+, r1
     bd6:	8a 95       	dec	r24
     bd8:	e9 f7       	brne	.-6      	; 0xbd4 <__stack+0xd5>
     bda:	88 e2       	ldi	r24, 0x28	; 40
     bdc:	89 83       	std	Y+1, r24	; 0x01
     bde:	1a 82       	std	Y+2, r1	; 0x02
     be0:	fc 83       	std	Y+4, r31	; 0x04
     be2:	eb 83       	std	Y+3, r30	; 0x03
                    StringUtils_appendDecimal32(reportTime, 1, 3, &report);
     be4:	c5 01       	movw	r24, r10
     be6:	b4 01       	movw	r22, r8
     be8:	41 e0       	ldi	r20, 0x01	; 1
     bea:	23 e0       	ldi	r18, 0x03	; 3
     bec:	5e 01       	movw	r10, r28
     bee:	08 94       	sec
     bf0:	a1 1c       	adc	r10, r1
     bf2:	b1 1c       	adc	r11, r1
     bf4:	85 01       	movw	r16, r10
     bf6:	0a d3       	rcall	.+1556   	; 0x120c <StringUtils_appendDecimal32>
                    CharString_appendP(PSTR(", "), &report);
     bf8:	85 ea       	ldi	r24, 0xA5	; 165
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	b5 01       	movw	r22, r10
     bfe:	40 d4       	rcall	.+2176   	; 0x1480 <CharString_appendP>
                    StringUtils_appendDecimal32(sampleAverageCurrent, 1, 1, &report);
     c00:	c7 01       	movw	r24, r14
     c02:	b6 01       	movw	r22, r12
     c04:	41 e0       	ldi	r20, 0x01	; 1
     c06:	21 e0       	ldi	r18, 0x01	; 1
     c08:	01 d3       	rcall	.+1538   	; 0x120c <StringUtils_appendDecimal32>
                    CharString_appendP(PSTR(", "), &report);
     c0a:	82 ea       	ldi	r24, 0xA2	; 162
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	b5 01       	movw	r22, r10
     c10:	37 d4       	rcall	.+2158   	; 0x1480 <CharString_appendP>
                    const int32_t accumulatedMAh =
                        accumulatedCurrent / (360 * (1000 / ticksPerReport));
                    StringUtils_appendDecimal32(accumulatedMAh, 1, 2, &report);
     c12:	60 91 3e 02 	lds	r22, 0x023E
     c16:	70 91 3f 02 	lds	r23, 0x023F
     c1a:	88 ee       	ldi	r24, 0xE8	; 232
     c1c:	93 e0       	ldi	r25, 0x03	; 3
     c1e:	0e 94 92 10 	call	0x2124	; 0x2124 <__udivmodhi4>
     c22:	88 e6       	ldi	r24, 0x68	; 104
     c24:	91 e0       	ldi	r25, 0x01	; 1
     c26:	68 9f       	mul	r22, r24
     c28:	90 01       	movw	r18, r0
     c2a:	69 9f       	mul	r22, r25
     c2c:	30 0d       	add	r19, r0
     c2e:	78 9f       	mul	r23, r24
     c30:	30 0d       	add	r19, r0
     c32:	11 24       	eor	r1, r1
     c34:	40 e0       	ldi	r20, 0x00	; 0
     c36:	50 e0       	ldi	r21, 0x00	; 0
     c38:	60 91 4c 02 	lds	r22, 0x024C
     c3c:	70 91 4d 02 	lds	r23, 0x024D
     c40:	80 91 4e 02 	lds	r24, 0x024E
     c44:	90 91 4f 02 	lds	r25, 0x024F
     c48:	0e 94 c8 10 	call	0x2190	; 0x2190 <__divmodsi4>
     c4c:	ca 01       	movw	r24, r20
     c4e:	b9 01       	movw	r22, r18
     c50:	41 e0       	ldi	r20, 0x01	; 1
     c52:	22 e0       	ldi	r18, 0x02	; 2
     c54:	db d2       	rcall	.+1462   	; 0x120c <StringUtils_appendDecimal32>
                    Console_printCS(&report);
     c56:	c5 01       	movw	r24, r10
     c58:	eb db       	rcall	.-2090   	; 0x430 <Console_printCS>

                    // reset for next report
                    numSamples = 0;
     c5a:	10 92 41 02 	sts	0x0241, r1
     c5e:	10 92 40 02 	sts	0x0240, r1
                    sampleSum = 0;
     c62:	10 92 42 02 	sts	0x0242, r1
     c66:	10 92 43 02 	sts	0x0243, r1
     c6a:	10 92 44 02 	sts	0x0244, r1
     c6e:	10 92 45 02 	sts	0x0245, r1
                }
                pmState = pms_waitingForTick;
     c72:	83 e0       	ldi	r24, 0x03	; 3
     c74:	80 93 37 02 	sts	0x0237, r24
            }
            break;
    }
}
     c78:	ad 96       	adiw	r28, 0x2d	; 45
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	df 90       	pop	r13
     c92:	cf 90       	pop	r12
     c94:	bf 90       	pop	r11
     c96:	af 90       	pop	r10
     c98:	9f 90       	pop	r9
     c9a:	8f 90       	pop	r8
     c9c:	08 95       	ret

00000c9e <writeHandler>:
    const bool success,
    const I2CStatusCode i2cStatus,
    const uint8_t readDataLength,
    const uint8_t* readData)
{
    if (clientWriteCompletionHandler != 0) {
     c9e:	e0 91 54 02 	lds	r30, 0x0254
     ca2:	f0 91 55 02 	lds	r31, 0x0255
     ca6:	30 97       	sbiw	r30, 0x00	; 0
     ca8:	09 f0       	breq	.+2      	; 0xcac <writeHandler+0xe>
        clientWriteCompletionHandler(success, i2cStatus);
     caa:	09 95       	icall
     cac:	08 95       	ret

00000cae <readHandler>:
void readHandler (
    const bool success,
    const I2CStatusCode i2cStatus,
    const uint8_t readDataLength,
    const uint8_t* readData)
{
     cae:	98 2f       	mov	r25, r24
     cb0:	f9 01       	movw	r30, r18
    if (clientReadCompletionHandler != 0) {
     cb2:	20 91 52 02 	lds	r18, 0x0252
     cb6:	30 91 53 02 	lds	r19, 0x0253
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	41 f0       	breq	.+16     	; 0xcd0 <readHandler+0x22>
        // assuming readDataLength == 2
        const int16_t registerValue = (readData[0] << 8) + readData[1];
        clientReadCompletionHandler(success, i2cStatus, registerValue);
     cc0:	81 81       	ldd	r24, Z+1	; 0x01
     cc2:	50 81       	ld	r21, Z
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	48 0f       	add	r20, r24
     cc8:	51 1d       	adc	r21, r1
     cca:	89 2f       	mov	r24, r25
     ccc:	f9 01       	movw	r30, r18
     cce:	09 95       	icall
     cd0:	08 95       	ret

00000cd2 <INA219_readRegister>:
        writeHandler);
}

bool INA219_readRegister (
    INA219_ReadCompletionHandler completionHandler)
{
     cd2:	ef 92       	push	r14
     cd4:	ff 92       	push	r15
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
    clientReadCompletionHandler = completionHandler;
     cda:	90 93 53 02 	sts	0x0253, r25
     cde:	80 93 52 02 	sts	0x0252, r24
    return I2CAsync_transferData(INA219_I2C_ADDR,
     ce2:	80 e4       	ldi	r24, 0x40	; 64
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	50 e0       	ldi	r21, 0x00	; 0
     cea:	22 e0       	ldi	r18, 0x02	; 2
     cec:	06 e5       	ldi	r16, 0x56	; 86
     cee:	12 e0       	ldi	r17, 0x02	; 2
     cf0:	97 e5       	ldi	r25, 0x57	; 87
     cf2:	e9 2e       	mov	r14, r25
     cf4:	96 e0       	ldi	r25, 0x06	; 6
     cf6:	f9 2e       	mov	r15, r25
     cf8:	d9 d0       	rcall	.+434    	; 0xeac <I2CAsync_transferData>
        0, 0,
        REGISTER_DATA_LEN, dataBuffer,
        readHandler);
}
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	ff 90       	pop	r15
     d00:	ef 90       	pop	r14
     d02:	08 95       	ret

00000d04 <INA219_setRegisterPtr>:
}

bool INA219_setRegisterPtr (
    const INA219RegisterAddr registerAddr,
    INA219_WriteCompletionHandler completionHandler)
{
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
    dataBuffer[0] = registerAddr;
     d0c:	80 93 56 02 	sts	0x0256, r24
    clientWriteCompletionHandler = completionHandler;
     d10:	70 93 55 02 	sts	0x0255, r23
     d14:	60 93 54 02 	sts	0x0254, r22
    return I2CAsync_transferData(INA219_I2C_ADDR,
     d18:	80 e4       	ldi	r24, 0x40	; 64
     d1a:	61 e0       	ldi	r22, 0x01	; 1
     d1c:	46 e5       	ldi	r20, 0x56	; 86
     d1e:	52 e0       	ldi	r21, 0x02	; 2
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	00 e0       	ldi	r16, 0x00	; 0
     d24:	10 e0       	ldi	r17, 0x00	; 0
     d26:	3f e4       	ldi	r19, 0x4F	; 79
     d28:	e3 2e       	mov	r14, r19
     d2a:	36 e0       	ldi	r19, 0x06	; 6
     d2c:	f3 2e       	mov	r15, r19
     d2e:	be d0       	rcall	.+380    	; 0xeac <I2CAsync_transferData>
        PTR_LEN, dataBuffer,
        0, 0,
        writeHandler);
}
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	ff 90       	pop	r15
     d36:	ef 90       	pop	r14
     d38:	08 95       	ret

00000d3a <INA219_setConfiguration>:
    const INA219PGA pga,
    const INA219ADC busAdc,
    const INA219ADC shuntAdc,
    const INA219Mode mode,
    INA219_WriteCompletionHandler completionHandler)
{
     d3a:	af 92       	push	r10
     d3c:	bf 92       	push	r11
     d3e:	cf 92       	push	r12
     d40:	df 92       	push	r13
     d42:	ef 92       	push	r14
     d44:	ff 92       	push	r15
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	c1 54       	subi	r28, 0x41	; 65
     d54:	d0 40       	sbci	r29, 0x00	; 0
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
    dataBuffer[0] = ira_configuration;
     d60:	10 92 56 02 	sts	0x0256, r1
        ((reset ? 1 : 0) << 15) |
        (busVoltageRange << 13) |
        (pga << 11) |
        (busAdc << 7) |
        (shuntAdc << 3) |
        mode;
     d64:	b6 2e       	mov	r11, r22
     d66:	b2 94       	swap	r11
     d68:	bb 0c       	add	r11, r11
     d6a:	a0 ee       	ldi	r26, 0xE0	; 224
     d6c:	ba 22       	and	r11, r26
     d6e:	aa 24       	eor	r10, r10
     d70:	78 2f       	mov	r23, r24
     d72:	77 95       	ror	r23
     d74:	77 27       	eor	r23, r23
     d76:	77 95       	ror	r23
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	a6 2a       	or	r10, r22
     d7c:	b7 2a       	or	r11, r23
     d7e:	94 2f       	mov	r25, r20
     d80:	99 0f       	add	r25, r25
     d82:	99 0f       	add	r25, r25
     d84:	99 0f       	add	r25, r25
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	a8 2a       	or	r10, r24
     d8a:	b9 2a       	or	r11, r25
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	36 95       	lsr	r19
     d90:	32 2f       	mov	r19, r18
     d92:	22 27       	eor	r18, r18
     d94:	37 95       	ror	r19
     d96:	27 95       	ror	r18
     d98:	a2 2a       	or	r10, r18
     d9a:	b3 2a       	or	r11, r19
     d9c:	10 e0       	ldi	r17, 0x00	; 0
     d9e:	e3 e0       	ldi	r30, 0x03	; 3
     da0:	00 0f       	add	r16, r16
     da2:	11 1f       	adc	r17, r17
     da4:	ea 95       	dec	r30
     da6:	e1 f7       	brne	.-8      	; 0xda0 <INA219_setConfiguration+0x66>
     da8:	a0 2a       	or	r10, r16
     daa:	b1 2a       	or	r11, r17
     dac:	ff 24       	eor	r15, r15
     dae:	ae 28       	or	r10, r14
     db0:	bf 28       	or	r11, r15

    CharString_define(60, msg);
     db2:	fe 01       	movw	r30, r28
     db4:	35 96       	adiw	r30, 0x05	; 5
     db6:	8d e3       	ldi	r24, 0x3D	; 61
     db8:	df 01       	movw	r26, r30
     dba:	1d 92       	st	X+, r1
     dbc:	8a 95       	dec	r24
     dbe:	e9 f7       	brne	.-6      	; 0xdba <INA219_setConfiguration+0x80>
     dc0:	8c e3       	ldi	r24, 0x3C	; 60
     dc2:	89 83       	std	Y+1, r24	; 0x01
     dc4:	fc 83       	std	Y+4, r31	; 0x04
     dc6:	eb 83       	std	Y+3, r30	; 0x03
}

inline void CharString_clear (
    CharString_t* str)
{
    str->length = 0;
     dc8:	1a 82       	std	Y+2, r1	; 0x02
    str->body[0] = 0;
     dca:	1d 82       	std	Y+5, r1	; 0x05
    CharString_copyP(PSTR("config: "), &msg);
     dcc:	89 ef       	ldi	r24, 0xF9	; 249
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	8e 01       	movw	r16, r28
     dd2:	0f 5f       	subi	r16, 0xFF	; 255
     dd4:	1f 4f       	sbci	r17, 0xFF	; 255
     dd6:	b8 01       	movw	r22, r16
     dd8:	53 d3       	rcall	.+1702   	; 0x1480 <CharString_appendP>
    StringUtils_appendDecimal(configurationWord, 1, 0, &msg);
     dda:	c5 01       	movw	r24, r10
     ddc:	61 e0       	ldi	r22, 0x01	; 1
     dde:	40 e0       	ldi	r20, 0x00	; 0
     de0:	98 01       	movw	r18, r16
     de2:	b8 d2       	rcall	.+1392   	; 0x1354 <StringUtils_appendDecimal>
    Console_printCS(&msg);
     de4:	c8 01       	movw	r24, r16
     de6:	24 db       	rcall	.-2488   	; 0x430 <Console_printCS>

    dataBuffer[1] = (configurationWord >> 8) & 0xFF;
     de8:	b0 92 57 02 	sts	0x0257, r11
    dataBuffer[2] = configurationWord & 0xFF;
     dec:	a0 92 58 02 	sts	0x0258, r10
    clientWriteCompletionHandler = completionHandler;
     df0:	d0 92 55 02 	sts	0x0255, r13
     df4:	c0 92 54 02 	sts	0x0254, r12
    return I2CAsync_transferData(INA219_I2C_ADDR,
     df8:	80 e4       	ldi	r24, 0x40	; 64
     dfa:	63 e0       	ldi	r22, 0x03	; 3
     dfc:	46 e5       	ldi	r20, 0x56	; 86
     dfe:	52 e0       	ldi	r21, 0x02	; 2
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	00 e0       	ldi	r16, 0x00	; 0
     e04:	10 e0       	ldi	r17, 0x00	; 0
     e06:	7f e4       	ldi	r23, 0x4F	; 79
     e08:	e7 2e       	mov	r14, r23
     e0a:	76 e0       	ldi	r23, 0x06	; 6
     e0c:	f7 2e       	mov	r15, r23
     e0e:	4e d0       	rcall	.+156    	; 0xeac <I2CAsync_transferData>
        CONFIGURATION_DATA_LEN, dataBuffer,
        0, 0,
        writeHandler);
}
     e10:	cf 5b       	subi	r28, 0xBF	; 191
     e12:	df 4f       	sbci	r29, 0xFF	; 255
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	de bf       	out	0x3e, r29	; 62
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	ff 90       	pop	r15
     e28:	ef 90       	pop	r14
     e2a:	df 90       	pop	r13
     e2c:	cf 90       	pop	r12
     e2e:	bf 90       	pop	r11
     e30:	af 90       	pop	r10
     e32:	08 95       	ret

00000e34 <sendStart>:
static I2CAsync_CompletionHandler i2cCompletionHandler;
static SystemTime_t timeoutTime;

static void sendStart (void)
{
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     e34:	84 ea       	ldi	r24, 0xA4	; 164
     e36:	80 93 bc 00 	sts	0x00BC, r24
}
     e3a:	08 95       	ret

00000e3c <sendStop>:

static void sendStop (void)
{
    TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     e3c:	84 e9       	ldi	r24, 0x94	; 148
     e3e:	80 93 bc 00 	sts	0x00BC, r24
}
     e42:	08 95       	ret

00000e44 <i2cStatus>:

static I2CStatusCode i2cStatus (void)
{
    return ((I2CStatusCode)(TWSR & 0xF8));
     e44:	80 91 b9 00 	lds	r24, 0x00B9
}
     e48:	88 7f       	andi	r24, 0xF8	; 248
     e4a:	08 95       	ret

00000e4c <terminateRead>:

static void terminateRead (
    const I2CStatusCode status)
{
     e4c:	1f 93       	push	r17
     e4e:	18 2f       	mov	r17, r24
    sendStop();
     e50:	f5 df       	rcall	.-22     	; 0xe3c <sendStop>
    i2cState = is_idle;
     e52:	10 92 59 02 	sts	0x0259, r1
    i2cCompletionHandler(false, status, 0, NULL);
     e56:	e0 91 62 02 	lds	r30, 0x0262
     e5a:	f0 91 63 02 	lds	r31, 0x0263
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	61 2f       	mov	r22, r17
     e62:	40 e0       	ldi	r20, 0x00	; 0
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	09 95       	icall
}
     e6a:	1f 91       	pop	r17
     e6c:	08 95       	ret

00000e6e <terminateWrite>:

static void terminateWrite (
    const I2CStatusCode status)
{
     e6e:	1f 93       	push	r17
     e70:	18 2f       	mov	r17, r24
    sendStop();
     e72:	e4 df       	rcall	.-56     	; 0xe3c <sendStop>
    i2cState = is_idle;
     e74:	10 92 59 02 	sts	0x0259, r1
    i2cCompletionHandler(false, status, 0, NULL);
     e78:	e0 91 62 02 	lds	r30, 0x0262
     e7c:	f0 91 63 02 	lds	r31, 0x0263
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	61 2f       	mov	r22, r17
     e84:	40 e0       	ldi	r20, 0x00	; 0
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	09 95       	icall
}
     e8c:	1f 91       	pop	r17
     e8e:	08 95       	ret

00000e90 <I2CAsync_Initialize>:
    Console_printCS(&str);
}

void I2CAsync_Initialize (void)
{
    TWBR = 3;   // with a 16MHz CPU clock this makes the SCL frequency 400KHz
     e90:	83 e0       	ldi	r24, 0x03	; 3
     e92:	80 93 b8 00 	sts	0x00B8, r24

    i2cState = is_idle;
     e96:	10 92 59 02 	sts	0x0259, r1
}
     e9a:	08 95       	ret

00000e9c <I2CAsync_isIdle>:
            break;
    }
}

bool I2CAsync_isIdle (void)
{
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	80 91 59 02 	lds	r24, 0x0259
     ea2:	88 23       	and	r24, r24
     ea4:	09 f4       	brne	.+2      	; 0xea8 <I2CAsync_isIdle+0xc>
     ea6:	91 e0       	ldi	r25, 0x01	; 1
    return (i2cState == is_idle);
}
     ea8:	89 2f       	mov	r24, r25
     eaa:	08 95       	ret

00000eac <I2CAsync_transferData>:
    const uint8_t writeDataLength,
    const uint8_t *writeData,
    const uint8_t readDataLength,
    uint8_t *readData,
    I2CAsync_CompletionHandler completionHandler)
{
     eac:	bf 92       	push	r11
     eae:	cf 92       	push	r12
     eb0:	df 92       	push	r13
     eb2:	ef 92       	push	r14
     eb4:	ff 92       	push	r15
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	d8 2e       	mov	r13, r24
     ec0:	b6 2e       	mov	r11, r22
     ec2:	ea 01       	movw	r28, r20
     ec4:	c2 2e       	mov	r12, r18
    bool startedSuccessfully = false;

    if (I2CAsync_isIdle()) {
     ec6:	ea df       	rcall	.-44     	; 0xe9c <I2CAsync_isIdle>
     ec8:	88 23       	and	r24, r24
     eca:	01 f1       	breq	.+64     	; 0xf0c <I2CAsync_transferData+0x60>
        i2cAddress = address;
     ecc:	d0 92 5a 02 	sts	0x025A, r13
        i2cWriteDataLength = writeDataLength;
     ed0:	b0 92 5b 02 	sts	0x025B, r11
        i2cWriteData = writeData;
     ed4:	d0 93 5d 02 	sts	0x025D, r29
     ed8:	c0 93 5c 02 	sts	0x025C, r28
        i2cReadDataLength = readDataLength;
     edc:	c0 92 5e 02 	sts	0x025E, r12
        i2cReadData = readData;
     ee0:	10 93 60 02 	sts	0x0260, r17
     ee4:	00 93 5f 02 	sts	0x025F, r16
        i2cCompletionHandler = completionHandler;
     ee8:	f0 92 63 02 	sts	0x0263, r15
     eec:	e0 92 62 02 	sts	0x0262, r14
        sendStart();
     ef0:	a1 df       	rcall	.-190    	; 0xe34 <sendStart>
        i2cState = (writeDataLength > 0) 
     ef2:	bb 20       	and	r11, r11
     ef4:	11 f4       	brne	.+4      	; 0xefa <I2CAsync_transferData+0x4e>
     ef6:	84 e0       	ldi	r24, 0x04	; 4
     ef8:	01 c0       	rjmp	.+2      	; 0xefc <I2CAsync_transferData+0x50>
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	80 93 59 02 	sts	0x0259, r24
            ? is_waitingForWriteStartTransmission
            : is_waitingForReadStartTransmission;
        SystemTime_futureTime(TIMEOUT_INTERVAL, &timeoutTime);
     f00:	80 ee       	ldi	r24, 0xE0	; 224
     f02:	91 e0       	ldi	r25, 0x01	; 1
     f04:	64 e6       	ldi	r22, 0x64	; 100
     f06:	72 e0       	ldi	r23, 0x02	; 2
     f08:	1d dc       	rcall	.-1990   	; 0x744 <SystemTime_futureTime>
     f0a:	81 e0       	ldi	r24, 0x01	; 1

        startedSuccessfully = true;
    }

    return startedSuccessfully;
}
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	ff 90       	pop	r15
     f16:	ef 90       	pop	r14
     f18:	df 90       	pop	r13
     f1a:	cf 90       	pop	r12
     f1c:	bf 90       	pop	r11
     f1e:	08 95       	ret

00000f20 <checkTimeout>:
    i2cCompletionHandler(false, status, 0, NULL);
}

static void checkTimeout (void)
{
    if (SystemTime_timeHasArrived(&timeoutTime)) {
     f20:	84 e6       	ldi	r24, 0x64	; 100
     f22:	92 e0       	ldi	r25, 0x02	; 2
     f24:	3e dc       	rcall	.-1924   	; 0x7a2 <SystemTime_timeHasArrived>
     f26:	88 23       	and	r24, r24
     f28:	91 f0       	breq	.+36     	; 0xf4e <checkTimeout+0x2e>
        sendStop();
     f2a:	88 df       	rcall	.-240    	; 0xe3c <sendStop>
        TWCR &= ~(1<<TWEN);
     f2c:	80 91 bc 00 	lds	r24, 0x00BC
     f30:	8b 7f       	andi	r24, 0xFB	; 251
     f32:	80 93 bc 00 	sts	0x00BC, r24
        i2cState = is_idle;
     f36:	10 92 59 02 	sts	0x0259, r1
        i2cCompletionHandler(false, isc_timeout, 0, NULL);
     f3a:	e0 91 62 02 	lds	r30, 0x0262
     f3e:	f0 91 63 02 	lds	r31, 0x0263
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	6f e7       	ldi	r22, 0x7F	; 127
     f46:	40 e0       	ldi	r20, 0x00	; 0
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	09 95       	icall
     f4e:	08 95       	ret

00000f50 <I2CAsync_task>:

    i2cState = is_idle;
}

void I2CAsync_task (void)
{
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
    switch (i2cState) {
     f58:	80 91 59 02 	lds	r24, 0x0259
     f5c:	83 30       	cpi	r24, 0x03	; 3
     f5e:	09 f4       	brne	.+2      	; 0xf62 <I2CAsync_task+0x12>
     f60:	44 c0       	rjmp	.+136    	; 0xfea <I2CAsync_task+0x9a>
     f62:	84 30       	cpi	r24, 0x04	; 4
     f64:	30 f4       	brcc	.+12     	; 0xf72 <I2CAsync_task+0x22>
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	71 f0       	breq	.+28     	; 0xf86 <I2CAsync_task+0x36>
     f6a:	82 30       	cpi	r24, 0x02	; 2
     f6c:	09 f0       	breq	.+2      	; 0xf70 <I2CAsync_task+0x20>
     f6e:	cd c0       	rjmp	.+410    	; 0x110a <I2CAsync_task+0x1ba>
     f70:	1e c0       	rjmp	.+60     	; 0xfae <I2CAsync_task+0x5e>
     f72:	85 30       	cpi	r24, 0x05	; 5
     f74:	09 f4       	brne	.+2      	; 0xf78 <I2CAsync_task+0x28>
     f76:	7f c0       	rjmp	.+254    	; 0x1076 <I2CAsync_task+0x126>
     f78:	85 30       	cpi	r24, 0x05	; 5
     f7a:	08 f4       	brcc	.+2      	; 0xf7e <I2CAsync_task+0x2e>
     f7c:	69 c0       	rjmp	.+210    	; 0x1050 <I2CAsync_task+0x100>
     f7e:	86 30       	cpi	r24, 0x06	; 6
     f80:	09 f0       	breq	.+2      	; 0xf84 <I2CAsync_task+0x34>
     f82:	c3 c0       	rjmp	.+390    	; 0x110a <I2CAsync_task+0x1ba>
     f84:	87 c0       	rjmp	.+270    	; 0x1094 <I2CAsync_task+0x144>
        case is_idle :
            break;
        case is_waitingForWriteStartTransmission :
            if (TWCR & (1<<TWINT)) {
     f86:	80 91 bc 00 	lds	r24, 0x00BC
     f8a:	87 ff       	sbrs	r24, 7
     f8c:	bd c0       	rjmp	.+378    	; 0x1108 <I2CAsync_task+0x1b8>
                const I2CStatusCode status = i2cStatus();
     f8e:	5a df       	rcall	.-332    	; 0xe44 <i2cStatus>
                if (status == isc_startTransmitted) {
     f90:	88 30       	cpi	r24, 0x08	; 8
     f92:	09 f0       	breq	.+2      	; 0xf96 <I2CAsync_task+0x46>
     f94:	5b c0       	rjmp	.+182    	; 0x104c <I2CAsync_task+0xfc>
                    // start has been transmitted
                    // send SLA+W
                    TWDR = (i2cAddress << 1) & 0xFE; 
     f96:	80 91 5a 02 	lds	r24, 0x025A
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	80 93 bb 00 	sts	0x00BB, r24
                    TWCR = (1<<TWINT) | (1<<TWEN);
     fa4:	84 e8       	ldi	r24, 0x84	; 132
     fa6:	80 93 bc 00 	sts	0x00BC, r24
                    i2cState = is_waitingForSLAWTransmission;
     faa:	82 e0       	ldi	r24, 0x02	; 2
     fac:	16 c0       	rjmp	.+44     	; 0xfda <I2CAsync_task+0x8a>
            } else {
                checkTimeout();
            }
            break;
        case is_waitingForSLAWTransmission :
            if (TWCR & (1<<TWINT)) {
     fae:	80 91 bc 00 	lds	r24, 0x00BC
     fb2:	87 ff       	sbrs	r24, 7
     fb4:	a9 c0       	rjmp	.+338    	; 0x1108 <I2CAsync_task+0x1b8>
                const I2CStatusCode status = i2cStatus();
     fb6:	46 df       	rcall	.-372    	; 0xe44 <i2cStatus>
                if (status == isc_SLAWACK) {
     fb8:	88 31       	cpi	r24, 0x18	; 24
     fba:	09 f0       	breq	.+2      	; 0xfbe <I2CAsync_task+0x6e>
     fbc:	47 c0       	rjmp	.+142    	; 0x104c <I2CAsync_task+0xfc>
                    // write first data byte
                    TWDR = i2cWriteData[0];
     fbe:	e0 91 5c 02 	lds	r30, 0x025C
     fc2:	f0 91 5d 02 	lds	r31, 0x025D
     fc6:	80 81       	ld	r24, Z
     fc8:	80 93 bb 00 	sts	0x00BB, r24
                    TWCR = (1<<TWINT) | (1<<TWEN);
     fcc:	84 e8       	ldi	r24, 0x84	; 132
     fce:	80 93 bc 00 	sts	0x00BC, r24
                    i2cDataCount = 1;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	80 93 61 02 	sts	0x0261, r24
                    i2cState = is_waitingForDataByteWrite;
     fd8:	83 e0       	ldi	r24, 0x03	; 3
     fda:	80 93 59 02 	sts	0x0259, r24
                    SystemTime_futureTime(TIMEOUT_INTERVAL, &timeoutTime);
     fde:	80 ee       	ldi	r24, 0xE0	; 224
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	64 e6       	ldi	r22, 0x64	; 100
     fe4:	72 e0       	ldi	r23, 0x02	; 2
     fe6:	ae db       	rcall	.-2212   	; 0x744 <SystemTime_futureTime>
     fe8:	90 c0       	rjmp	.+288    	; 0x110a <I2CAsync_task+0x1ba>
            } else {
                checkTimeout();
            }
            break;
        case is_waitingForDataByteWrite :
            if (TWCR & (1<<TWINT)) {
     fea:	80 91 bc 00 	lds	r24, 0x00BC
     fee:	87 ff       	sbrs	r24, 7
     ff0:	8b c0       	rjmp	.+278    	; 0x1108 <I2CAsync_task+0x1b8>
                const I2CStatusCode status = i2cStatus();
     ff2:	28 df       	rcall	.-432    	; 0xe44 <i2cStatus>
                if (status == isc_dataTransmittedAck) {
     ff4:	88 32       	cpi	r24, 0x28	; 40
     ff6:	51 f5       	brne	.+84     	; 0x104c <I2CAsync_task+0xfc>
                    if (i2cDataCount < i2cWriteDataLength) {
     ff8:	90 91 61 02 	lds	r25, 0x0261
     ffc:	80 91 5b 02 	lds	r24, 0x025B
    1000:	98 17       	cp	r25, r24
    1002:	68 f4       	brcc	.+26     	; 0x101e <I2CAsync_task+0xce>
                        TWDR = i2cWriteData[i2cDataCount++];
    1004:	e0 91 5c 02 	lds	r30, 0x025C
    1008:	f0 91 5d 02 	lds	r31, 0x025D
    100c:	e9 0f       	add	r30, r25
    100e:	f1 1d       	adc	r31, r1
    1010:	80 81       	ld	r24, Z
    1012:	80 93 bb 00 	sts	0x00BB, r24
    1016:	9f 5f       	subi	r25, 0xFF	; 255
    1018:	90 93 61 02 	sts	0x0261, r25
    101c:	60 c0       	rjmp	.+192    	; 0x10de <I2CAsync_task+0x18e>
                        TWCR = (1<<TWINT) | (1<<TWEN);
                    } else {
                        // all bytes written
                        sendStop();
    101e:	0e df       	rcall	.-484    	; 0xe3c <sendStop>
                        if (i2cReadDataLength > 0) {
    1020:	80 91 5e 02 	lds	r24, 0x025E
    1024:	88 23       	and	r24, r24
    1026:	19 f0       	breq	.+6      	; 0x102e <I2CAsync_task+0xde>
                            // we are reading data after this write
                            sendStart();
    1028:	05 df       	rcall	.-502    	; 0xe34 <sendStart>
                            i2cState = is_waitingForReadStartTransmission;
    102a:	84 e0       	ldi	r24, 0x04	; 4
    102c:	d6 cf       	rjmp	.-84     	; 0xfda <I2CAsync_task+0x8a>
                        } else {
                            i2cState = is_idle;
    102e:	10 92 59 02 	sts	0x0259, r1
                            i2cCompletionHandler(true, status, 0, i2cReadData);
    1032:	20 91 5f 02 	lds	r18, 0x025F
    1036:	30 91 60 02 	lds	r19, 0x0260
    103a:	e0 91 62 02 	lds	r30, 0x0262
    103e:	f0 91 63 02 	lds	r31, 0x0263
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	68 e2       	ldi	r22, 0x28	; 40
    1046:	40 e0       	ldi	r20, 0x00	; 0
    1048:	09 95       	icall
    104a:	c9 cf       	rjmp	.-110    	; 0xfde <I2CAsync_task+0x8e>
                        }
                    }
                    SystemTime_futureTime(TIMEOUT_INTERVAL, &timeoutTime);
                } else {
                    // unexpected status
                    terminateWrite(status);
    104c:	10 df       	rcall	.-480    	; 0xe6e <terminateWrite>
    104e:	5d c0       	rjmp	.+186    	; 0x110a <I2CAsync_task+0x1ba>
            } else {
                checkTimeout();
            }
            break;
        case is_waitingForReadStartTransmission :
            if (TWCR & (1<<TWINT)) {
    1050:	80 91 bc 00 	lds	r24, 0x00BC
    1054:	87 ff       	sbrs	r24, 7
    1056:	58 c0       	rjmp	.+176    	; 0x1108 <I2CAsync_task+0x1b8>
                const I2CStatusCode status = i2cStatus();
    1058:	f5 de       	rcall	.-534    	; 0xe44 <i2cStatus>
                if (status == isc_startTransmitted) {
    105a:	88 30       	cpi	r24, 0x08	; 8
    105c:	09 f0       	breq	.+2      	; 0x1060 <I2CAsync_task+0x110>
    105e:	52 c0       	rjmp	.+164    	; 0x1104 <I2CAsync_task+0x1b4>
                    // start has been transmitted
                    // send SLA+R
                    TWDR = ((i2cAddress << 1) & 0xFE) | 0x01; 
    1060:	80 91 5a 02 	lds	r24, 0x025A
    1064:	88 0f       	add	r24, r24
    1066:	81 60       	ori	r24, 0x01	; 1
    1068:	80 93 bb 00 	sts	0x00BB, r24
                    TWCR = (1<<TWINT) | (1<<TWEN);
    106c:	84 e8       	ldi	r24, 0x84	; 132
    106e:	80 93 bc 00 	sts	0x00BC, r24
                    i2cState = is_waitingForSLARTransmission;
    1072:	85 e0       	ldi	r24, 0x05	; 5
    1074:	b2 cf       	rjmp	.-156    	; 0xfda <I2CAsync_task+0x8a>
            } else {
                checkTimeout();
            }
            break;
        case is_waitingForSLARTransmission :
            if (TWCR & (1<<TWINT)) {
    1076:	80 91 bc 00 	lds	r24, 0x00BC
    107a:	87 ff       	sbrs	r24, 7
    107c:	45 c0       	rjmp	.+138    	; 0x1108 <I2CAsync_task+0x1b8>
                const I2CStatusCode status = i2cStatus();
    107e:	e2 de       	rcall	.-572    	; 0xe44 <i2cStatus>
                if (status == isc_SLARACK) {
    1080:	80 34       	cpi	r24, 0x40	; 64
    1082:	09 f0       	breq	.+2      	; 0x1086 <I2CAsync_task+0x136>
    1084:	3f c0       	rjmp	.+126    	; 0x1104 <I2CAsync_task+0x1b4>
                    // request first data byte
                    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1086:	84 ec       	ldi	r24, 0xC4	; 196
    1088:	80 93 bc 00 	sts	0x00BC, r24
                    i2cDataCount = 0;
    108c:	10 92 61 02 	sts	0x0261, r1
                    i2cState = is_waitingForDataByteRead;
    1090:	86 e0       	ldi	r24, 0x06	; 6
    1092:	a3 cf       	rjmp	.-186    	; 0xfda <I2CAsync_task+0x8a>
            } else {
                checkTimeout();
            }
            break;
        case is_waitingForDataByteRead :
            if (TWCR & (1<<TWINT)) {
    1094:	80 91 bc 00 	lds	r24, 0x00BC
    1098:	87 ff       	sbrs	r24, 7
    109a:	36 c0       	rjmp	.+108    	; 0x1108 <I2CAsync_task+0x1b8>
                const I2CStatusCode status = i2cStatus();
    109c:	d3 de       	rcall	.-602    	; 0xe44 <i2cStatus>
    109e:	08 2f       	mov	r16, r24
                if ((status == isc_dataReceivedAck) ||
    10a0:	80 35       	cpi	r24, 0x50	; 80
    10a2:	11 f0       	breq	.+4      	; 0x10a8 <I2CAsync_task+0x158>
    10a4:	88 35       	cpi	r24, 0x58	; 88
    10a6:	71 f5       	brne	.+92     	; 0x1104 <I2CAsync_task+0x1b4>
                    (status == isc_dataReceicedNack)) {
                    i2cReadData[i2cDataCount++] = TWDR;
    10a8:	c0 91 5f 02 	lds	r28, 0x025F
    10ac:	d0 91 60 02 	lds	r29, 0x0260
    10b0:	90 91 61 02 	lds	r25, 0x0261
    10b4:	80 91 bb 00 	lds	r24, 0x00BB
    10b8:	fe 01       	movw	r30, r28
    10ba:	e9 0f       	add	r30, r25
    10bc:	f1 1d       	adc	r31, r1
    10be:	80 83       	st	Z, r24
    10c0:	19 2f       	mov	r17, r25
    10c2:	1f 5f       	subi	r17, 0xFF	; 255
    10c4:	10 93 61 02 	sts	0x0261, r17
                    if (i2cDataCount < i2cReadDataLength) {
    10c8:	80 91 5e 02 	lds	r24, 0x025E
    10cc:	18 17       	cp	r17, r24
    10ce:	68 f4       	brcc	.+26     	; 0x10ea <I2CAsync_task+0x19a>
                        // request next or last data byte
                        TWCR = (1<<TWINT) | (1<<TWEN) | 
    10d0:	21 2f       	mov	r18, r17
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	28 17       	cp	r18, r24
    10da:	39 07       	cpc	r19, r25
    10dc:	14 f0       	brlt	.+4      	; 0x10e2 <I2CAsync_task+0x192>
    10de:	84 e8       	ldi	r24, 0x84	; 132
    10e0:	01 c0       	rjmp	.+2      	; 0x10e4 <I2CAsync_task+0x194>
    10e2:	84 ec       	ldi	r24, 0xC4	; 196
    10e4:	80 93 bc 00 	sts	0x00BC, r24
    10e8:	7a cf       	rjmp	.-268    	; 0xfde <I2CAsync_task+0x8e>
                            ? (1<<TWEA) // next byte
                            : 0);       // last byte
                        SystemTime_futureTime(TIMEOUT_INTERVAL, &timeoutTime);
                    } else {
                        // all bytes read
                        sendStop();
    10ea:	a8 de       	rcall	.-688    	; 0xe3c <sendStop>
                        i2cState = is_idle;
    10ec:	10 92 59 02 	sts	0x0259, r1
                        i2cCompletionHandler(true, status, i2cDataCount, i2cReadData);
    10f0:	e0 91 62 02 	lds	r30, 0x0262
    10f4:	f0 91 63 02 	lds	r31, 0x0263
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	60 2f       	mov	r22, r16
    10fc:	41 2f       	mov	r20, r17
    10fe:	9e 01       	movw	r18, r28
    1100:	09 95       	icall
    1102:	03 c0       	rjmp	.+6      	; 0x110a <I2CAsync_task+0x1ba>
                    }
                } else {
                    // unexpected status
                    terminateRead(status);
    1104:	a3 de       	rcall	.-698    	; 0xe4c <terminateRead>
    1106:	01 c0       	rjmp	.+2      	; 0x110a <I2CAsync_task+0x1ba>
                }
            } else {
                checkTimeout();
    1108:	0b df       	rcall	.-490    	; 0xf20 <checkTimeout>
            }
            break;
    }
}
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	08 95       	ret

00001114 <ByteQueue_clear>:

#include "ByteQueue.h"

void ByteQueue_clear (
    ByteQueue *q)
    {
    1114:	fc 01       	movw	r30, r24
    char SREGSave;
    SREGSave = SREG;
    1116:	8f b7       	in	r24, 0x3f	; 63
    cli();
    1118:	f8 94       	cli

    q->head = 0;
    111a:	11 82       	std	Z+1, r1	; 0x01
    111c:	10 82       	st	Z, r1
    q->tail = 0;
    111e:	13 82       	std	Z+3, r1	; 0x03
    1120:	12 82       	std	Z+2, r1	; 0x02
    q->length = 0;
    1122:	15 82       	std	Z+5, r1	; 0x05
    1124:	14 82       	std	Z+4, r1	; 0x04

    SREG = SREGSave;
    1126:	8f bf       	out	0x3f, r24	; 63
    }
    1128:	08 95       	ret

0000112a <ByteQueue_push>:

bool ByteQueue_push (
    const ByteQueueElement byte,
    ByteQueue *q)
    {
    112a:	48 2f       	mov	r20, r24
    112c:	db 01       	movw	r26, r22
    bool push_successful = false;

    char SREGSave;
    SREGSave = SREG;
    112e:	5f b7       	in	r21, 0x3f	; 63
    cli();
    1130:	f8 94       	cli

    if (q->length < q->capacity)
    1132:	14 96       	adiw	r26, 0x04	; 4
    1134:	2d 91       	ld	r18, X+
    1136:	3c 91       	ld	r19, X
    1138:	15 97       	sbiw	r26, 0x05	; 5
    113a:	16 96       	adiw	r26, 0x06	; 6
    113c:	8d 91       	ld	r24, X+
    113e:	9c 91       	ld	r25, X
    1140:	17 97       	sbiw	r26, 0x07	; 7
    1142:	28 17       	cp	r18, r24
    1144:	39 07       	cpc	r19, r25
    1146:	10 f0       	brcs	.+4      	; 0x114c <ByteQueue_push+0x22>
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	2c c0       	rjmp	.+88     	; 0x11a4 <ByteQueue_push+0x7a>
        {  // the queue is not full
        // put the byte in the queue
        q->bytes[q->tail] = byte;
    114c:	18 96       	adiw	r26, 0x08	; 8
    114e:	ed 91       	ld	r30, X+
    1150:	fc 91       	ld	r31, X
    1152:	19 97       	sbiw	r26, 0x09	; 9
    1154:	12 96       	adiw	r26, 0x02	; 2
    1156:	8d 91       	ld	r24, X+
    1158:	9c 91       	ld	r25, X
    115a:	13 97       	sbiw	r26, 0x03	; 3
    115c:	e8 0f       	add	r30, r24
    115e:	f9 1f       	adc	r31, r25
    1160:	40 83       	st	Z, r20

        // advance the tail pointer
        if (q->tail < (q->capacity - 1))
    1162:	12 96       	adiw	r26, 0x02	; 2
    1164:	2d 91       	ld	r18, X+
    1166:	3c 91       	ld	r19, X
    1168:	13 97       	sbiw	r26, 0x03	; 3
    116a:	16 96       	adiw	r26, 0x06	; 6
    116c:	8d 91       	ld	r24, X+
    116e:	9c 91       	ld	r25, X
    1170:	17 97       	sbiw	r26, 0x07	; 7
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	28 17       	cp	r18, r24
    1176:	39 07       	cpc	r19, r25
    1178:	38 f4       	brcc	.+14     	; 0x1188 <ByteQueue_push+0x5e>
            ++q->tail;
    117a:	2f 5f       	subi	r18, 0xFF	; 255
    117c:	3f 4f       	sbci	r19, 0xFF	; 255
    117e:	13 96       	adiw	r26, 0x03	; 3
    1180:	3c 93       	st	X, r19
    1182:	2e 93       	st	-X, r18
    1184:	12 97       	sbiw	r26, 0x02	; 2
    1186:	04 c0       	rjmp	.+8      	; 0x1190 <ByteQueue_push+0x66>
        else  // wrap around
            q->tail = 0;
    1188:	13 96       	adiw	r26, 0x03	; 3
    118a:	1c 92       	st	X, r1
    118c:	1e 92       	st	-X, r1
    118e:	12 97       	sbiw	r26, 0x02	; 2

        // increment length
        ++q->length;
    1190:	14 96       	adiw	r26, 0x04	; 4
    1192:	8d 91       	ld	r24, X+
    1194:	9c 91       	ld	r25, X
    1196:	15 97       	sbiw	r26, 0x05	; 5
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	15 96       	adiw	r26, 0x05	; 5
    119c:	9c 93       	st	X, r25
    119e:	8e 93       	st	-X, r24
    11a0:	14 97       	sbiw	r26, 0x04	; 4
    11a2:	81 e0       	ldi	r24, 0x01	; 1

        push_successful = true;
        }

    SREG = SREGSave;
    11a4:	5f bf       	out	0x3f, r21	; 63

    return push_successful;
    }
    11a6:	08 95       	ret

000011a8 <ByteQueue_pop>:

ByteQueueElement ByteQueue_pop (
    ByteQueue *q)
{
    11a8:	dc 01       	movw	r26, r24
    ByteQueueElement byte = 0;

    char SREGSave;
    SREGSave = SREG;
    11aa:	4f b7       	in	r20, 0x3f	; 63
    cli();
    11ac:	f8 94       	cli

    if (q->length > 0) {  // the queue is not empty
    11ae:	14 96       	adiw	r26, 0x04	; 4
    11b0:	8d 91       	ld	r24, X+
    11b2:	9c 91       	ld	r25, X
    11b4:	15 97       	sbiw	r26, 0x05	; 5
    11b6:	89 2b       	or	r24, r25
    11b8:	11 f4       	brne	.+4      	; 0x11be <ByteQueue_pop+0x16>
    11ba:	e0 e0       	ldi	r30, 0x00	; 0
    11bc:	24 c0       	rjmp	.+72     	; 0x1206 <ByteQueue_pop+0x5e>
        // get the byte from the queue
        byte = q->bytes[q->head];
    11be:	2d 91       	ld	r18, X+
    11c0:	3c 91       	ld	r19, X
    11c2:	11 97       	sbiw	r26, 0x01	; 1
    11c4:	18 96       	adiw	r26, 0x08	; 8
    11c6:	ed 91       	ld	r30, X+
    11c8:	fc 91       	ld	r31, X
    11ca:	19 97       	sbiw	r26, 0x09	; 9
    11cc:	e2 0f       	add	r30, r18
    11ce:	f3 1f       	adc	r31, r19
    11d0:	e0 81       	ld	r30, Z

        // advance the head pointer
        if (q->head < (q->capacity - 1))
    11d2:	16 96       	adiw	r26, 0x06	; 6
    11d4:	8d 91       	ld	r24, X+
    11d6:	9c 91       	ld	r25, X
    11d8:	17 97       	sbiw	r26, 0x07	; 7
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	28 17       	cp	r18, r24
    11de:	39 07       	cpc	r19, r25
    11e0:	30 f4       	brcc	.+12     	; 0x11ee <ByteQueue_pop+0x46>
            ++q->head;
    11e2:	2f 5f       	subi	r18, 0xFF	; 255
    11e4:	3f 4f       	sbci	r19, 0xFF	; 255
    11e6:	11 96       	adiw	r26, 0x01	; 1
    11e8:	3c 93       	st	X, r19
    11ea:	2e 93       	st	-X, r18
    11ec:	03 c0       	rjmp	.+6      	; 0x11f4 <ByteQueue_pop+0x4c>
        else  // wrap around
            q->head = 0;
    11ee:	11 96       	adiw	r26, 0x01	; 1
    11f0:	1c 92       	st	X, r1
    11f2:	1e 92       	st	-X, r1

        // decrement length
        --q->length;
    11f4:	14 96       	adiw	r26, 0x04	; 4
    11f6:	8d 91       	ld	r24, X+
    11f8:	9c 91       	ld	r25, X
    11fa:	15 97       	sbiw	r26, 0x05	; 5
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	15 96       	adiw	r26, 0x05	; 5
    1200:	9c 93       	st	X, r25
    1202:	8e 93       	st	-X, r24
    1204:	14 97       	sbiw	r26, 0x04	; 4
    }

    SREG = SREGSave;
    1206:	4f bf       	out	0x3f, r20	; 63

    return byte;
}
    1208:	8e 2f       	mov	r24, r30
    120a:	08 95       	ret

0000120c <StringUtils_appendDecimal32>:
void StringUtils_appendDecimal32 (
    const int32_t value,
    const uint8_t minIntegerDigits,
    const uint8_t numFractionalDigits,
    CharString_t* destStr)
{
    120c:	2f 92       	push	r2
    120e:	3f 92       	push	r3
    1210:	4f 92       	push	r4
    1212:	5f 92       	push	r5
    1214:	6f 92       	push	r6
    1216:	7f 92       	push	r7
    1218:	8f 92       	push	r8
    121a:	9f 92       	push	r9
    121c:	af 92       	push	r10
    121e:	bf 92       	push	r11
    1220:	cf 92       	push	r12
    1222:	df 92       	push	r13
    1224:	ef 92       	push	r14
    1226:	ff 92       	push	r15
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	61 97       	sbiw	r28, 0x11	; 17
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	3b 01       	movw	r6, r22
    1242:	4c 01       	movw	r8, r24
    1244:	49 8b       	std	Y+17, r20	; 0x11
    1246:	18 01       	movw	r2, r16
    char strBuffer[16];
    char* cp = &strBuffer[15];
    *cp-- = 0;  // null terminate
    1248:	18 8a       	std	Y+16, r1	; 0x10

    uint32_t workingValue = (value < 0) ? -value : value;
    124a:	7b 01       	movw	r14, r22
    124c:	8c 01       	movw	r16, r24
    124e:	97 ff       	sbrs	r25, 7
    1250:	07 c0       	rjmp	.+14     	; 0x1260 <StringUtils_appendDecimal32+0x54>
    1252:	ee 24       	eor	r14, r14
    1254:	ff 24       	eor	r15, r15
    1256:	87 01       	movw	r16, r14
    1258:	e6 1a       	sub	r14, r22
    125a:	f7 0a       	sbc	r15, r23
    125c:	08 0b       	sbc	r16, r24
    125e:	19 0b       	sbc	r17, r25
    1260:	ce 01       	movw	r24, r28
    1262:	0f 96       	adiw	r24, 0x0f	; 15

    // working backwards, start with fractional digits
    if (numFractionalDigits > 0) {
    1264:	22 23       	and	r18, r18
    1266:	11 f4       	brne	.+4      	; 0x126c <StringUtils_appendDecimal32+0x60>
    1268:	6c 01       	movw	r12, r24
    126a:	26 c0       	rjmp	.+76     	; 0x12b8 <StringUtils_appendDecimal32+0xac>
    126c:	6c 01       	movw	r12, r24
        for (int f = 0; f < numFractionalDigits; ++f) {
    126e:	2c 01       	movw	r4, r24
    1270:	42 1a       	sub	r4, r18
    1272:	51 08       	sbc	r5, r1
    1274:	16 c0       	rjmp	.+44     	; 0x12a2 <StringUtils_appendDecimal32+0x96>
            *cp-- = (workingValue % 10) + '0';
    1276:	c8 01       	movw	r24, r16
    1278:	b7 01       	movw	r22, r14
    127a:	2a e0       	ldi	r18, 0x0A	; 10
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e0       	ldi	r20, 0x00	; 0
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	64 d7       	rcall	.+3784   	; 0x214c <__udivmodsi4>
    1284:	60 5d       	subi	r22, 0xD0	; 208
    1286:	f6 01       	movw	r30, r12
    1288:	60 83       	st	Z, r22
    128a:	65 01       	movw	r12, r10
            workingValue /= 10;
    128c:	c8 01       	movw	r24, r16
    128e:	b7 01       	movw	r22, r14
    1290:	2a e0       	ldi	r18, 0x0A	; 10
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e0       	ldi	r20, 0x00	; 0
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	59 d7       	rcall	.+3762   	; 0x214c <__udivmodsi4>
    129a:	c9 01       	movw	r24, r18
    129c:	da 01       	movw	r26, r20
    129e:	7c 01       	movw	r14, r24
    12a0:	8d 01       	movw	r16, r26
    12a2:	56 01       	movw	r10, r12
    12a4:	08 94       	sec
    12a6:	a1 08       	sbc	r10, r1
    12a8:	b1 08       	sbc	r11, r1

    uint32_t workingValue = (value < 0) ? -value : value;

    // working backwards, start with fractional digits
    if (numFractionalDigits > 0) {
        for (int f = 0; f < numFractionalDigits; ++f) {
    12aa:	c4 14       	cp	r12, r4
    12ac:	d5 04       	cpc	r13, r5
    12ae:	19 f7       	brne	.-58     	; 0x1276 <StringUtils_appendDecimal32+0x6a>
            *cp-- = (workingValue % 10) + '0';
            workingValue /= 10;
        }
        *cp-- = '.';
    12b0:	8e e2       	ldi	r24, 0x2E	; 46
    12b2:	f6 01       	movw	r30, r12
    12b4:	80 83       	st	Z, r24
    12b6:	65 01       	movw	r12, r10
    12b8:	aa 24       	eor	r10, r10
    12ba:	bb 24       	eor	r11, r11
    }

    // continue with integer digits
    for (int i = 0; (i < minIntegerDigits) || (workingValue != 0); ++i) {
    12bc:	f9 89       	ldd	r31, Y+17	; 0x11
    12be:	4f 2e       	mov	r4, r31
    12c0:	55 24       	eor	r5, r5
    12c2:	1b c0       	rjmp	.+54     	; 0x12fa <StringUtils_appendDecimal32+0xee>
        *cp-- = (workingValue % 10) + '0';
    12c4:	c8 01       	movw	r24, r16
    12c6:	b7 01       	movw	r22, r14
    12c8:	2a e0       	ldi	r18, 0x0A	; 10
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	3d d7       	rcall	.+3706   	; 0x214c <__udivmodsi4>
    12d2:	60 5d       	subi	r22, 0xD0	; 208
    12d4:	f6 01       	movw	r30, r12
    12d6:	60 83       	st	Z, r22
    12d8:	08 94       	sec
    12da:	c1 08       	sbc	r12, r1
    12dc:	d1 08       	sbc	r13, r1
        workingValue /= 10;
    12de:	c8 01       	movw	r24, r16
    12e0:	b7 01       	movw	r22, r14
    12e2:	2a e0       	ldi	r18, 0x0A	; 10
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	40 e0       	ldi	r20, 0x00	; 0
    12e8:	50 e0       	ldi	r21, 0x00	; 0
    12ea:	30 d7       	rcall	.+3680   	; 0x214c <__udivmodsi4>
    12ec:	c9 01       	movw	r24, r18
    12ee:	da 01       	movw	r26, r20
    12f0:	7c 01       	movw	r14, r24
    12f2:	8d 01       	movw	r16, r26
        }
        *cp-- = '.';
    }

    // continue with integer digits
    for (int i = 0; (i < minIntegerDigits) || (workingValue != 0); ++i) {
    12f4:	08 94       	sec
    12f6:	a1 1c       	adc	r10, r1
    12f8:	b1 1c       	adc	r11, r1
    12fa:	a4 14       	cp	r10, r4
    12fc:	b5 04       	cpc	r11, r5
    12fe:	14 f3       	brlt	.-60     	; 0x12c4 <StringUtils_appendDecimal32+0xb8>
    1300:	e1 14       	cp	r14, r1
    1302:	f1 04       	cpc	r15, r1
    1304:	01 05       	cpc	r16, r1
    1306:	11 05       	cpc	r17, r1
    1308:	e9 f6       	brne	.-70     	; 0x12c4 <StringUtils_appendDecimal32+0xb8>
        *cp-- = (workingValue % 10) + '0';
        workingValue /= 10;
    }

    // insert sign for negative value
    if (value < 0) {
    130a:	97 fe       	sbrs	r9, 7
    130c:	06 c0       	rjmp	.+12     	; 0x131a <StringUtils_appendDecimal32+0x10e>
        *cp-- = '-';
    130e:	8d e2       	ldi	r24, 0x2D	; 45
    1310:	f6 01       	movw	r30, r12
    1312:	80 83       	st	Z, r24
    1314:	08 94       	sec
    1316:	c1 08       	sbc	r12, r1
    1318:	d1 08       	sbc	r13, r1
    }
    CharString_append(cp+1, destStr);
    131a:	c6 01       	movw	r24, r12
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	b1 01       	movw	r22, r2
    1320:	d3 d0       	rcall	.+422    	; 0x14c8 <CharString_append>
}
    1322:	61 96       	adiw	r28, 0x11	; 17
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	ff 90       	pop	r15
    1338:	ef 90       	pop	r14
    133a:	df 90       	pop	r13
    133c:	cf 90       	pop	r12
    133e:	bf 90       	pop	r11
    1340:	af 90       	pop	r10
    1342:	9f 90       	pop	r9
    1344:	8f 90       	pop	r8
    1346:	7f 90       	pop	r7
    1348:	6f 90       	pop	r6
    134a:	5f 90       	pop	r5
    134c:	4f 90       	pop	r4
    134e:	3f 90       	pop	r3
    1350:	2f 90       	pop	r2
    1352:	08 95       	ret

00001354 <StringUtils_appendDecimal>:
void StringUtils_appendDecimal (
    const int16_t value,
    const uint8_t minIntegerDigits,
    const uint8_t numFractionalDigits,
    CharString_t* destStr)
{
    1354:	9f 92       	push	r9
    1356:	af 92       	push	r10
    1358:	bf 92       	push	r11
    135a:	cf 92       	push	r12
    135c:	df 92       	push	r13
    135e:	ef 92       	push	r14
    1360:	ff 92       	push	r15
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	60 97       	sbiw	r28, 0x10	; 16
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	7c 01       	movw	r14, r24
    137c:	96 2e       	mov	r9, r22
    137e:	59 01       	movw	r10, r18
    char strBuffer[16];
    char* cp = &strBuffer[15];
    *cp-- = 0;  // null terminate
    1380:	18 8a       	std	Y+16, r1	; 0x10

    uint16_t workingValue = (value < 0) ? -value : value;
    1382:	9c 01       	movw	r18, r24
    1384:	97 ff       	sbrs	r25, 7
    1386:	04 c0       	rjmp	.+8      	; 0x1390 <StringUtils_appendDecimal+0x3c>
    1388:	22 27       	eor	r18, r18
    138a:	33 27       	eor	r19, r19
    138c:	28 1b       	sub	r18, r24
    138e:	39 0b       	sbc	r19, r25
    1390:	ce 01       	movw	r24, r28
    1392:	0f 96       	adiw	r24, 0x0f	; 15

    // working backwards, start with fractional digits
    if (numFractionalDigits > 0) {
    1394:	44 23       	and	r20, r20
    1396:	11 f4       	brne	.+4      	; 0x139c <StringUtils_appendDecimal+0x48>
    1398:	fc 01       	movw	r30, r24
    139a:	1a c0       	rjmp	.+52     	; 0x13d0 <StringUtils_appendDecimal+0x7c>
    139c:	fc 01       	movw	r30, r24
        for (int f = 0; f < numFractionalDigits; ++f) {
    139e:	6c 01       	movw	r12, r24
    13a0:	c4 1a       	sub	r12, r20
    13a2:	d1 08       	sbc	r13, r1
    13a4:	0c c0       	rjmp	.+24     	; 0x13be <StringUtils_appendDecimal+0x6a>
            *cp-- = (workingValue % 10) + '0';
    13a6:	c9 01       	movw	r24, r18
    13a8:	6a e0       	ldi	r22, 0x0A	; 10
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	bb d6       	rcall	.+3446   	; 0x2124 <__udivmodhi4>
    13ae:	80 5d       	subi	r24, 0xD0	; 208
    13b0:	80 83       	st	Z, r24
    13b2:	f8 01       	movw	r30, r16
            workingValue /= 10;
    13b4:	c9 01       	movw	r24, r18
    13b6:	6a e0       	ldi	r22, 0x0A	; 10
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	b4 d6       	rcall	.+3432   	; 0x2124 <__udivmodhi4>
    13bc:	9b 01       	movw	r18, r22
    13be:	8f 01       	movw	r16, r30
    13c0:	01 50       	subi	r16, 0x01	; 1
    13c2:	10 40       	sbci	r17, 0x00	; 0

    uint16_t workingValue = (value < 0) ? -value : value;

    // working backwards, start with fractional digits
    if (numFractionalDigits > 0) {
        for (int f = 0; f < numFractionalDigits; ++f) {
    13c4:	ec 15       	cp	r30, r12
    13c6:	fd 05       	cpc	r31, r13
    13c8:	71 f7       	brne	.-36     	; 0x13a6 <StringUtils_appendDecimal+0x52>
            *cp-- = (workingValue % 10) + '0';
            workingValue /= 10;
        }
        *cp-- = '.';
    13ca:	8e e2       	ldi	r24, 0x2E	; 46
    13cc:	80 83       	st	Z, r24
    13ce:	f8 01       	movw	r30, r16
    13d0:	00 e0       	ldi	r16, 0x00	; 0
    13d2:	10 e0       	ldi	r17, 0x00	; 0
    }

    // continue with integer digits
    for (int i = 0; (i < minIntegerDigits) || (workingValue != 0); ++i) {
    13d4:	c9 2c       	mov	r12, r9
    13d6:	dd 24       	eor	r13, r13
    13d8:	0e c0       	rjmp	.+28     	; 0x13f6 <StringUtils_appendDecimal+0xa2>
        *cp-- = (workingValue % 10) + '0';
    13da:	c9 01       	movw	r24, r18
    13dc:	6a e0       	ldi	r22, 0x0A	; 10
    13de:	70 e0       	ldi	r23, 0x00	; 0
    13e0:	a1 d6       	rcall	.+3394   	; 0x2124 <__udivmodhi4>
    13e2:	80 5d       	subi	r24, 0xD0	; 208
    13e4:	80 83       	st	Z, r24
    13e6:	31 97       	sbiw	r30, 0x01	; 1
        workingValue /= 10;
    13e8:	c9 01       	movw	r24, r18
    13ea:	6a e0       	ldi	r22, 0x0A	; 10
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	9a d6       	rcall	.+3380   	; 0x2124 <__udivmodhi4>
    13f0:	9b 01       	movw	r18, r22
        }
        *cp-- = '.';
    }

    // continue with integer digits
    for (int i = 0; (i < minIntegerDigits) || (workingValue != 0); ++i) {
    13f2:	0f 5f       	subi	r16, 0xFF	; 255
    13f4:	1f 4f       	sbci	r17, 0xFF	; 255
    13f6:	0c 15       	cp	r16, r12
    13f8:	1d 05       	cpc	r17, r13
    13fa:	7c f3       	brlt	.-34     	; 0x13da <StringUtils_appendDecimal+0x86>
    13fc:	21 15       	cp	r18, r1
    13fe:	31 05       	cpc	r19, r1
    1400:	61 f7       	brne	.-40     	; 0x13da <StringUtils_appendDecimal+0x86>
        *cp-- = (workingValue % 10) + '0';
        workingValue /= 10;
    }

    // insert sign for negative value
    if (value < 0) {
    1402:	f7 fe       	sbrs	r15, 7
    1404:	03 c0       	rjmp	.+6      	; 0x140c <StringUtils_appendDecimal+0xb8>
        *cp-- = '-';
    1406:	8d e2       	ldi	r24, 0x2D	; 45
    1408:	80 83       	st	Z, r24
    140a:	31 97       	sbiw	r30, 0x01	; 1
    }
    CharString_append(cp+1, destStr);
    140c:	cf 01       	movw	r24, r30
    140e:	01 96       	adiw	r24, 0x01	; 1
    1410:	b5 01       	movw	r22, r10
    1412:	5a d0       	rcall	.+180    	; 0x14c8 <CharString_append>
}
    1414:	60 96       	adiw	r28, 0x10	; 16
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
    1428:	ff 90       	pop	r15
    142a:	ef 90       	pop	r14
    142c:	df 90       	pop	r13
    142e:	cf 90       	pop	r12
    1430:	bf 90       	pop	r11
    1432:	af 90       	pop	r10
    1434:	9f 90       	pop	r9
    1436:	08 95       	ret

00001438 <CharString_appendC>:
}

void CharString_appendC (
    const char ch,
    CharString_t* destStr)
{
    1438:	28 2f       	mov	r18, r24
    143a:	db 01       	movw	r26, r22
    if (destStr->length < destStr->capacity) {
    143c:	11 96       	adiw	r26, 0x01	; 1
    143e:	9c 91       	ld	r25, X
    1440:	11 97       	sbiw	r26, 0x01	; 1
    1442:	8c 91       	ld	r24, X
    1444:	98 17       	cp	r25, r24
    1446:	70 f4       	brcc	.+28     	; 0x1464 <CharString_appendC+0x2c>
        char* cp = destStr->body + destStr->length;
    1448:	12 96       	adiw	r26, 0x02	; 2
    144a:	ed 91       	ld	r30, X+
    144c:	fc 91       	ld	r31, X
    144e:	13 97       	sbiw	r26, 0x03	; 3
    1450:	e9 0f       	add	r30, r25
    1452:	f1 1d       	adc	r31, r1
        *cp++ = ch;
    1454:	20 83       	st	Z, r18
        *cp = 0;
    1456:	11 82       	std	Z+1, r1	; 0x01
        ++destStr->length;
    1458:	11 96       	adiw	r26, 0x01	; 1
    145a:	8c 91       	ld	r24, X
    145c:	11 97       	sbiw	r26, 0x01	; 1
    145e:	8f 5f       	subi	r24, 0xFF	; 255
    1460:	11 96       	adiw	r26, 0x01	; 1
    1462:	8c 93       	st	X, r24
    1464:	08 95       	ret

00001466 <CharString_truncate>:
}

void CharString_truncate (
    const uint8_t truncatedLength,
    CharString_t* destStr)
{
    1466:	98 2f       	mov	r25, r24
    1468:	fb 01       	movw	r30, r22
    if (truncatedLength < destStr->length) {
    146a:	81 81       	ldd	r24, Z+1	; 0x01
    146c:	98 17       	cp	r25, r24
    146e:	38 f4       	brcc	.+14     	; 0x147e <CharString_truncate+0x18>
        destStr->length = truncatedLength;
    1470:	91 83       	std	Z+1, r25	; 0x01
        destStr->body[truncatedLength] = 0;
    1472:	02 80       	ldd	r0, Z+2	; 0x02
    1474:	f3 81       	ldd	r31, Z+3	; 0x03
    1476:	e0 2d       	mov	r30, r0
    1478:	e9 0f       	add	r30, r25
    147a:	f1 1d       	adc	r31, r1
    147c:	10 82       	st	Z, r1
    147e:	08 95       	ret

00001480 <CharString_appendP>:
}

void CharString_appendP (
    PGM_P srcStr,
    CharString_t* destStr)
{
    1480:	ef 92       	push	r14
    1482:	ff 92       	push	r15
    1484:	1f 93       	push	r17
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	7c 01       	movw	r14, r24
    148c:	eb 01       	movw	r28, r22
    const uint8_t capacity = destStr->capacity;
    const uint8_t srcStrLen = strlen_P(srcStr);
    148e:	cb d6       	rcall	.+3478   	; 0x2226 <strlen_P>
    const uint8_t remainingCapacity = capacity - destStr->length;
    1490:	29 81       	ldd	r18, Y+1	; 0x01
    const uint8_t charsToAppend =
        (remainingCapacity < srcStrLen)
        ? remainingCapacity
        : srcStrLen;
    1492:	18 81       	ld	r17, Y
    1494:	12 1b       	sub	r17, r18
    1496:	81 17       	cp	r24, r17
    1498:	08 f4       	brcc	.+2      	; 0x149c <CharString_appendP+0x1c>
    149a:	18 2f       	mov	r17, r24
    strncpy_P(destStr->body + destStr->length, srcStr, charsToAppend);
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	9b 81       	ldd	r25, Y+3	; 0x03
    14a0:	82 0f       	add	r24, r18
    14a2:	91 1d       	adc	r25, r1
    14a4:	b7 01       	movw	r22, r14
    14a6:	41 2f       	mov	r20, r17
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	c6 d6       	rcall	.+3468   	; 0x2238 <strncpy_P>
    destStr->length += charsToAppend;
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	81 0f       	add	r24, r17
    14b0:	89 83       	std	Y+1, r24	; 0x01
    destStr->body[destStr->length] = 0;
    14b2:	ea 81       	ldd	r30, Y+2	; 0x02
    14b4:	fb 81       	ldd	r31, Y+3	; 0x03
    14b6:	e8 0f       	add	r30, r24
    14b8:	f1 1d       	adc	r31, r1
    14ba:	10 82       	st	Z, r1
}
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	08 95       	ret

000014c8 <CharString_append>:
#include "CharString.h"

void CharString_append (
    const char* srcStr,
    CharString_t* destStr)
{
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	38 2f       	mov	r19, r24
    14d0:	49 2f       	mov	r20, r25
    14d2:	eb 01       	movw	r28, r22
    const uint8_t capacity = destStr->capacity;
    const uint8_t srcStrLen = strlen(srcStr);
    14d4:	e8 2f       	mov	r30, r24
    14d6:	f9 2f       	mov	r31, r25
    14d8:	df 01       	movw	r26, r30
    14da:	0d 90       	ld	r0, X+
    14dc:	00 20       	and	r0, r0
    14de:	e9 f7       	brne	.-6      	; 0x14da <CharString_append+0x12>
    14e0:	11 97       	sbiw	r26, 0x01	; 1
    14e2:	ae 1b       	sub	r26, r30
    14e4:	bf 0b       	sbc	r27, r31
    const uint8_t remainingCapacity = capacity - destStr->length;
    14e6:	29 81       	ldd	r18, Y+1	; 0x01
    const uint8_t charsToAppend =
        (remainingCapacity < srcStrLen)
        ? remainingCapacity
        : srcStrLen;
    14e8:	18 81       	ld	r17, Y
    14ea:	12 1b       	sub	r17, r18
    14ec:	a1 17       	cp	r26, r17
    14ee:	08 f4       	brcc	.+2      	; 0x14f2 <CharString_append+0x2a>
    14f0:	1a 2f       	mov	r17, r26
    strncpy(destStr->body + destStr->length, srcStr, charsToAppend);
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	9b 81       	ldd	r25, Y+3	; 0x03
    14f6:	82 0f       	add	r24, r18
    14f8:	91 1d       	adc	r25, r1
    14fa:	63 2f       	mov	r22, r19
    14fc:	74 2f       	mov	r23, r20
    14fe:	41 2f       	mov	r20, r17
    1500:	50 e0       	ldi	r21, 0x00	; 0
    1502:	ac d6       	rcall	.+3416   	; 0x225c <strncpy>
    destStr->length += charsToAppend;
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	81 0f       	add	r24, r17
    1508:	89 83       	std	Y+1, r24	; 0x01
    destStr->body[destStr->length] = 0;
    150a:	ea 81       	ldd	r30, Y+2	; 0x02
    150c:	fb 81       	ldd	r31, Y+3	; 0x03
    150e:	e8 0f       	add	r30, r24
    1510:	f1 1d       	adc	r31, r1
    1512:	10 82       	st	Z, r1
}
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	08 95       	ret

0000151c <EEPROM_write>:
void EEPROM_write (
    const unsigned int uiAddress,
    const uint8_t ucData)
{
    /* Wait for completion of previous write */
    while(EECR & (1<<EEPE))
    151c:	f9 99       	sbic	0x1f, 1	; 31
    151e:	fe cf       	rjmp	.-4      	; 0x151c <EEPROM_write>
        ;
    /* Set up address and Data Registers */
    EEAR = uiAddress;
    1520:	92 bd       	out	0x22, r25	; 34
    1522:	81 bd       	out	0x21, r24	; 33
    EEDR = ucData;
    1524:	60 bd       	out	0x20, r22	; 32
    /* Write logical one to EEMPE */
    EECR |= (1<<EEMPE);
    1526:	fa 9a       	sbi	0x1f, 2	; 31
    /* Start eeprom write by setting EEPE */
    EECR |= (1<<EEPE);
    1528:	f9 9a       	sbi	0x1f, 1	; 31
}
    152a:	08 95       	ret

0000152c <EEPROM_read>:

uint8_t EEPROM_read (
    const unsigned int uiAddress)
{
    /* Wait for completion of previous write */
    while (EECR & (1<<EEPE))
    152c:	f9 99       	sbic	0x1f, 1	; 31
    152e:	fe cf       	rjmp	.-4      	; 0x152c <EEPROM_read>
        ;
    /* Set up address register */
    EEAR = uiAddress;
    1530:	92 bd       	out	0x22, r25	; 34
    1532:	81 bd       	out	0x21, r24	; 33
    /* Start eeprom read by writing EERE */
    EECR |= (1<<EERE);
    1534:	f8 9a       	sbi	0x1f, 0	; 31
    /* Return data from Data Register */
    return EEDR;
    1536:	80 b5       	in	r24, 0x20	; 32
    1538:	08 95       	ret

0000153a <Endpoint_Write_Control_Stream_LE>:
    153a:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    153c:	40 91 74 02 	lds	r20, 0x0274
    1540:	50 91 75 02 	lds	r21, 0x0275
    1544:	46 17       	cp	r20, r22
    1546:	57 07       	cpc	r21, r23
    1548:	18 f4       	brcc	.+6      	; 0x1550 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    154a:	f9 01       	movw	r30, r18
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	42 c0       	rjmp	.+132    	; 0x15d4 <Endpoint_Write_Control_Stream_LE+0x9a>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1550:	61 15       	cp	r22, r1
    1552:	71 05       	cpc	r23, r1
    1554:	11 f0       	breq	.+4      	; 0x155a <Endpoint_Write_Control_Stream_LE+0x20>
    1556:	ab 01       	movw	r20, r22
    1558:	f8 cf       	rjmp	.-16     	; 0x154a <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    155a:	80 91 e8 00 	lds	r24, 0x00E8
    155e:	8e 77       	andi	r24, 0x7E	; 126
    1560:	80 93 e8 00 	sts	0x00E8, r24
    1564:	40 e0       	ldi	r20, 0x00	; 0
    1566:	50 e0       	ldi	r21, 0x00	; 0
    1568:	f0 cf       	rjmp	.-32     	; 0x154a <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    156a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    156c:	88 23       	and	r24, r24
    156e:	09 f4       	brne	.+2      	; 0x1572 <Endpoint_Write_Control_Stream_LE+0x38>
    1570:	46 c0       	rjmp	.+140    	; 0x15fe <Endpoint_Write_Control_Stream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1572:	85 30       	cpi	r24, 0x05	; 5
    1574:	09 f4       	brne	.+2      	; 0x1578 <Endpoint_Write_Control_Stream_LE+0x3e>
    1576:	45 c0       	rjmp	.+138    	; 0x1602 <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1578:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    157c:	83 fd       	sbrc	r24, 3
    157e:	43 c0       	rjmp	.+134    	; 0x1606 <Endpoint_Write_Control_Stream_LE+0xcc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1580:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1584:	82 fd       	sbrc	r24, 2
    1586:	35 c0       	rjmp	.+106    	; 0x15f2 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1588:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    158c:	80 ff       	sbrs	r24, 0
    158e:	22 c0       	rjmp	.+68     	; 0x15d4 <Endpoint_Write_Control_Stream_LE+0x9a>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1590:	80 91 f3 00 	lds	r24, 0x00F3
    1594:	90 91 f2 00 	lds	r25, 0x00F2
    1598:	78 2f       	mov	r23, r24
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	29 2f       	mov	r18, r25
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	26 2b       	or	r18, r22
    15a2:	37 2b       	or	r19, r23
    15a4:	07 c0       	rjmp	.+14     	; 0x15b4 <Endpoint_Write_Control_Stream_LE+0x7a>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    15a6:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    15a8:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    15ac:	41 50       	subi	r20, 0x01	; 1
    15ae:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    15b0:	2f 5f       	subi	r18, 0xFF	; 255
    15b2:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    15b4:	41 15       	cp	r20, r1
    15b6:	51 05       	cpc	r21, r1
    15b8:	19 f0       	breq	.+6      	; 0x15c0 <Endpoint_Write_Control_Stream_LE+0x86>
    15ba:	28 30       	cpi	r18, 0x08	; 8
    15bc:	31 05       	cpc	r19, r1
    15be:	98 f3       	brcs	.-26     	; 0x15a6 <Endpoint_Write_Control_Stream_LE+0x6c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	28 30       	cpi	r18, 0x08	; 8
    15c4:	31 05       	cpc	r19, r1
    15c6:	09 f4       	brne	.+2      	; 0x15ca <Endpoint_Write_Control_Stream_LE+0x90>
    15c8:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15ca:	80 91 e8 00 	lds	r24, 0x00E8
    15ce:	8e 77       	andi	r24, 0x7E	; 126
    15d0:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    15d4:	41 15       	cp	r20, r1
    15d6:	51 05       	cpc	r21, r1
    15d8:	41 f6       	brne	.-112    	; 0x156a <Endpoint_Write_Control_Stream_LE+0x30>
    15da:	99 23       	and	r25, r25
    15dc:	31 f6       	brne	.-116    	; 0x156a <Endpoint_Write_Control_Stream_LE+0x30>
    15de:	09 c0       	rjmp	.+18     	; 0x15f2 <Endpoint_Write_Control_Stream_LE+0xb8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    15e0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    15e2:	88 23       	and	r24, r24
    15e4:	61 f0       	breq	.+24     	; 0x15fe <Endpoint_Write_Control_Stream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    15e6:	85 30       	cpi	r24, 0x05	; 5
    15e8:	61 f0       	breq	.+24     	; 0x1602 <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    15ea:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    15ee:	83 fd       	sbrc	r24, 3
    15f0:	0a c0       	rjmp	.+20     	; 0x1606 <Endpoint_Write_Control_Stream_LE+0xcc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    15f2:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    15f6:	82 ff       	sbrs	r24, 2
    15f8:	f3 cf       	rjmp	.-26     	; 0x15e0 <Endpoint_Write_Control_Stream_LE+0xa6>
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	08 95       	ret
    15fe:	82 e0       	ldi	r24, 0x02	; 2
    1600:	08 95       	ret
    1602:	83 e0       	ldi	r24, 0x03	; 3
    1604:	08 95       	ret
    1606:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1608:	08 95       	ret

0000160a <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    160a:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    160c:	40 91 74 02 	lds	r20, 0x0274
    1610:	50 91 75 02 	lds	r21, 0x0275
    1614:	46 17       	cp	r20, r22
    1616:	57 07       	cpc	r21, r23
    1618:	18 f4       	brcc	.+6      	; 0x1620 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    161a:	f9 01       	movw	r30, r18
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	43 c0       	rjmp	.+134    	; 0x16a6 <Endpoint_Write_Control_PStream_LE+0x9c>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1620:	61 15       	cp	r22, r1
    1622:	71 05       	cpc	r23, r1
    1624:	11 f0       	breq	.+4      	; 0x162a <Endpoint_Write_Control_PStream_LE+0x20>
    1626:	ab 01       	movw	r20, r22
    1628:	f8 cf       	rjmp	.-16     	; 0x161a <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    162a:	80 91 e8 00 	lds	r24, 0x00E8
    162e:	8e 77       	andi	r24, 0x7E	; 126
    1630:	80 93 e8 00 	sts	0x00E8, r24
    1634:	40 e0       	ldi	r20, 0x00	; 0
    1636:	50 e0       	ldi	r21, 0x00	; 0
    1638:	f0 cf       	rjmp	.-32     	; 0x161a <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    163a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    163c:	88 23       	and	r24, r24
    163e:	09 f4       	brne	.+2      	; 0x1642 <Endpoint_Write_Control_PStream_LE+0x38>
    1640:	47 c0       	rjmp	.+142    	; 0x16d0 <Endpoint_Write_Control_PStream_LE+0xc6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1642:	85 30       	cpi	r24, 0x05	; 5
    1644:	09 f4       	brne	.+2      	; 0x1648 <Endpoint_Write_Control_PStream_LE+0x3e>
    1646:	46 c0       	rjmp	.+140    	; 0x16d4 <Endpoint_Write_Control_PStream_LE+0xca>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1648:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    164c:	83 fd       	sbrc	r24, 3
    164e:	44 c0       	rjmp	.+136    	; 0x16d8 <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1650:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1654:	82 fd       	sbrc	r24, 2
    1656:	36 c0       	rjmp	.+108    	; 0x16c4 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1658:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    165c:	80 ff       	sbrs	r24, 0
    165e:	23 c0       	rjmp	.+70     	; 0x16a6 <Endpoint_Write_Control_PStream_LE+0x9c>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1660:	80 91 f3 00 	lds	r24, 0x00F3
    1664:	90 91 f2 00 	lds	r25, 0x00F2
    1668:	78 2f       	mov	r23, r24
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	29 2f       	mov	r18, r25
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	26 2b       	or	r18, r22
    1672:	37 2b       	or	r19, r23
    1674:	08 c0       	rjmp	.+16     	; 0x1686 <Endpoint_Write_Control_PStream_LE+0x7c>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1676:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1678:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    167c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    167e:	41 50       	subi	r20, 0x01	; 1
    1680:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1682:	2f 5f       	subi	r18, 0xFF	; 255
    1684:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1686:	41 15       	cp	r20, r1
    1688:	51 05       	cpc	r21, r1
    168a:	19 f0       	breq	.+6      	; 0x1692 <Endpoint_Write_Control_PStream_LE+0x88>
    168c:	28 30       	cpi	r18, 0x08	; 8
    168e:	31 05       	cpc	r19, r1
    1690:	90 f3       	brcs	.-28     	; 0x1676 <Endpoint_Write_Control_PStream_LE+0x6c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	28 30       	cpi	r18, 0x08	; 8
    1696:	31 05       	cpc	r19, r1
    1698:	09 f4       	brne	.+2      	; 0x169c <Endpoint_Write_Control_PStream_LE+0x92>
    169a:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    169c:	80 91 e8 00 	lds	r24, 0x00E8
    16a0:	8e 77       	andi	r24, 0x7E	; 126
    16a2:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    16a6:	41 15       	cp	r20, r1
    16a8:	51 05       	cpc	r21, r1
    16aa:	39 f6       	brne	.-114    	; 0x163a <Endpoint_Write_Control_PStream_LE+0x30>
    16ac:	99 23       	and	r25, r25
    16ae:	29 f6       	brne	.-118    	; 0x163a <Endpoint_Write_Control_PStream_LE+0x30>
    16b0:	09 c0       	rjmp	.+18     	; 0x16c4 <Endpoint_Write_Control_PStream_LE+0xba>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    16b2:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    16b4:	88 23       	and	r24, r24
    16b6:	61 f0       	breq	.+24     	; 0x16d0 <Endpoint_Write_Control_PStream_LE+0xc6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    16b8:	85 30       	cpi	r24, 0x05	; 5
    16ba:	61 f0       	breq	.+24     	; 0x16d4 <Endpoint_Write_Control_PStream_LE+0xca>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    16bc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    16c0:	83 fd       	sbrc	r24, 3
    16c2:	0a c0       	rjmp	.+20     	; 0x16d8 <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    16c4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    16c8:	82 ff       	sbrs	r24, 2
    16ca:	f3 cf       	rjmp	.-26     	; 0x16b2 <Endpoint_Write_Control_PStream_LE+0xa8>
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	08 95       	ret
    16d0:	82 e0       	ldi	r24, 0x02	; 2
    16d2:	08 95       	ret
    16d4:	83 e0       	ldi	r24, 0x03	; 3
    16d6:	08 95       	ret
    16d8:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    16da:	08 95       	ret

000016dc <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
    16dc:	38 2f       	mov	r19, r24
    16de:	28 2f       	mov	r18, r24
    16e0:	2e c0       	rjmp	.+92     	; 0x173e <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16e2:	82 2f       	mov	r24, r18
    16e4:	8f 70       	andi	r24, 0x0F	; 15
    16e6:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    16ea:	23 17       	cp	r18, r19
    16ec:	21 f4       	brne	.+8      	; 0x16f6 <Endpoint_ConfigureEndpoint_Prv+0x1a>
    16ee:	76 2f       	mov	r23, r22
    16f0:	94 2f       	mov	r25, r20
    16f2:	50 e0       	ldi	r21, 0x00	; 0
    16f4:	06 c0       	rjmp	.+12     	; 0x1702 <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    16f6:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    16fa:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
    16fe:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1702:	91 ff       	sbrs	r25, 1
    1704:	1b c0       	rjmp	.+54     	; 0x173c <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1706:	80 91 eb 00 	lds	r24, 0x00EB
    170a:	8e 7f       	andi	r24, 0xFE	; 254
    170c:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1710:	80 91 ed 00 	lds	r24, 0x00ED
    1714:	8d 7f       	andi	r24, 0xFD	; 253
    1716:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    171a:	80 91 eb 00 	lds	r24, 0x00EB
    171e:	81 60       	ori	r24, 0x01	; 1
    1720:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1724:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1728:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
    172c:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1730:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1734:	87 fd       	sbrc	r24, 7
    1736:	02 c0       	rjmp	.+4      	; 0x173c <Endpoint_ConfigureEndpoint_Prv+0x60>
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    173c:	2f 5f       	subi	r18, 0xFF	; 255
    173e:	27 30       	cpi	r18, 0x07	; 7
    1740:	80 f2       	brcs	.-96     	; 0x16e2 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1742:	3f 70       	andi	r19, 0x0F	; 15
    1744:	30 93 e9 00 	sts	0x00E9, r19
    1748:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    174a:	08 95       	ret

0000174c <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	06 2f       	mov	r16, r22
    1756:	ec 01       	movw	r28, r24
    1758:	10 e0       	ldi	r17, 0x00	; 0
    175a:	2a c0       	rjmp	.+84     	; 0x17b0 <Endpoint_ConfigureEndpointTable+0x64>
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
    175c:	98 81       	ld	r25, Y
    175e:	99 23       	and	r25, r25
    1760:	29 f1       	breq	.+74     	; 0x17ac <Endpoint_ConfigureEndpointTable+0x60>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1762:	6b 81       	ldd	r22, Y+3	; 0x03
    1764:	e9 81       	ldd	r30, Y+1	; 0x01
    1766:	fa 81       	ldd	r31, Y+2	; 0x02
    1768:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    176a:	89 2f       	mov	r24, r25
    176c:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    176e:	87 30       	cpi	r24, 0x07	; 7
    1770:	18 f5       	brcc	.+70     	; 0x17b8 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1772:	22 30       	cpi	r18, 0x02	; 2
    1774:	10 f4       	brcc	.+4      	; 0x177a <Endpoint_ConfigureEndpointTable+0x2e>
    1776:	52 e0       	ldi	r21, 0x02	; 2
    1778:	01 c0       	rjmp	.+2      	; 0x177c <Endpoint_ConfigureEndpointTable+0x30>
    177a:	56 e0       	ldi	r21, 0x06	; 6
    177c:	40 e0       	ldi	r20, 0x00	; 0
    177e:	28 e0       	ldi	r18, 0x08	; 8
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	03 c0       	rjmp	.+6      	; 0x178a <Endpoint_ConfigureEndpointTable+0x3e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1784:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1786:	22 0f       	add	r18, r18
    1788:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    178a:	2e 17       	cp	r18, r30
    178c:	3f 07       	cpc	r19, r31
    178e:	d0 f3       	brcs	.-12     	; 0x1784 <Endpoint_ConfigureEndpointTable+0x38>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1790:	62 95       	swap	r22
    1792:	66 0f       	add	r22, r22
    1794:	66 0f       	add	r22, r22
    1796:	60 7c       	andi	r22, 0xC0	; 192
    1798:	99 1f       	adc	r25, r25
    179a:	99 27       	eor	r25, r25
    179c:	99 1f       	adc	r25, r25
    179e:	69 2b       	or	r22, r25
    17a0:	42 95       	swap	r20
    17a2:	40 7f       	andi	r20, 0xF0	; 240
    17a4:	45 2b       	or	r20, r21
    17a6:	9a df       	rcall	.-204    	; 0x16dc <Endpoint_ConfigureEndpoint_Prv>
    17a8:	88 23       	and	r24, r24
    17aa:	31 f0       	breq	.+12     	; 0x17b8 <Endpoint_ConfigureEndpointTable+0x6c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    17ac:	1f 5f       	subi	r17, 0xFF	; 255
    17ae:	25 96       	adiw	r28, 0x05	; 5
    17b0:	10 17       	cp	r17, r16
    17b2:	a0 f2       	brcs	.-88     	; 0x175c <Endpoint_ConfigureEndpointTable+0x10>
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	01 c0       	rjmp	.+2      	; 0x17ba <Endpoint_ConfigureEndpointTable+0x6e>
    17b8:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
}
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	1f 91       	pop	r17
    17c0:	0f 91       	pop	r16
    17c2:	08 95       	ret

000017c4 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    17c4:	80 91 6e 02 	lds	r24, 0x026E
    17c8:	88 23       	and	r24, r24
    17ca:	8c f4       	brge	.+34     	; 0x17ee <Endpoint_ClearStatusStage+0x2a>
    17cc:	03 c0       	rjmp	.+6      	; 0x17d4 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    17ce:	8e b3       	in	r24, 0x1e	; 30
    17d0:	88 23       	and	r24, r24
    17d2:	b1 f0       	breq	.+44     	; 0x1800 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    17d4:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    17d8:	82 ff       	sbrs	r24, 2
    17da:	f9 cf       	rjmp	.-14     	; 0x17ce <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    17dc:	80 91 e8 00 	lds	r24, 0x00E8
    17e0:	8b 77       	andi	r24, 0x7B	; 123
    17e2:	80 93 e8 00 	sts	0x00E8, r24
    17e6:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    17e8:	8e b3       	in	r24, 0x1e	; 30
    17ea:	88 23       	and	r24, r24
    17ec:	49 f0       	breq	.+18     	; 0x1800 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17ee:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    17f2:	80 ff       	sbrs	r24, 0
    17f4:	f9 cf       	rjmp	.-14     	; 0x17e8 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17f6:	80 91 e8 00 	lds	r24, 0x00E8
    17fa:	8e 77       	andi	r24, 0x7E	; 126
    17fc:	80 93 e8 00 	sts	0x00E8, r24
    1800:	08 95       	ret

00001802 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1802:	40 91 e4 00 	lds	r20, 0x00E4
    1806:	50 91 e5 00 	lds	r21, 0x00E5
    180a:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    180c:	80 91 ec 00 	lds	r24, 0x00EC
    1810:	80 ff       	sbrs	r24, 0
    1812:	23 c0       	rjmp	.+70     	; 0x185a <Endpoint_WaitUntilReady+0x58>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1814:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1818:	80 fd       	sbrc	r24, 0
    181a:	1d c0       	rjmp	.+58     	; 0x1856 <Endpoint_WaitUntilReady+0x54>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    181c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    181e:	88 23       	and	r24, r24
    1820:	11 f4       	brne	.+4      	; 0x1826 <Endpoint_WaitUntilReady+0x24>
    1822:	82 e0       	ldi	r24, 0x02	; 2
    1824:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1826:	85 30       	cpi	r24, 0x05	; 5
    1828:	11 f4       	brne	.+4      	; 0x182e <Endpoint_WaitUntilReady+0x2c>
    182a:	83 e0       	ldi	r24, 0x03	; 3
    182c:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    182e:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1832:	85 ff       	sbrs	r24, 5
    1834:	02 c0       	rjmp	.+4      	; 0x183a <Endpoint_WaitUntilReady+0x38>
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	08 95       	ret
    183a:	80 91 e4 00 	lds	r24, 0x00E4
    183e:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1842:	84 17       	cp	r24, r20
    1844:	95 07       	cpc	r25, r21
    1846:	11 f3       	breq	.-60     	; 0x180c <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1848:	22 23       	and	r18, r18
    184a:	11 f4       	brne	.+4      	; 0x1850 <Endpoint_WaitUntilReady+0x4e>
    184c:	84 e0       	ldi	r24, 0x04	; 4
    184e:	08 95       	ret
    1850:	21 50       	subi	r18, 0x01	; 1
    1852:	ac 01       	movw	r20, r24
    1854:	db cf       	rjmp	.-74     	; 0x180c <Endpoint_WaitUntilReady+0xa>
    1856:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1858:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    185a:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    185e:	82 ff       	sbrs	r24, 2
    1860:	dd cf       	rjmp	.-70     	; 0x181c <Endpoint_WaitUntilReady+0x1a>
    1862:	f9 cf       	rjmp	.-14     	; 0x1856 <Endpoint_WaitUntilReady+0x54>

00001864 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1864:	ef 92       	push	r14
    1866:	ff 92       	push	r15
    1868:	0f 93       	push	r16
    186a:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    186c:	4e d0       	rcall	.+156    	; 0x190a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    186e:	55 d0       	rcall	.+170    	; 0x191a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1870:	08 ed       	ldi	r16, 0xD8	; 216
    1872:	10 e0       	ldi	r17, 0x00	; 0
    1874:	f8 01       	movw	r30, r16
    1876:	80 81       	ld	r24, Z
    1878:	8f 77       	andi	r24, 0x7F	; 127
    187a:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    187c:	80 81       	ld	r24, Z
    187e:	80 68       	ori	r24, 0x80	; 128
    1880:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1882:	80 81       	ld	r24, Z
    1884:	8f 7d       	andi	r24, 0xDF	; 223
    1886:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1888:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    188a:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
    188c:	10 92 6a 02 	sts	0x026A, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1890:	10 92 6c 02 	sts	0x026C, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1894:	10 92 6b 02 	sts	0x026B, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1898:	80 ee       	ldi	r24, 0xE0	; 224
    189a:	e8 2e       	mov	r14, r24
    189c:	f1 2c       	mov	r15, r1
    189e:	f7 01       	movw	r30, r14
    18a0:	80 81       	ld	r24, Z
    18a2:	8b 7f       	andi	r24, 0xFB	; 251
    18a4:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    18a6:	f8 01       	movw	r30, r16
    18a8:	80 81       	ld	r24, Z
    18aa:	81 60       	ori	r24, 0x01	; 1
    18ac:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	42 e0       	ldi	r20, 0x02	; 2
    18b4:	13 df       	rcall	.-474    	; 0x16dc <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    18b6:	e1 ee       	ldi	r30, 0xE1	; 225
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	8e 7f       	andi	r24, 0xFE	; 254
    18be:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    18c0:	e2 ee       	ldi	r30, 0xE2	; 226
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	81 60       	ori	r24, 0x01	; 1
    18c8:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    18ca:	80 81       	ld	r24, Z
    18cc:	88 60       	ori	r24, 0x08	; 8
    18ce:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    18d0:	f7 01       	movw	r30, r14
    18d2:	80 81       	ld	r24, Z
    18d4:	8e 7f       	andi	r24, 0xFE	; 254
    18d6:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    18d8:	f8 01       	movw	r30, r16
    18da:	80 81       	ld	r24, Z
    18dc:	80 61       	ori	r24, 0x10	; 16
    18de:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    18e0:	1f 91       	pop	r17
    18e2:	0f 91       	pop	r16
    18e4:	ff 90       	pop	r15
    18e6:	ef 90       	pop	r14
    18e8:	08 95       	ret

000018ea <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    18ea:	e8 ed       	ldi	r30, 0xD8	; 216
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	8f 7e       	andi	r24, 0xEF	; 239
    18f2:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    18f4:	e7 ed       	ldi	r30, 0xD7	; 215
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	81 60       	ori	r24, 0x01	; 1
    18fc:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    18fe:	84 e0       	ldi	r24, 0x04	; 4
    1900:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	80 93 6d 02 	sts	0x026D, r24

	USB_ResetInterface();
}
    1908:	ad cf       	rjmp	.-166    	; 0x1864 <USB_ResetInterface>

0000190a <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    190a:	e8 ed       	ldi	r30, 0xD8	; 216
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	8e 7f       	andi	r24, 0xFE	; 254
    1912:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1914:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    1918:	08 95       	ret

0000191a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    191a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    191e:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    1922:	08 95       	ret

00001924 <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1924:	1f 92       	push	r1
    1926:	0f 92       	push	r0
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	0f 92       	push	r0
    192c:	11 24       	eor	r1, r1
    192e:	1f 93       	push	r17
    1930:	2f 93       	push	r18
    1932:	3f 93       	push	r19
    1934:	4f 93       	push	r20
    1936:	5f 93       	push	r21
    1938:	6f 93       	push	r22
    193a:	7f 93       	push	r23
    193c:	8f 93       	push	r24
    193e:	9f 93       	push	r25
    1940:	af 93       	push	r26
    1942:	bf 93       	push	r27
    1944:	ef 93       	push	r30
    1946:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1948:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    194c:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1950:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1954:	80 91 f0 00 	lds	r24, 0x00F0
    1958:	87 7f       	andi	r24, 0xF7	; 247
    195a:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    195e:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1960:	e4 d0       	rcall	.+456    	; 0x1b2a <USB_Device_ProcessControlRequest>
    1962:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1966:	80 91 f0 00 	lds	r24, 0x00F0
    196a:	88 60       	ori	r24, 0x08	; 8
    196c:	80 93 f0 00 	sts	0x00F0, r24
    1970:	1f 70       	andi	r17, 0x0F	; 15
    1972:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1976:	ff 91       	pop	r31
    1978:	ef 91       	pop	r30
    197a:	bf 91       	pop	r27
    197c:	af 91       	pop	r26
    197e:	9f 91       	pop	r25
    1980:	8f 91       	pop	r24
    1982:	7f 91       	pop	r23
    1984:	6f 91       	pop	r22
    1986:	5f 91       	pop	r21
    1988:	4f 91       	pop	r20
    198a:	3f 91       	pop	r19
    198c:	2f 91       	pop	r18
    198e:	1f 91       	pop	r17
    1990:	0f 90       	pop	r0
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	0f 90       	pop	r0
    1996:	1f 90       	pop	r1
    1998:	18 95       	reti

0000199a <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    199a:	1f 92       	push	r1
    199c:	0f 92       	push	r0
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	0f 92       	push	r0
    19a2:	11 24       	eor	r1, r1
    19a4:	2f 93       	push	r18
    19a6:	3f 93       	push	r19
    19a8:	4f 93       	push	r20
    19aa:	5f 93       	push	r21
    19ac:	6f 93       	push	r22
    19ae:	7f 93       	push	r23
    19b0:	8f 93       	push	r24
    19b2:	9f 93       	push	r25
    19b4:	af 93       	push	r26
    19b6:	bf 93       	push	r27
    19b8:	ef 93       	push	r30
    19ba:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    19bc:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    19c0:	82 ff       	sbrs	r24, 2
    19c2:	0a c0       	rjmp	.+20     	; 0x19d8 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    19c4:	80 91 e2 00 	lds	r24, 0x00E2
    19c8:	82 ff       	sbrs	r24, 2
    19ca:	06 c0       	rjmp	.+12     	; 0x19d8 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    19cc:	80 91 e1 00 	lds	r24, 0x00E1
    19d0:	8b 7f       	andi	r24, 0xFB	; 251
    19d2:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    19d6:	12 d2       	rcall	.+1060   	; 0x1dfc <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    19d8:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    19dc:	80 ff       	sbrs	r24, 0
    19de:	1d c0       	rjmp	.+58     	; 0x1a1a <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    19e0:	80 91 d8 00 	lds	r24, 0x00D8
    19e4:	80 ff       	sbrs	r24, 0
    19e6:	19 c0       	rjmp	.+50     	; 0x1a1a <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    19e8:	80 91 da 00 	lds	r24, 0x00DA
    19ec:	8e 7f       	andi	r24, 0xFE	; 254
    19ee:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    19f2:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    19f6:	80 ff       	sbrs	r24, 0
    19f8:	0c c0       	rjmp	.+24     	; 0x1a12 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    19fa:	80 e1       	ldi	r24, 0x10	; 16
    19fc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    19fe:	82 e1       	ldi	r24, 0x12	; 18
    1a00:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1a02:	09 b4       	in	r0, 0x29	; 41
    1a04:	00 fe       	sbrs	r0, 0
    1a06:	fd cf       	rjmp	.-6      	; 0x1a02 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    1a0c:	0e 94 67 01 	call	0x2ce	; 0x2ce <EVENT_USB_Device_Connect>
    1a10:	04 c0       	rjmp	.+8      	; 0x1a1a <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1a12:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1a14:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
    1a16:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1a1a:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1a1e:	80 ff       	sbrs	r24, 0
    1a20:	17 c0       	rjmp	.+46     	; 0x1a50 <__vector_10+0xb6>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1a22:	80 91 e2 00 	lds	r24, 0x00E2
    1a26:	80 ff       	sbrs	r24, 0
    1a28:	13 c0       	rjmp	.+38     	; 0x1a50 <__vector_10+0xb6>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1a2a:	80 91 e2 00 	lds	r24, 0x00E2
    1a2e:	8e 7f       	andi	r24, 0xFE	; 254
    1a30:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1a34:	80 91 e2 00 	lds	r24, 0x00E2
    1a38:	80 61       	ori	r24, 0x10	; 16
    1a3a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1a3e:	80 91 d8 00 	lds	r24, 0x00D8
    1a42:	80 62       	ori	r24, 0x20	; 32
    1a44:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1a48:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1a4a:	85 e0       	ldi	r24, 0x05	; 5
    1a4c:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
    1a4e:	d6 d1       	rcall	.+940    	; 0x1dfc <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1a50:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1a54:	84 ff       	sbrs	r24, 4
    1a56:	2e c0       	rjmp	.+92     	; 0x1ab4 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1a58:	80 91 e2 00 	lds	r24, 0x00E2
    1a5c:	84 ff       	sbrs	r24, 4
    1a5e:	2a c0       	rjmp	.+84     	; 0x1ab4 <__vector_10+0x11a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1a60:	80 e1       	ldi	r24, 0x10	; 16
    1a62:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1a64:	82 e1       	ldi	r24, 0x12	; 18
    1a66:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1a68:	09 b4       	in	r0, 0x29	; 41
    1a6a:	00 fe       	sbrs	r0, 0
    1a6c:	fd cf       	rjmp	.-6      	; 0x1a68 <__vector_10+0xce>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1a6e:	80 91 d8 00 	lds	r24, 0x00D8
    1a72:	8f 7d       	andi	r24, 0xDF	; 223
    1a74:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1a78:	80 91 e1 00 	lds	r24, 0x00E1
    1a7c:	8f 7e       	andi	r24, 0xEF	; 239
    1a7e:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1a82:	80 91 e2 00 	lds	r24, 0x00E2
    1a86:	8f 7e       	andi	r24, 0xEF	; 239
    1a88:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1a8c:	80 91 e2 00 	lds	r24, 0x00E2
    1a90:	81 60       	ori	r24, 0x01	; 1
    1a92:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1a96:	80 91 6a 02 	lds	r24, 0x026A
    1a9a:	88 23       	and	r24, r24
    1a9c:	11 f0       	breq	.+4      	; 0x1aa2 <__vector_10+0x108>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1a9e:	84 e0       	ldi	r24, 0x04	; 4
    1aa0:	07 c0       	rjmp	.+14     	; 0x1ab0 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1aa2:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1aa6:	87 fd       	sbrc	r24, 7
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <__vector_10+0x114>
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	01 c0       	rjmp	.+2      	; 0x1ab0 <__vector_10+0x116>
    1aae:	83 e0       	ldi	r24, 0x03	; 3
    1ab0:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1ab2:	a4 d1       	rcall	.+840    	; 0x1dfc <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1ab4:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1ab8:	83 ff       	sbrs	r24, 3
    1aba:	26 c0       	rjmp	.+76     	; 0x1b08 <__vector_10+0x16e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1abc:	80 91 e2 00 	lds	r24, 0x00E2
    1ac0:	83 ff       	sbrs	r24, 3
    1ac2:	22 c0       	rjmp	.+68     	; 0x1b08 <__vector_10+0x16e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1ac4:	80 91 e1 00 	lds	r24, 0x00E1
    1ac8:	87 7f       	andi	r24, 0xF7	; 247
    1aca:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1ace:	82 e0       	ldi	r24, 0x02	; 2
    1ad0:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    1ad2:	10 92 6a 02 	sts	0x026A, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1ad6:	80 91 e1 00 	lds	r24, 0x00E1
    1ada:	8e 7f       	andi	r24, 0xFE	; 254
    1adc:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1ae0:	80 91 e2 00 	lds	r24, 0x00E2
    1ae4:	8e 7f       	andi	r24, 0xFE	; 254
    1ae6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1aea:	80 91 e2 00 	lds	r24, 0x00E2
    1aee:	80 61       	ori	r24, 0x10	; 16
    1af0:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	42 e0       	ldi	r20, 0x02	; 2
    1afa:	f0 dd       	rcall	.-1056   	; 0x16dc <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1afc:	80 91 f0 00 	lds	r24, 0x00F0
    1b00:	88 60       	ori	r24, 0x08	; 8
    1b02:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1b06:	7a d1       	rcall	.+756    	; 0x1dfc <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1b08:	ff 91       	pop	r31
    1b0a:	ef 91       	pop	r30
    1b0c:	bf 91       	pop	r27
    1b0e:	af 91       	pop	r26
    1b10:	9f 91       	pop	r25
    1b12:	8f 91       	pop	r24
    1b14:	7f 91       	pop	r23
    1b16:	6f 91       	pop	r22
    1b18:	5f 91       	pop	r21
    1b1a:	4f 91       	pop	r20
    1b1c:	3f 91       	pop	r19
    1b1e:	2f 91       	pop	r18
    1b20:	0f 90       	pop	r0
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	0f 90       	pop	r0
    1b26:	1f 90       	pop	r1
    1b28:	18 95       	reti

00001b2a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1b2a:	1f 93       	push	r17
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	ac 97       	sbiw	r28, 0x2c	; 44
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	ee e6       	ldi	r30, 0x6E	; 110
    1b42:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1b44:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1b48:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1b4a:	22 e0       	ldi	r18, 0x02	; 2
    1b4c:	e6 37       	cpi	r30, 0x76	; 118
    1b4e:	f2 07       	cpc	r31, r18
    1b50:	c9 f7       	brne	.-14     	; 0x1b44 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1b52:	0e 94 6f 01 	call	0x2de	; 0x2de <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b56:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1b5a:	83 ff       	sbrs	r24, 3
    1b5c:	37 c1       	rjmp	.+622    	; 0x1dcc <USB_Device_ProcessControlRequest+0x2a2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1b5e:	80 91 6e 02 	lds	r24, 0x026E

		switch (USB_ControlRequest.bRequest)
    1b62:	30 91 6f 02 	lds	r19, 0x026F
    1b66:	35 30       	cpi	r19, 0x05	; 5
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <USB_Device_ProcessControlRequest+0x42>
    1b6a:	87 c0       	rjmp	.+270    	; 0x1c7a <USB_Device_ProcessControlRequest+0x150>
    1b6c:	36 30       	cpi	r19, 0x06	; 6
    1b6e:	40 f4       	brcc	.+16     	; 0x1b80 <USB_Device_ProcessControlRequest+0x56>
    1b70:	31 30       	cpi	r19, 0x01	; 1
    1b72:	c9 f1       	breq	.+114    	; 0x1be6 <USB_Device_ProcessControlRequest+0xbc>
    1b74:	31 30       	cpi	r19, 0x01	; 1
    1b76:	70 f0       	brcs	.+28     	; 0x1b94 <USB_Device_ProcessControlRequest+0x6a>
    1b78:	33 30       	cpi	r19, 0x03	; 3
    1b7a:	09 f0       	breq	.+2      	; 0x1b7e <USB_Device_ProcessControlRequest+0x54>
    1b7c:	27 c1       	rjmp	.+590    	; 0x1dcc <USB_Device_ProcessControlRequest+0x2a2>
    1b7e:	33 c0       	rjmp	.+102    	; 0x1be6 <USB_Device_ProcessControlRequest+0xbc>
    1b80:	38 30       	cpi	r19, 0x08	; 8
    1b82:	09 f4       	brne	.+2      	; 0x1b86 <USB_Device_ProcessControlRequest+0x5c>
    1b84:	f5 c0       	rjmp	.+490    	; 0x1d70 <USB_Device_ProcessControlRequest+0x246>
    1b86:	39 30       	cpi	r19, 0x09	; 9
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <USB_Device_ProcessControlRequest+0x62>
    1b8a:	04 c1       	rjmp	.+520    	; 0x1d94 <USB_Device_ProcessControlRequest+0x26a>
    1b8c:	36 30       	cpi	r19, 0x06	; 6
    1b8e:	09 f0       	breq	.+2      	; 0x1b92 <USB_Device_ProcessControlRequest+0x68>
    1b90:	1d c1       	rjmp	.+570    	; 0x1dcc <USB_Device_ProcessControlRequest+0x2a2>
    1b92:	95 c0       	rjmp	.+298    	; 0x1cbe <USB_Device_ProcessControlRequest+0x194>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1b94:	80 38       	cpi	r24, 0x80	; 128
    1b96:	21 f0       	breq	.+8      	; 0x1ba0 <USB_Device_ProcessControlRequest+0x76>
    1b98:	82 38       	cpi	r24, 0x82	; 130
    1b9a:	09 f0       	breq	.+2      	; 0x1b9e <USB_Device_ProcessControlRequest+0x74>
    1b9c:	17 c1       	rjmp	.+558    	; 0x1dcc <USB_Device_ProcessControlRequest+0x2a2>
    1b9e:	08 c0       	rjmp	.+16     	; 0x1bb0 <USB_Device_ProcessControlRequest+0x86>
    1ba0:	90 91 6b 02 	lds	r25, 0x026B
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1ba4:	80 91 6c 02 	lds	r24, 0x026C
    1ba8:	88 23       	and	r24, r24
    1baa:	99 f0       	breq	.+38     	; 0x1bd2 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1bac:	92 60       	ori	r25, 0x02	; 2
    1bae:	11 c0       	rjmp	.+34     	; 0x1bd2 <USB_Device_ProcessControlRequest+0xa8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bb0:	80 91 72 02 	lds	r24, 0x0272
    1bb4:	8f 70       	andi	r24, 0x0F	; 15
    1bb6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1bba:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	25 e0       	ldi	r18, 0x05	; 5
    1bc2:	96 95       	lsr	r25
    1bc4:	87 95       	ror	r24
    1bc6:	2a 95       	dec	r18
    1bc8:	e1 f7       	brne	.-8      	; 0x1bc2 <USB_Device_ProcessControlRequest+0x98>
    1bca:	98 2f       	mov	r25, r24
    1bcc:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bce:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1bd2:	80 91 e8 00 	lds	r24, 0x00E8
    1bd6:	87 7f       	andi	r24, 0xF7	; 247
    1bd8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1bdc:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    1be0:	10 92 f1 00 	sts	0x00F1, r1
    1be4:	d0 c0       	rjmp	.+416    	; 0x1d86 <USB_Device_ProcessControlRequest+0x25c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1be6:	88 23       	and	r24, r24
    1be8:	19 f0       	breq	.+6      	; 0x1bf0 <USB_Device_ProcessControlRequest+0xc6>
    1bea:	82 30       	cpi	r24, 0x02	; 2
    1bec:	09 f0       	breq	.+2      	; 0x1bf0 <USB_Device_ProcessControlRequest+0xc6>
    1bee:	ee c0       	rjmp	.+476    	; 0x1dcc <USB_Device_ProcessControlRequest+0x2a2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	8f 71       	andi	r24, 0x1F	; 31
    1bf4:	90 70       	andi	r25, 0x00	; 0
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	21 f0       	breq	.+8      	; 0x1c02 <USB_Device_ProcessControlRequest+0xd8>
    1bfa:	02 97       	sbiw	r24, 0x02	; 2
    1bfc:	09 f0       	breq	.+2      	; 0x1c00 <USB_Device_ProcessControlRequest+0xd6>
    1bfe:	e6 c0       	rjmp	.+460    	; 0x1dcc <USB_Device_ProcessControlRequest+0x2a2>
    1c00:	0c c0       	rjmp	.+24     	; 0x1c1a <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1c02:	80 91 70 02 	lds	r24, 0x0270
    1c06:	81 30       	cpi	r24, 0x01	; 1
    1c08:	09 f0       	breq	.+2      	; 0x1c0c <USB_Device_ProcessControlRequest+0xe2>
    1c0a:	e0 c0       	rjmp	.+448    	; 0x1dcc <USB_Device_ProcessControlRequest+0x2a2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1c0c:	10 92 6c 02 	sts	0x026C, r1
    1c10:	33 30       	cpi	r19, 0x03	; 3
    1c12:	69 f5       	brne	.+90     	; 0x1c6e <USB_Device_ProcessControlRequest+0x144>
    1c14:	80 93 6c 02 	sts	0x026C, r24
    1c18:	2a c0       	rjmp	.+84     	; 0x1c6e <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1c1a:	80 91 70 02 	lds	r24, 0x0270
    1c1e:	88 23       	and	r24, r24
    1c20:	31 f5       	brne	.+76     	; 0x1c6e <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1c22:	20 91 72 02 	lds	r18, 0x0272
    1c26:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1c28:	09 f4       	brne	.+2      	; 0x1c2c <USB_Device_ProcessControlRequest+0x102>
    1c2a:	d0 c0       	rjmp	.+416    	; 0x1dcc <USB_Device_ProcessControlRequest+0x2a2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c2c:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1c30:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1c34:	80 ff       	sbrs	r24, 0
    1c36:	1b c0       	rjmp	.+54     	; 0x1c6e <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1c38:	33 30       	cpi	r19, 0x03	; 3
    1c3a:	21 f4       	brne	.+8      	; 0x1c44 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1c3c:	80 91 eb 00 	lds	r24, 0x00EB
    1c40:	80 62       	ori	r24, 0x20	; 32
    1c42:	13 c0       	rjmp	.+38     	; 0x1c6a <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1c44:	80 91 eb 00 	lds	r24, 0x00EB
    1c48:	80 61       	ori	r24, 0x10	; 16
    1c4a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <USB_Device_ProcessControlRequest+0x12e>
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	2a 95       	dec	r18
    1c5a:	e2 f7       	brpl	.-8      	; 0x1c54 <USB_Device_ProcessControlRequest+0x12a>
    1c5c:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1c60:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1c64:	80 91 eb 00 	lds	r24, 0x00EB
    1c68:	88 60       	ori	r24, 0x08	; 8
    1c6a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c6e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c72:	80 91 e8 00 	lds	r24, 0x00E8
    1c76:	87 7f       	andi	r24, 0xF7	; 247
    1c78:	89 c0       	rjmp	.+274    	; 0x1d8c <USB_Device_ProcessControlRequest+0x262>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1c7a:	88 23       	and	r24, r24
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <USB_Device_ProcessControlRequest+0x156>
    1c7e:	a6 c0       	rjmp	.+332    	; 0x1dcc <USB_Device_ProcessControlRequest+0x2a2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1c80:	10 91 70 02 	lds	r17, 0x0270
    1c84:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1c86:	80 91 e3 00 	lds	r24, 0x00E3
    1c8a:	80 78       	andi	r24, 0x80	; 128
    1c8c:	81 2b       	or	r24, r17
    1c8e:	80 93 e3 00 	sts	0x00E3, r24
    1c92:	80 91 e8 00 	lds	r24, 0x00E8
    1c96:	87 7f       	andi	r24, 0xF7	; 247
    1c98:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1c9c:	93 dd       	rcall	.-1242   	; 0x17c4 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c9e:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1ca2:	80 ff       	sbrs	r24, 0
    1ca4:	fc cf       	rjmp	.-8      	; 0x1c9e <USB_Device_ProcessControlRequest+0x174>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1ca6:	80 91 e3 00 	lds	r24, 0x00E3
    1caa:	80 68       	ori	r24, 0x80	; 128
    1cac:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1cb0:	11 23       	and	r17, r17
    1cb2:	11 f4       	brne	.+4      	; 0x1cb8 <USB_Device_ProcessControlRequest+0x18e>
    1cb4:	82 e0       	ldi	r24, 0x02	; 2
    1cb6:	01 c0       	rjmp	.+2      	; 0x1cba <USB_Device_ProcessControlRequest+0x190>
    1cb8:	83 e0       	ldi	r24, 0x03	; 3
    1cba:	8e bb       	out	0x1e, r24	; 30
    1cbc:	87 c0       	rjmp	.+270    	; 0x1dcc <USB_Device_ProcessControlRequest+0x2a2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1cbe:	80 58       	subi	r24, 0x80	; 128
    1cc0:	82 30       	cpi	r24, 0x02	; 2
    1cc2:	08 f0       	brcs	.+2      	; 0x1cc6 <USB_Device_ProcessControlRequest+0x19c>
    1cc4:	83 c0       	rjmp	.+262    	; 0x1dcc <USB_Device_ProcessControlRequest+0x2a2>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1cc6:	80 91 70 02 	lds	r24, 0x0270
    1cca:	90 91 71 02 	lds	r25, 0x0271
    1cce:	23 e0       	ldi	r18, 0x03	; 3
    1cd0:	8c 3d       	cpi	r24, 0xDC	; 220
    1cd2:	92 07       	cpc	r25, r18
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <USB_Device_ProcessControlRequest+0x1ae>
    1cd6:	33 c0       	rjmp	.+102    	; 0x1d3e <USB_Device_ProcessControlRequest+0x214>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1cd8:	83 e0       	ldi	r24, 0x03	; 3
    1cda:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1cdc:	8a e2       	ldi	r24, 0x2A	; 42
    1cde:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1ce0:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1ce2:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1ce4:	de 01       	movw	r26, r28
    1ce6:	15 96       	adiw	r26, 0x05	; 5
    1ce8:	6e e0       	ldi	r22, 0x0E	; 14
    1cea:	40 e0       	ldi	r20, 0x00	; 0
    1cec:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1cee:	11 e2       	ldi	r17, 0x21	; 33
    1cf0:	e6 2f       	mov	r30, r22
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	10 93 57 00 	sts	0x0057, r17
    1cf8:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    1cfa:	40 ff       	sbrs	r20, 0
    1cfc:	03 c0       	rjmp	.+6      	; 0x1d04 <USB_Device_ProcessControlRequest+0x1da>
					{
						SerialByte >>= 4;
    1cfe:	82 95       	swap	r24
    1d00:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    1d02:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1d04:	8f 70       	andi	r24, 0x0F	; 15
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1d0a:	8a 30       	cpi	r24, 0x0A	; 10
    1d0c:	18 f0       	brcs	.+6      	; 0x1d14 <USB_Device_ProcessControlRequest+0x1ea>
    1d0e:	c9 01       	movw	r24, r18
    1d10:	c7 96       	adiw	r24, 0x37	; 55
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <USB_Device_ProcessControlRequest+0x1ee>
    1d14:	c9 01       	movw	r24, r18
    1d16:	c0 96       	adiw	r24, 0x30	; 48
    1d18:	8d 93       	st	X+, r24
    1d1a:	9d 93       	st	X+, r25
    1d1c:	4f 5f       	subi	r20, 0xFF	; 255
    1d1e:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1d20:	44 31       	cpi	r20, 0x14	; 20
    1d22:	51 05       	cpc	r21, r1
    1d24:	29 f7       	brne	.-54     	; 0x1cf0 <USB_Device_ProcessControlRequest+0x1c6>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1d26:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d28:	80 91 e8 00 	lds	r24, 0x00E8
    1d2c:	87 7f       	andi	r24, 0xF7	; 247
    1d2e:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1d32:	ce 01       	movw	r24, r28
    1d34:	03 96       	adiw	r24, 0x03	; 3
    1d36:	6a e2       	ldi	r22, 0x2A	; 42
    1d38:	70 e0       	ldi	r23, 0x00	; 0
    1d3a:	ff db       	rcall	.-2050   	; 0x153a <Endpoint_Write_Control_Stream_LE>
    1d3c:	13 c0       	rjmp	.+38     	; 0x1d64 <USB_Device_ProcessControlRequest+0x23a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1d3e:	60 91 72 02 	lds	r22, 0x0272
    1d42:	ae 01       	movw	r20, r28
    1d44:	4f 5f       	subi	r20, 0xFF	; 255
    1d46:	5f 4f       	sbci	r21, 0xFF	; 255
    1d48:	0e 94 36 01 	call	0x26c	; 0x26c <CALLBACK_USB_GetDescriptor>
    1d4c:	bc 01       	movw	r22, r24
    1d4e:	00 97       	sbiw	r24, 0x00	; 0
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <USB_Device_ProcessControlRequest+0x22a>
    1d52:	3c c0       	rjmp	.+120    	; 0x1dcc <USB_Device_ProcessControlRequest+0x2a2>
    1d54:	80 91 e8 00 	lds	r24, 0x00E8
    1d58:	87 7f       	andi	r24, 0xF7	; 247
    1d5a:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	9a 81       	ldd	r25, Y+2	; 0x02
    1d62:	53 dc       	rcall	.-1882   	; 0x160a <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1d64:	80 91 e8 00 	lds	r24, 0x00E8
    1d68:	8b 77       	andi	r24, 0x7B	; 123
    1d6a:	80 93 e8 00 	sts	0x00E8, r24
    1d6e:	2e c0       	rjmp	.+92     	; 0x1dcc <USB_Device_ProcessControlRequest+0x2a2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1d70:	80 38       	cpi	r24, 0x80	; 128
    1d72:	61 f5       	brne	.+88     	; 0x1dcc <USB_Device_ProcessControlRequest+0x2a2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d74:	80 91 e8 00 	lds	r24, 0x00E8
    1d78:	87 7f       	andi	r24, 0xF7	; 247
    1d7a:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1d7e:	80 91 6a 02 	lds	r24, 0x026A
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d82:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d86:	80 91 e8 00 	lds	r24, 0x00E8
    1d8a:	8e 77       	andi	r24, 0x7E	; 126
    1d8c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1d90:	19 dd       	rcall	.-1486   	; 0x17c4 <Endpoint_ClearStatusStage>
    1d92:	1c c0       	rjmp	.+56     	; 0x1dcc <USB_Device_ProcessControlRequest+0x2a2>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1d94:	88 23       	and	r24, r24
    1d96:	d1 f4       	brne	.+52     	; 0x1dcc <USB_Device_ProcessControlRequest+0x2a2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1d98:	90 91 70 02 	lds	r25, 0x0270
    1d9c:	92 30       	cpi	r25, 0x02	; 2
    1d9e:	b0 f4       	brcc	.+44     	; 0x1dcc <USB_Device_ProcessControlRequest+0x2a2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1da0:	80 91 e8 00 	lds	r24, 0x00E8
    1da4:	87 7f       	andi	r24, 0xF7	; 247
    1da6:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1daa:	90 93 6a 02 	sts	0x026A, r25

	Endpoint_ClearStatusStage();
    1dae:	0a dd       	rcall	.-1516   	; 0x17c4 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1db0:	80 91 6a 02 	lds	r24, 0x026A
    1db4:	88 23       	and	r24, r24
    1db6:	31 f4       	brne	.+12     	; 0x1dc4 <USB_Device_ProcessControlRequest+0x29a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1db8:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1dbc:	87 fd       	sbrc	r24, 7
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <USB_Device_ProcessControlRequest+0x29a>
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	01 c0       	rjmp	.+2      	; 0x1dc6 <USB_Device_ProcessControlRequest+0x29c>
    1dc4:	84 e0       	ldi	r24, 0x04	; 4
    1dc6:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    1dc8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1dcc:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1dd0:	83 ff       	sbrs	r24, 3
    1dd2:	0a c0       	rjmp	.+20     	; 0x1de8 <USB_Device_ProcessControlRequest+0x2be>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1dd4:	80 91 e8 00 	lds	r24, 0x00E8
    1dd8:	87 7f       	andi	r24, 0xF7	; 247
    1dda:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1dde:	80 91 eb 00 	lds	r24, 0x00EB
    1de2:	80 62       	ori	r24, 0x20	; 32
    1de4:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1de8:	ac 96       	adiw	r28, 0x2c	; 44
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	1f 91       	pop	r17
    1dfa:	08 95       	ret

00001dfc <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1dfc:	08 95       	ret

00001dfe <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1dfe:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1e00:	8e b3       	in	r24, 0x1e	; 30
    1e02:	88 23       	and	r24, r24
    1e04:	71 f0       	breq	.+28     	; 0x1e22 <USB_USBTask+0x24>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1e06:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1e0a:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e0e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e12:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1e16:	83 ff       	sbrs	r24, 3
    1e18:	01 c0       	rjmp	.+2      	; 0x1e1c <USB_USBTask+0x1e>
	  USB_Device_ProcessControlRequest();
    1e1a:	87 de       	rcall	.-754    	; 0x1b2a <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e1c:	1f 70       	andi	r17, 0x0F	; 15
    1e1e:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1e22:	1f 91       	pop	r17
    1e24:	08 95       	ret

00001e26 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1e26:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1e28:	8e b3       	in	r24, 0x1e	; 30
    1e2a:	84 30       	cpi	r24, 0x04	; 4
    1e2c:	99 f5       	brne	.+102    	; 0x1e94 <CDC_Device_ReceiveByte+0x6e>
    1e2e:	84 89       	ldd	r24, Z+20	; 0x14
    1e30:	95 89       	ldd	r25, Z+21	; 0x15
    1e32:	a6 89       	ldd	r26, Z+22	; 0x16
    1e34:	b7 89       	ldd	r27, Z+23	; 0x17
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	a1 05       	cpc	r26, r1
    1e3a:	b1 05       	cpc	r27, r1
    1e3c:	59 f1       	breq	.+86     	; 0x1e94 <CDC_Device_ReceiveByte+0x6e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e3e:	86 81       	ldd	r24, Z+6	; 0x06
    1e40:	8f 70       	andi	r24, 0x0F	; 15
    1e42:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1e46:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1e4a:	82 ff       	sbrs	r24, 2
    1e4c:	23 c0       	rjmp	.+70     	; 0x1e94 <CDC_Device_ReceiveByte+0x6e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1e4e:	40 91 f3 00 	lds	r20, 0x00F3
    1e52:	20 91 f2 00 	lds	r18, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    1e56:	94 2f       	mov	r25, r20
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	82 2b       	or	r24, r18
    1e5e:	93 2b       	or	r25, r19
    1e60:	89 2b       	or	r24, r25
    1e62:	19 f4       	brne	.+6      	; 0x1e6a <CDC_Device_ReceiveByte+0x44>
    1e64:	6f ef       	ldi	r22, 0xFF	; 255
    1e66:	7f ef       	ldi	r23, 0xFF	; 255
    1e68:	04 c0       	rjmp	.+8      	; 0x1e72 <CDC_Device_ReceiveByte+0x4c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1e6a:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1e6e:	68 2f       	mov	r22, r24
    1e70:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1e72:	40 91 f3 00 	lds	r20, 0x00F3
    1e76:	20 91 f2 00 	lds	r18, 0x00F2

		if (!(Endpoint_BytesInEndpoint()))
    1e7a:	94 2f       	mov	r25, r20
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	82 2b       	or	r24, r18
    1e82:	93 2b       	or	r25, r19
    1e84:	89 2b       	or	r24, r25
    1e86:	41 f4       	brne	.+16     	; 0x1e98 <CDC_Device_ReceiveByte+0x72>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1e88:	80 91 e8 00 	lds	r24, 0x00E8
    1e8c:	8b 77       	andi	r24, 0x7B	; 123
    1e8e:	80 93 e8 00 	sts	0x00E8, r24
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <CDC_Device_ReceiveByte+0x72>
    1e94:	6f ef       	ldi	r22, 0xFF	; 255
    1e96:	7f ef       	ldi	r23, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    1e98:	cb 01       	movw	r24, r22
    1e9a:	08 95       	ret

00001e9c <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    1e9c:	08 95       	ret

00001e9e <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1e9e:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1ea0:	8e b3       	in	r24, 0x1e	; 30
    1ea2:	84 30       	cpi	r24, 0x04	; 4
    1ea4:	51 f5       	brne	.+84     	; 0x1efa <CDC_Device_Flush+0x5c>
    1ea6:	84 89       	ldd	r24, Z+20	; 0x14
    1ea8:	95 89       	ldd	r25, Z+21	; 0x15
    1eaa:	a6 89       	ldd	r26, Z+22	; 0x16
    1eac:	b7 89       	ldd	r27, Z+23	; 0x17
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	a1 05       	cpc	r26, r1
    1eb2:	b1 05       	cpc	r27, r1
    1eb4:	11 f1       	breq	.+68     	; 0x1efa <CDC_Device_Flush+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1eb6:	81 81       	ldd	r24, Z+1	; 0x01
    1eb8:	8f 70       	andi	r24, 0x0F	; 15
    1eba:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1ebe:	40 91 f3 00 	lds	r20, 0x00F3
    1ec2:	20 91 f2 00 	lds	r18, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    1ec6:	94 2f       	mov	r25, r20
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	82 2b       	or	r24, r18
    1ece:	93 2b       	or	r25, r19
    1ed0:	89 2b       	or	r24, r25
    1ed2:	a9 f0       	breq	.+42     	; 0x1efe <CDC_Device_Flush+0x60>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1ed4:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ed8:	80 91 e8 00 	lds	r24, 0x00E8
    1edc:	8e 77       	andi	r24, 0x7E	; 126
    1ede:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    1ee2:	95 fd       	sbrc	r25, 5
    1ee4:	0c c0       	rjmp	.+24     	; 0x1efe <CDC_Device_Flush+0x60>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1ee6:	8d dc       	rcall	.-1766   	; 0x1802 <Endpoint_WaitUntilReady>
    1ee8:	98 2f       	mov	r25, r24
    1eea:	88 23       	and	r24, r24
    1eec:	49 f4       	brne	.+18     	; 0x1f00 <CDC_Device_Flush+0x62>
    1eee:	80 91 e8 00 	lds	r24, 0x00E8
    1ef2:	8e 77       	andi	r24, 0x7E	; 126
    1ef4:	80 93 e8 00 	sts	0x00E8, r24
    1ef8:	03 c0       	rjmp	.+6      	; 0x1f00 <CDC_Device_Flush+0x62>
    1efa:	92 e0       	ldi	r25, 0x02	; 2
    1efc:	01 c0       	rjmp	.+2      	; 0x1f00 <CDC_Device_Flush+0x62>
    1efe:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    1f00:	89 2f       	mov	r24, r25
    1f02:	08 95       	ret

00001f04 <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1f04:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1f06:	8e b3       	in	r24, 0x1e	; 30
    1f08:	84 30       	cpi	r24, 0x04	; 4
    1f0a:	91 f4       	brne	.+36     	; 0x1f30 <CDC_Device_USBTask+0x2c>
    1f0c:	84 89       	ldd	r24, Z+20	; 0x14
    1f0e:	95 89       	ldd	r25, Z+21	; 0x15
    1f10:	a6 89       	ldd	r26, Z+22	; 0x16
    1f12:	b7 89       	ldd	r27, Z+23	; 0x17
    1f14:	00 97       	sbiw	r24, 0x00	; 0
    1f16:	a1 05       	cpc	r26, r1
    1f18:	b1 05       	cpc	r27, r1
    1f1a:	51 f0       	breq	.+20     	; 0x1f30 <CDC_Device_USBTask+0x2c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f1c:	81 81       	ldd	r24, Z+1	; 0x01
    1f1e:	8f 70       	andi	r24, 0x0F	; 15
    1f20:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f24:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    1f28:	80 ff       	sbrs	r24, 0
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <CDC_Device_USBTask+0x2c>
	  CDC_Device_Flush(CDCInterfaceInfo);
    1f2c:	cf 01       	movw	r24, r30
    1f2e:	b7 cf       	rjmp	.-146    	; 0x1e9e <CDC_Device_Flush>
    1f30:	08 95       	ret

00001f32 <CDC_Device_SendByte>:
	return Endpoint_Write_PStream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    1f32:	1f 93       	push	r17
    1f34:	fc 01       	movw	r30, r24
    1f36:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1f38:	8e b3       	in	r24, 0x1e	; 30
    1f3a:	84 30       	cpi	r24, 0x04	; 4
    1f3c:	e1 f4       	brne	.+56     	; 0x1f76 <CDC_Device_SendByte+0x44>
    1f3e:	84 89       	ldd	r24, Z+20	; 0x14
    1f40:	95 89       	ldd	r25, Z+21	; 0x15
    1f42:	a6 89       	ldd	r26, Z+22	; 0x16
    1f44:	b7 89       	ldd	r27, Z+23	; 0x17
    1f46:	00 97       	sbiw	r24, 0x00	; 0
    1f48:	a1 05       	cpc	r26, r1
    1f4a:	b1 05       	cpc	r27, r1
    1f4c:	a1 f0       	breq	.+40     	; 0x1f76 <CDC_Device_SendByte+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f4e:	81 81       	ldd	r24, Z+1	; 0x01
    1f50:	8f 70       	andi	r24, 0x0F	; 15
    1f52:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1f56:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    1f5a:	85 fd       	sbrc	r24, 5
    1f5c:	08 c0       	rjmp	.+16     	; 0x1f6e <CDC_Device_SendByte+0x3c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f5e:	80 91 e8 00 	lds	r24, 0x00E8
    1f62:	8e 77       	andi	r24, 0x7E	; 126
    1f64:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1f68:	4c dc       	rcall	.-1896   	; 0x1802 <Endpoint_WaitUntilReady>
    1f6a:	88 23       	and	r24, r24
    1f6c:	29 f4       	brne	.+10     	; 0x1f78 <CDC_Device_SendByte+0x46>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f6e:	10 93 f1 00 	sts	0x00F1, r17
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	01 c0       	rjmp	.+2      	; 0x1f78 <CDC_Device_SendByte+0x46>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    1f76:	82 e0       	ldi	r24, 0x02	; 2
}
    1f78:	1f 91       	pop	r17
    1f7a:	08 95       	ret

00001f7c <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1f7c:	cf 93       	push	r28
    1f7e:	df 93       	push	r29
    1f80:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    1f82:	40 96       	adiw	r24, 0x10	; 16
    1f84:	fc 01       	movw	r30, r24
    1f86:	8b e0       	ldi	r24, 0x0B	; 11
    1f88:	df 01       	movw	r26, r30
    1f8a:	1d 92       	st	X+, r1
    1f8c:	8a 95       	dec	r24
    1f8e:	e9 f7       	brne	.-6      	; 0x1f8a <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    1f90:	82 e0       	ldi	r24, 0x02	; 2
    1f92:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    1f94:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    1f96:	83 e0       	ldi	r24, 0x03	; 3
    1f98:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    1f9a:	ce 01       	movw	r24, r28
    1f9c:	01 96       	adiw	r24, 0x01	; 1
    1f9e:	61 e0       	ldi	r22, 0x01	; 1
    1fa0:	d5 db       	rcall	.-2134   	; 0x174c <Endpoint_ConfigureEndpointTable>
    1fa2:	88 23       	and	r24, r24
    1fa4:	71 f0       	breq	.+28     	; 0x1fc2 <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1fa6:	ce 01       	movw	r24, r28
    1fa8:	06 96       	adiw	r24, 0x06	; 6
    1faa:	61 e0       	ldi	r22, 0x01	; 1
    1fac:	cf db       	rcall	.-2146   	; 0x174c <Endpoint_ConfigureEndpointTable>
    1fae:	88 23       	and	r24, r24
    1fb0:	41 f0       	breq	.+16     	; 0x1fc2 <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	0b 96       	adiw	r24, 0x0b	; 11
    1fb6:	61 e0       	ldi	r22, 0x01	; 1
    1fb8:	c9 db       	rcall	.-2158   	; 0x174c <Endpoint_ConfigureEndpointTable>
    1fba:	88 23       	and	r24, r24
    1fbc:	19 f0       	breq	.+6      	; 0x1fc4 <CDC_Device_ConfigureEndpoints+0x48>
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	01 c0       	rjmp	.+2      	; 0x1fc4 <CDC_Device_ConfigureEndpoints+0x48>
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	return true;
}
    1fc4:	df 91       	pop	r29
    1fc6:	cf 91       	pop	r28
    1fc8:	08 95       	ret

00001fca <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1fd0:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1fd4:	83 ff       	sbrs	r24, 3
    1fd6:	a3 c0       	rjmp	.+326    	; 0x211e <CDC_Device_ProcessControlRequest+0x154>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1fd8:	88 81       	ld	r24, Y
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	20 91 72 02 	lds	r18, 0x0272
    1fe0:	30 91 73 02 	lds	r19, 0x0273
    1fe4:	28 17       	cp	r18, r24
    1fe6:	39 07       	cpc	r19, r25
    1fe8:	09 f0       	breq	.+2      	; 0x1fec <CDC_Device_ProcessControlRequest+0x22>
    1fea:	99 c0       	rjmp	.+306    	; 0x211e <CDC_Device_ProcessControlRequest+0x154>
	  return;

	switch (USB_ControlRequest.bRequest)
    1fec:	80 91 6f 02 	lds	r24, 0x026F
    1ff0:	81 32       	cpi	r24, 0x21	; 33
    1ff2:	69 f0       	breq	.+26     	; 0x200e <CDC_Device_ProcessControlRequest+0x44>
    1ff4:	82 32       	cpi	r24, 0x22	; 34
    1ff6:	20 f4       	brcc	.+8      	; 0x2000 <CDC_Device_ProcessControlRequest+0x36>
    1ff8:	80 32       	cpi	r24, 0x20	; 32
    1ffa:	09 f0       	breq	.+2      	; 0x1ffe <CDC_Device_ProcessControlRequest+0x34>
    1ffc:	90 c0       	rjmp	.+288    	; 0x211e <CDC_Device_ProcessControlRequest+0x154>
    1ffe:	3c c0       	rjmp	.+120    	; 0x2078 <CDC_Device_ProcessControlRequest+0xae>
    2000:	82 32       	cpi	r24, 0x22	; 34
    2002:	09 f4       	brne	.+2      	; 0x2006 <CDC_Device_ProcessControlRequest+0x3c>
    2004:	6b c0       	rjmp	.+214    	; 0x20dc <CDC_Device_ProcessControlRequest+0x112>
    2006:	83 32       	cpi	r24, 0x23	; 35
    2008:	09 f0       	breq	.+2      	; 0x200c <CDC_Device_ProcessControlRequest+0x42>
    200a:	89 c0       	rjmp	.+274    	; 0x211e <CDC_Device_ProcessControlRequest+0x154>
    200c:	7a c0       	rjmp	.+244    	; 0x2102 <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    200e:	80 91 6e 02 	lds	r24, 0x026E
    2012:	81 3a       	cpi	r24, 0xA1	; 161
    2014:	09 f0       	breq	.+2      	; 0x2018 <CDC_Device_ProcessControlRequest+0x4e>
    2016:	83 c0       	rjmp	.+262    	; 0x211e <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2018:	80 91 e8 00 	lds	r24, 0x00E8
    201c:	87 7f       	andi	r24, 0xF7	; 247
    201e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2022:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    2026:	80 ff       	sbrs	r24, 0
    2028:	fc cf       	rjmp	.-8      	; 0x2022 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    202a:	8c 89       	ldd	r24, Y+20	; 0x14
    202c:	9d 89       	ldd	r25, Y+21	; 0x15
    202e:	ae 89       	ldd	r26, Y+22	; 0x16
    2030:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    2032:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    2036:	29 2f       	mov	r18, r25
    2038:	3a 2f       	mov	r19, r26
    203a:	4b 2f       	mov	r20, r27
    203c:	55 27       	eor	r21, r21
    203e:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
    2042:	9d 01       	movw	r18, r26
    2044:	44 27       	eor	r20, r20
    2046:	55 27       	eor	r21, r21
    2048:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
    204c:	8b 2f       	mov	r24, r27
    204e:	99 27       	eor	r25, r25
    2050:	aa 27       	eor	r26, r26
    2052:	bb 27       	eor	r27, r27
    2054:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    2058:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    205a:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    205e:	89 8d       	ldd	r24, Y+25	; 0x19
    2060:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    2064:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2066:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    206a:	80 91 e8 00 	lds	r24, 0x00E8
    206e:	8e 77       	andi	r24, 0x7E	; 126
    2070:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2074:	a7 db       	rcall	.-2226   	; 0x17c4 <Endpoint_ClearStatusStage>
    2076:	53 c0       	rjmp	.+166    	; 0x211e <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2078:	80 91 6e 02 	lds	r24, 0x026E
    207c:	81 32       	cpi	r24, 0x21	; 33
    207e:	09 f0       	breq	.+2      	; 0x2082 <CDC_Device_ProcessControlRequest+0xb8>
    2080:	4e c0       	rjmp	.+156    	; 0x211e <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2082:	80 91 e8 00 	lds	r24, 0x00E8
    2086:	87 7f       	andi	r24, 0xF7	; 247
    2088:	80 93 e8 00 	sts	0x00E8, r24
    208c:	04 c0       	rjmp	.+8      	; 0x2096 <CDC_Device_ProcessControlRequest+0xcc>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    208e:	8e b3       	in	r24, 0x1e	; 30
    2090:	88 23       	and	r24, r24
    2092:	09 f4       	brne	.+2      	; 0x2096 <CDC_Device_ProcessControlRequest+0xcc>
    2094:	44 c0       	rjmp	.+136    	; 0x211e <CDC_Device_ProcessControlRequest+0x154>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2096:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    209a:	82 ff       	sbrs	r24, 2
    209c:	f8 cf       	rjmp	.-16     	; 0x208e <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    209e:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    20a2:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    20a6:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[3] = UEDATX;
    20aa:	30 91 f1 00 	lds	r19, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    20ae:	8c 8b       	std	Y+20, r24	; 0x14
    20b0:	9d 8b       	std	Y+21, r25	; 0x15
    20b2:	2e 8b       	std	Y+22, r18	; 0x16
    20b4:	3f 8b       	std	Y+23, r19	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    20b6:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    20ba:	88 8f       	std	Y+24, r24	; 0x18
    20bc:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    20c0:	89 8f       	std	Y+25, r24	; 0x19
    20c2:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    20c6:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    20c8:	80 91 e8 00 	lds	r24, 0x00E8
    20cc:	8b 77       	andi	r24, 0x7B	; 123
    20ce:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    20d2:	78 db       	rcall	.-2320   	; 0x17c4 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    20d4:	ce 01       	movw	r24, r28
    20d6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <EVENT_CDC_Device_LineEncodingChanged>
    20da:	21 c0       	rjmp	.+66     	; 0x211e <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    20dc:	80 91 6e 02 	lds	r24, 0x026E
    20e0:	81 32       	cpi	r24, 0x21	; 33
    20e2:	e9 f4       	brne	.+58     	; 0x211e <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20e4:	80 91 e8 00 	lds	r24, 0x00E8
    20e8:	87 7f       	andi	r24, 0xF7	; 247
    20ea:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    20ee:	6a db       	rcall	.-2348   	; 0x17c4 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    20f0:	80 91 70 02 	lds	r24, 0x0270
    20f4:	90 91 71 02 	lds	r25, 0x0271
    20f8:	99 8b       	std	Y+17, r25	; 0x11
    20fa:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    20fc:	ce 01       	movw	r24, r28
    20fe:	ce de       	rcall	.-612    	; 0x1e9c <CDC_Device_Event_Stub>
    2100:	0e c0       	rjmp	.+28     	; 0x211e <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2102:	80 91 6e 02 	lds	r24, 0x026E
    2106:	81 32       	cpi	r24, 0x21	; 33
    2108:	51 f4       	brne	.+20     	; 0x211e <CDC_Device_ProcessControlRequest+0x154>
    210a:	80 91 e8 00 	lds	r24, 0x00E8
    210e:	87 7f       	andi	r24, 0xF7	; 247
    2110:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2114:	57 db       	rcall	.-2386   	; 0x17c4 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    2116:	ce 01       	movw	r24, r28
    2118:	60 91 70 02 	lds	r22, 0x0270
    211c:	bf de       	rcall	.-642    	; 0x1e9c <CDC_Device_Event_Stub>
			}

			break;
	}
}
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	08 95       	ret

00002124 <__udivmodhi4>:
    2124:	aa 1b       	sub	r26, r26
    2126:	bb 1b       	sub	r27, r27
    2128:	51 e1       	ldi	r21, 0x11	; 17
    212a:	07 c0       	rjmp	.+14     	; 0x213a <__udivmodhi4_ep>

0000212c <__udivmodhi4_loop>:
    212c:	aa 1f       	adc	r26, r26
    212e:	bb 1f       	adc	r27, r27
    2130:	a6 17       	cp	r26, r22
    2132:	b7 07       	cpc	r27, r23
    2134:	10 f0       	brcs	.+4      	; 0x213a <__udivmodhi4_ep>
    2136:	a6 1b       	sub	r26, r22
    2138:	b7 0b       	sbc	r27, r23

0000213a <__udivmodhi4_ep>:
    213a:	88 1f       	adc	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	5a 95       	dec	r21
    2140:	a9 f7       	brne	.-22     	; 0x212c <__udivmodhi4_loop>
    2142:	80 95       	com	r24
    2144:	90 95       	com	r25
    2146:	bc 01       	movw	r22, r24
    2148:	cd 01       	movw	r24, r26
    214a:	08 95       	ret

0000214c <__udivmodsi4>:
    214c:	a1 e2       	ldi	r26, 0x21	; 33
    214e:	1a 2e       	mov	r1, r26
    2150:	aa 1b       	sub	r26, r26
    2152:	bb 1b       	sub	r27, r27
    2154:	fd 01       	movw	r30, r26
    2156:	0d c0       	rjmp	.+26     	; 0x2172 <__udivmodsi4_ep>

00002158 <__udivmodsi4_loop>:
    2158:	aa 1f       	adc	r26, r26
    215a:	bb 1f       	adc	r27, r27
    215c:	ee 1f       	adc	r30, r30
    215e:	ff 1f       	adc	r31, r31
    2160:	a2 17       	cp	r26, r18
    2162:	b3 07       	cpc	r27, r19
    2164:	e4 07       	cpc	r30, r20
    2166:	f5 07       	cpc	r31, r21
    2168:	20 f0       	brcs	.+8      	; 0x2172 <__udivmodsi4_ep>
    216a:	a2 1b       	sub	r26, r18
    216c:	b3 0b       	sbc	r27, r19
    216e:	e4 0b       	sbc	r30, r20
    2170:	f5 0b       	sbc	r31, r21

00002172 <__udivmodsi4_ep>:
    2172:	66 1f       	adc	r22, r22
    2174:	77 1f       	adc	r23, r23
    2176:	88 1f       	adc	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	1a 94       	dec	r1
    217c:	69 f7       	brne	.-38     	; 0x2158 <__udivmodsi4_loop>
    217e:	60 95       	com	r22
    2180:	70 95       	com	r23
    2182:	80 95       	com	r24
    2184:	90 95       	com	r25
    2186:	9b 01       	movw	r18, r22
    2188:	ac 01       	movw	r20, r24
    218a:	bd 01       	movw	r22, r26
    218c:	cf 01       	movw	r24, r30
    218e:	08 95       	ret

00002190 <__divmodsi4>:
    2190:	97 fb       	bst	r25, 7
    2192:	09 2e       	mov	r0, r25
    2194:	05 26       	eor	r0, r21
    2196:	0e d0       	rcall	.+28     	; 0x21b4 <__divmodsi4_neg1>
    2198:	57 fd       	sbrc	r21, 7
    219a:	04 d0       	rcall	.+8      	; 0x21a4 <__divmodsi4_neg2>
    219c:	d7 df       	rcall	.-82     	; 0x214c <__udivmodsi4>
    219e:	0a d0       	rcall	.+20     	; 0x21b4 <__divmodsi4_neg1>
    21a0:	00 1c       	adc	r0, r0
    21a2:	38 f4       	brcc	.+14     	; 0x21b2 <__divmodsi4_exit>

000021a4 <__divmodsi4_neg2>:
    21a4:	50 95       	com	r21
    21a6:	40 95       	com	r20
    21a8:	30 95       	com	r19
    21aa:	21 95       	neg	r18
    21ac:	3f 4f       	sbci	r19, 0xFF	; 255
    21ae:	4f 4f       	sbci	r20, 0xFF	; 255
    21b0:	5f 4f       	sbci	r21, 0xFF	; 255

000021b2 <__divmodsi4_exit>:
    21b2:	08 95       	ret

000021b4 <__divmodsi4_neg1>:
    21b4:	f6 f7       	brtc	.-4      	; 0x21b2 <__divmodsi4_exit>
    21b6:	90 95       	com	r25
    21b8:	80 95       	com	r24
    21ba:	70 95       	com	r23
    21bc:	61 95       	neg	r22
    21be:	7f 4f       	sbci	r23, 0xFF	; 255
    21c0:	8f 4f       	sbci	r24, 0xFF	; 255
    21c2:	9f 4f       	sbci	r25, 0xFF	; 255
    21c4:	08 95       	ret

000021c6 <atoi>:
    21c6:	fc 01       	movw	r30, r24
    21c8:	88 27       	eor	r24, r24
    21ca:	99 27       	eor	r25, r25
    21cc:	e8 94       	clt
    21ce:	21 91       	ld	r18, Z+
    21d0:	20 32       	cpi	r18, 0x20	; 32
    21d2:	e9 f3       	breq	.-6      	; 0x21ce <atoi+0x8>
    21d4:	29 30       	cpi	r18, 0x09	; 9
    21d6:	10 f0       	brcs	.+4      	; 0x21dc <atoi+0x16>
    21d8:	2e 30       	cpi	r18, 0x0E	; 14
    21da:	c8 f3       	brcs	.-14     	; 0x21ce <atoi+0x8>
    21dc:	2b 32       	cpi	r18, 0x2B	; 43
    21de:	39 f0       	breq	.+14     	; 0x21ee <atoi+0x28>
    21e0:	2d 32       	cpi	r18, 0x2D	; 45
    21e2:	31 f4       	brne	.+12     	; 0x21f0 <atoi+0x2a>
    21e4:	68 94       	set
    21e6:	03 c0       	rjmp	.+6      	; 0x21ee <atoi+0x28>
    21e8:	6f d0       	rcall	.+222    	; 0x22c8 <__mulhi_const_10>
    21ea:	82 0f       	add	r24, r18
    21ec:	91 1d       	adc	r25, r1
    21ee:	21 91       	ld	r18, Z+
    21f0:	20 53       	subi	r18, 0x30	; 48
    21f2:	2a 30       	cpi	r18, 0x0A	; 10
    21f4:	c8 f3       	brcs	.-14     	; 0x21e8 <atoi+0x22>
    21f6:	1e f4       	brtc	.+6      	; 0x21fe <atoi+0x38>
    21f8:	90 95       	com	r25
    21fa:	81 95       	neg	r24
    21fc:	9f 4f       	sbci	r25, 0xFF	; 255
    21fe:	08 95       	ret

00002200 <strcasecmp_P>:
    2200:	fb 01       	movw	r30, r22
    2202:	dc 01       	movw	r26, r24
    2204:	8d 91       	ld	r24, X+
    2206:	81 34       	cpi	r24, 0x41	; 65
    2208:	1c f0       	brlt	.+6      	; 0x2210 <strcasecmp_P+0x10>
    220a:	8b 35       	cpi	r24, 0x5B	; 91
    220c:	0c f4       	brge	.+2      	; 0x2210 <strcasecmp_P+0x10>
    220e:	80 5e       	subi	r24, 0xE0	; 224
    2210:	65 91       	lpm	r22, Z+
    2212:	61 34       	cpi	r22, 0x41	; 65
    2214:	1c f0       	brlt	.+6      	; 0x221c <strcasecmp_P+0x1c>
    2216:	6b 35       	cpi	r22, 0x5B	; 91
    2218:	0c f4       	brge	.+2      	; 0x221c <strcasecmp_P+0x1c>
    221a:	60 5e       	subi	r22, 0xE0	; 224
    221c:	86 1b       	sub	r24, r22
    221e:	61 11       	cpse	r22, r1
    2220:	89 f3       	breq	.-30     	; 0x2204 <strcasecmp_P+0x4>
    2222:	99 0b       	sbc	r25, r25
    2224:	08 95       	ret

00002226 <strlen_P>:
    2226:	fc 01       	movw	r30, r24
    2228:	05 90       	lpm	r0, Z+
    222a:	00 20       	and	r0, r0
    222c:	e9 f7       	brne	.-6      	; 0x2228 <strlen_P+0x2>
    222e:	80 95       	com	r24
    2230:	90 95       	com	r25
    2232:	8e 0f       	add	r24, r30
    2234:	9f 1f       	adc	r25, r31
    2236:	08 95       	ret

00002238 <strncpy_P>:
    2238:	fb 01       	movw	r30, r22
    223a:	dc 01       	movw	r26, r24
    223c:	41 50       	subi	r20, 0x01	; 1
    223e:	50 40       	sbci	r21, 0x00	; 0
    2240:	48 f0       	brcs	.+18     	; 0x2254 <strncpy_P+0x1c>
    2242:	05 90       	lpm	r0, Z+
    2244:	0d 92       	st	X+, r0
    2246:	00 20       	and	r0, r0
    2248:	c9 f7       	brne	.-14     	; 0x223c <strncpy_P+0x4>
    224a:	01 c0       	rjmp	.+2      	; 0x224e <strncpy_P+0x16>
    224c:	1d 92       	st	X+, r1
    224e:	41 50       	subi	r20, 0x01	; 1
    2250:	50 40       	sbci	r21, 0x00	; 0
    2252:	e0 f7       	brcc	.-8      	; 0x224c <strncpy_P+0x14>
    2254:	08 95       	ret

00002256 <strtok>:
    2256:	48 e6       	ldi	r20, 0x68	; 104
    2258:	52 e0       	ldi	r21, 0x02	; 2
    225a:	0f c0       	rjmp	.+30     	; 0x227a <strtok_r>

0000225c <strncpy>:
    225c:	fb 01       	movw	r30, r22
    225e:	dc 01       	movw	r26, r24
    2260:	41 50       	subi	r20, 0x01	; 1
    2262:	50 40       	sbci	r21, 0x00	; 0
    2264:	48 f0       	brcs	.+18     	; 0x2278 <strncpy+0x1c>
    2266:	01 90       	ld	r0, Z+
    2268:	0d 92       	st	X+, r0
    226a:	00 20       	and	r0, r0
    226c:	c9 f7       	brne	.-14     	; 0x2260 <strncpy+0x4>
    226e:	01 c0       	rjmp	.+2      	; 0x2272 <strncpy+0x16>
    2270:	1d 92       	st	X+, r1
    2272:	41 50       	subi	r20, 0x01	; 1
    2274:	50 40       	sbci	r21, 0x00	; 0
    2276:	e0 f7       	brcc	.-8      	; 0x2270 <strncpy+0x14>
    2278:	08 95       	ret

0000227a <strtok_r>:
    227a:	fa 01       	movw	r30, r20
    227c:	a1 91       	ld	r26, Z+
    227e:	b0 81       	ld	r27, Z
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	19 f4       	brne	.+6      	; 0x228a <strtok_r+0x10>
    2284:	10 97       	sbiw	r26, 0x00	; 0
    2286:	e1 f0       	breq	.+56     	; 0x22c0 <strtok_r+0x46>
    2288:	cd 01       	movw	r24, r26
    228a:	dc 01       	movw	r26, r24
    228c:	cd 01       	movw	r24, r26
    228e:	0d 90       	ld	r0, X+
    2290:	00 20       	and	r0, r0
    2292:	11 f4       	brne	.+4      	; 0x2298 <strtok_r+0x1e>
    2294:	c0 01       	movw	r24, r0
    2296:	13 c0       	rjmp	.+38     	; 0x22be <strtok_r+0x44>
    2298:	fb 01       	movw	r30, r22
    229a:	21 91       	ld	r18, Z+
    229c:	22 23       	and	r18, r18
    229e:	19 f0       	breq	.+6      	; 0x22a6 <strtok_r+0x2c>
    22a0:	20 15       	cp	r18, r0
    22a2:	d9 f7       	brne	.-10     	; 0x229a <strtok_r+0x20>
    22a4:	f3 cf       	rjmp	.-26     	; 0x228c <strtok_r+0x12>
    22a6:	fb 01       	movw	r30, r22
    22a8:	21 91       	ld	r18, Z+
    22aa:	20 15       	cp	r18, r0
    22ac:	19 f4       	brne	.+6      	; 0x22b4 <strtok_r+0x3a>
    22ae:	1e 92       	st	-X, r1
    22b0:	11 96       	adiw	r26, 0x01	; 1
    22b2:	06 c0       	rjmp	.+12     	; 0x22c0 <strtok_r+0x46>
    22b4:	22 23       	and	r18, r18
    22b6:	c1 f7       	brne	.-16     	; 0x22a8 <strtok_r+0x2e>
    22b8:	0d 90       	ld	r0, X+
    22ba:	00 20       	and	r0, r0
    22bc:	a1 f7       	brne	.-24     	; 0x22a6 <strtok_r+0x2c>
    22be:	d0 01       	movw	r26, r0
    22c0:	fa 01       	movw	r30, r20
    22c2:	a1 93       	st	Z+, r26
    22c4:	b0 83       	st	Z, r27
    22c6:	08 95       	ret

000022c8 <__mulhi_const_10>:
    22c8:	7a e0       	ldi	r23, 0x0A	; 10
    22ca:	97 9f       	mul	r25, r23
    22cc:	90 2d       	mov	r25, r0
    22ce:	87 9f       	mul	r24, r23
    22d0:	80 2d       	mov	r24, r0
    22d2:	91 0d       	add	r25, r1
    22d4:	11 24       	eor	r1, r1
    22d6:	08 95       	ret

000022d8 <_exit>:
    22d8:	f8 94       	cli

000022da <__stop_program>:
    22da:	ff cf       	rjmp	.-2      	; 0x22da <__stop_program>
